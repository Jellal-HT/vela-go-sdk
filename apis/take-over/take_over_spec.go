/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package take_over

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the TakeOverSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TakeOverSpec{}

// TakeOverSpec struct for TakeOverSpec
type TakeOverSpec struct {
	// Specify the list of rules to control take over strategy at resource level. The selected resource will be able to be taken over by the current application when the resource belongs to no one.
	rules []PolicyRule `json:"rules,omitempty"`
}

// NewTakeOverSpec instantiates a new TakeOverSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTakeOverSpec() *TakeOverSpec {
	this := TakeOverSpec{}
	return &this
}

// NewTakeOverSpecWithDefaults instantiates a new TakeOverSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTakeOverSpecWithDefaults() *TakeOverSpec {
	this := TakeOverSpec{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *TakeOverSpec) GetRules() []PolicyRule {
	if o == nil || utils.IsNil(o.rules) {
		var ret []PolicyRule
		return ret
	}
	return o.rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TakeOverSpec) GetRulesOk() ([]PolicyRule, bool) {
	if o == nil || utils.IsNil(o.rules) {
		return nil, false
	}
	return o.rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *TakeOverSpec) HasRules() bool {
	if o != nil && !utils.IsNil(o.rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []PolicyRule and assigns it to the rules field.
// rules:  Specify the list of rules to control take over strategy at resource level. The selected resource will be able to be taken over by the current application when the resource belongs to no one. 

func (o *TakeOverSpec) Rules(v []PolicyRule) (*TakeOverSpec){
	o.rules = v
return o
}

func (o TakeOverSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TakeOverSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.rules) {
		toSerialize["rules"] = o.rules
	}
	return toSerialize, nil
}

type NullableTakeOverSpec struct {
	value *TakeOverSpec
	isSet bool
}

func (v NullableTakeOverSpec) Get() *TakeOverSpec {
	return v.value
}

func (v *NullableTakeOverSpec) Set(val *TakeOverSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTakeOverSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTakeOverSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTakeOverSpec(val *TakeOverSpec) *NullableTakeOverSpec {
	return &NullableTakeOverSpec{value: val, isSet: true}
}

func (v NullableTakeOverSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTakeOverSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
