/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webservice

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the WebserviceSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &WebserviceSpec{}

// WebserviceSpec struct for WebserviceSpec
type WebserviceSpec struct {
	addRevisionLabel bool `json:"addRevisionLabel"`
	// Specify the annotations in the workload
	annotations *map[string]string `json:"annotations,omitempty"`
	// Arguments to the entrypoint
	args []string `json:"args,omitempty"`
	// Commands to run in the container
	cmd []string `json:"cmd,omitempty"`
	// Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
	cpu *string `json:"cpu,omitempty"`
	// Define arguments by using environment variables
	env []WebserviceSpecEnv `json:"env,omitempty"`
	exposeType string `json:"exposeType"`
	// Specify the hostAliases to add
	hostAliases []WebserviceSpecHostAliases `json:"hostAliases,omitempty"`
	// Which image would you like to use for your service +short=i
	image string `json:"image"`
	// Specify image pull policy for your service
	imagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	// Specify image pull secrets for your service
	imagePullSecrets []string `json:"imagePullSecrets,omitempty"`
	// Specify the labels in the workload
	labels *map[string]string `json:"labels,omitempty"`
	livenessProbe *HealthProbe `json:"livenessProbe,omitempty"`
	// Specifies the attributes of the memory resource required for the container.
	memory *string `json:"memory,omitempty"`
	port *int32 `json:"port,omitempty"`
	// Which ports do you want customer traffic sent to, defaults to 80
	ports []WebserviceSpecPorts `json:"ports,omitempty"`
	readinessProbe *HealthProbe `json:"readinessProbe,omitempty"`
	volumeMounts *WebserviceSpecVolumeMounts `json:"volumeMounts,omitempty"`
	// Deprecated field, use volumeMounts instead.
	volumes []WebserviceSpecVolumes `json:"volumes,omitempty"`
}

// NewWebserviceSpec instantiates a new WebserviceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebserviceSpec(addRevisionLabel bool, exposeType string, image string) *WebserviceSpec {
	this := WebserviceSpec{}
	this.addRevisionLabel = addRevisionLabel
	this.exposeType = exposeType
	this.image = image
	return &this
}

// NewWebserviceSpecWithDefaults instantiates a new WebserviceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebserviceSpecWithDefaults() *WebserviceSpec {
	this := WebserviceSpec{}
	var addRevisionLabel bool = false
	this.addRevisionLabel = addRevisionLabel
	var exposeType string = "ClusterIP"
	this.exposeType = exposeType
	return &this
}

// GetAddRevisionLabel returns the AddRevisionLabel field value
func (o *WebserviceSpec) GetAddRevisionLabel() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.addRevisionLabel
}

// GetAddRevisionLabelOk returns a tuple with the AddRevisionLabel field value
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetAddRevisionLabelOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.addRevisionLabel, true
}

// AddRevisionLabel sets field value
func (o *WebserviceSpec) AddRevisionLabel(v bool) *WebserviceSpec {
	o.addRevisionLabel = v
    return o
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *WebserviceSpec) GetAnnotations() map[string]string {
	if o == nil || utils.IsNil(o.annotations) {
		var ret map[string]string
		return ret
	}
	return *o.annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.annotations) {
		return nil, false
	}
	return o.annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *WebserviceSpec) HasAnnotations() bool {
	if o != nil && !utils.IsNil(o.annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the annotations field.
// annotations:  Specify the annotations in the workload 

func (o *WebserviceSpec) Annotations(v map[string]string) (*WebserviceSpec){
	o.annotations = &v
return o
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *WebserviceSpec) GetArgs() []string {
	if o == nil || utils.IsNil(o.args) {
		var ret []string
		return ret
	}
	return o.args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.args) {
		return nil, false
	}
	return o.args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *WebserviceSpec) HasArgs() bool {
	if o != nil && !utils.IsNil(o.args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the args field.
// args:  Arguments to the entrypoint 

func (o *WebserviceSpec) Args(v []string) (*WebserviceSpec){
	o.args = v
return o
}

// GetCmd returns the Cmd field value if set, zero value otherwise.
func (o *WebserviceSpec) GetCmd() []string {
	if o == nil || utils.IsNil(o.cmd) {
		var ret []string
		return ret
	}
	return o.cmd
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetCmdOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.cmd) {
		return nil, false
	}
	return o.cmd, true
}

// HasCmd returns a boolean if a field has been set.
func (o *WebserviceSpec) HasCmd() bool {
	if o != nil && !utils.IsNil(o.cmd) {
		return true
	}

	return false
}

// SetCmd gets a reference to the given []string and assigns it to the cmd field.
// cmd:  Commands to run in the container 

func (o *WebserviceSpec) Cmd(v []string) (*WebserviceSpec){
	o.cmd = v
return o
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *WebserviceSpec) GetCpu() string {
	if o == nil || utils.IsNil(o.cpu) {
		var ret string
		return ret
	}
	return *o.cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetCpuOk() (*string, bool) {
	if o == nil || utils.IsNil(o.cpu) {
		return nil, false
	}
	return o.cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *WebserviceSpec) HasCpu() bool {
	if o != nil && !utils.IsNil(o.cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given string and assigns it to the cpu field.
// cpu:  Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core) 

func (o *WebserviceSpec) Cpu(v string) (*WebserviceSpec){
	o.cpu = &v
return o
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *WebserviceSpec) GetEnv() []WebserviceSpecEnv {
	if o == nil || utils.IsNil(o.env) {
		var ret []WebserviceSpecEnv
		return ret
	}
	return o.env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetEnvOk() ([]WebserviceSpecEnv, bool) {
	if o == nil || utils.IsNil(o.env) {
		return nil, false
	}
	return o.env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *WebserviceSpec) HasEnv() bool {
	if o != nil && !utils.IsNil(o.env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []WebserviceSpecEnv and assigns it to the env field.
// env:  Define arguments by using environment variables 

func (o *WebserviceSpec) Env(v []WebserviceSpecEnv) (*WebserviceSpec){
	o.env = v
return o
}

// GetExposeType returns the ExposeType field value
func (o *WebserviceSpec) GetExposeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.exposeType
}

// GetExposeTypeOk returns a tuple with the ExposeType field value
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetExposeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.exposeType, true
}

// ExposeType sets field value
func (o *WebserviceSpec) ExposeType(v string) *WebserviceSpec {
	o.exposeType = v
    return o
}

// GetHostAliases returns the HostAliases field value if set, zero value otherwise.
func (o *WebserviceSpec) GetHostAliases() []WebserviceSpecHostAliases {
	if o == nil || utils.IsNil(o.hostAliases) {
		var ret []WebserviceSpecHostAliases
		return ret
	}
	return o.hostAliases
}

// GetHostAliasesOk returns a tuple with the HostAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetHostAliasesOk() ([]WebserviceSpecHostAliases, bool) {
	if o == nil || utils.IsNil(o.hostAliases) {
		return nil, false
	}
	return o.hostAliases, true
}

// HasHostAliases returns a boolean if a field has been set.
func (o *WebserviceSpec) HasHostAliases() bool {
	if o != nil && !utils.IsNil(o.hostAliases) {
		return true
	}

	return false
}

// SetHostAliases gets a reference to the given []WebserviceSpecHostAliases and assigns it to the hostAliases field.
// hostAliases:  Specify the hostAliases to add 

func (o *WebserviceSpec) HostAliases(v []WebserviceSpecHostAliases) (*WebserviceSpec){
	o.hostAliases = v
return o
}

// GetImage returns the Image field value
func (o *WebserviceSpec) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.image, true
}

// Image sets field value
func (o *WebserviceSpec) Image(v string) *WebserviceSpec {
	o.image = v
    return o
}

// GetImagePullPolicy returns the ImagePullPolicy field value if set, zero value otherwise.
func (o *WebserviceSpec) GetImagePullPolicy() string {
	if o == nil || utils.IsNil(o.imagePullPolicy) {
		var ret string
		return ret
	}
	return *o.imagePullPolicy
}

// GetImagePullPolicyOk returns a tuple with the ImagePullPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetImagePullPolicyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.imagePullPolicy) {
		return nil, false
	}
	return o.imagePullPolicy, true
}

// HasImagePullPolicy returns a boolean if a field has been set.
func (o *WebserviceSpec) HasImagePullPolicy() bool {
	if o != nil && !utils.IsNil(o.imagePullPolicy) {
		return true
	}

	return false
}

// SetImagePullPolicy gets a reference to the given string and assigns it to the imagePullPolicy field.
// imagePullPolicy:  Specify image pull policy for your service 

func (o *WebserviceSpec) ImagePullPolicy(v string) (*WebserviceSpec){
	o.imagePullPolicy = &v
return o
}

// GetImagePullSecrets returns the ImagePullSecrets field value if set, zero value otherwise.
func (o *WebserviceSpec) GetImagePullSecrets() []string {
	if o == nil || utils.IsNil(o.imagePullSecrets) {
		var ret []string
		return ret
	}
	return o.imagePullSecrets
}

// GetImagePullSecretsOk returns a tuple with the ImagePullSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetImagePullSecretsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.imagePullSecrets) {
		return nil, false
	}
	return o.imagePullSecrets, true
}

// HasImagePullSecrets returns a boolean if a field has been set.
func (o *WebserviceSpec) HasImagePullSecrets() bool {
	if o != nil && !utils.IsNil(o.imagePullSecrets) {
		return true
	}

	return false
}

// SetImagePullSecrets gets a reference to the given []string and assigns it to the imagePullSecrets field.
// imagePullSecrets:  Specify image pull secrets for your service 

func (o *WebserviceSpec) ImagePullSecrets(v []string) (*WebserviceSpec){
	o.imagePullSecrets = v
return o
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *WebserviceSpec) GetLabels() map[string]string {
	if o == nil || utils.IsNil(o.labels) {
		var ret map[string]string
		return ret
	}
	return *o.labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.labels) {
		return nil, false
	}
	return o.labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *WebserviceSpec) HasLabels() bool {
	if o != nil && !utils.IsNil(o.labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the labels field.
// labels:  Specify the labels in the workload 

func (o *WebserviceSpec) Labels(v map[string]string) (*WebserviceSpec){
	o.labels = &v
return o
}

// GetLivenessProbe returns the LivenessProbe field value if set, zero value otherwise.
func (o *WebserviceSpec) GetLivenessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.livenessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.livenessProbe
}

// GetLivenessProbeOk returns a tuple with the LivenessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetLivenessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.livenessProbe) {
		return nil, false
	}
	return o.livenessProbe, true
}

// HasLivenessProbe returns a boolean if a field has been set.
func (o *WebserviceSpec) HasLivenessProbe() bool {
	if o != nil && !utils.IsNil(o.livenessProbe) {
		return true
	}

	return false
}

// SetLivenessProbe gets a reference to the given HealthProbe and assigns it to the livenessProbe field.
// livenessProbe: 

func (o *WebserviceSpec) LivenessProbe(v HealthProbe) (*WebserviceSpec){
	o.livenessProbe = &v
return o
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *WebserviceSpec) GetMemory() string {
	if o == nil || utils.IsNil(o.memory) {
		var ret string
		return ret
	}
	return *o.memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetMemoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.memory) {
		return nil, false
	}
	return o.memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *WebserviceSpec) HasMemory() bool {
	if o != nil && !utils.IsNil(o.memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given string and assigns it to the memory field.
// memory:  Specifies the attributes of the memory resource required for the container. 

func (o *WebserviceSpec) Memory(v string) (*WebserviceSpec){
	o.memory = &v
return o
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *WebserviceSpec) GetPort() int32 {
	if o == nil || utils.IsNil(o.port) {
		var ret int32
		return ret
	}
	return *o.port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetPortOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.port) {
		return nil, false
	}
	return o.port, true
}

// HasPort returns a boolean if a field has been set.
func (o *WebserviceSpec) HasPort() bool {
	if o != nil && !utils.IsNil(o.port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the port field.
// port: 

func (o *WebserviceSpec) Port(v int32) (*WebserviceSpec){
	o.port = &v
return o
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *WebserviceSpec) GetPorts() []WebserviceSpecPorts {
	if o == nil || utils.IsNil(o.ports) {
		var ret []WebserviceSpecPorts
		return ret
	}
	return o.ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetPortsOk() ([]WebserviceSpecPorts, bool) {
	if o == nil || utils.IsNil(o.ports) {
		return nil, false
	}
	return o.ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *WebserviceSpec) HasPorts() bool {
	if o != nil && !utils.IsNil(o.ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []WebserviceSpecPorts and assigns it to the ports field.
// ports:  Which ports do you want customer traffic sent to, defaults to 80 

func (o *WebserviceSpec) Ports(v []WebserviceSpecPorts) (*WebserviceSpec){
	o.ports = v
return o
}

// GetReadinessProbe returns the ReadinessProbe field value if set, zero value otherwise.
func (o *WebserviceSpec) GetReadinessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.readinessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.readinessProbe
}

// GetReadinessProbeOk returns a tuple with the ReadinessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetReadinessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.readinessProbe) {
		return nil, false
	}
	return o.readinessProbe, true
}

// HasReadinessProbe returns a boolean if a field has been set.
func (o *WebserviceSpec) HasReadinessProbe() bool {
	if o != nil && !utils.IsNil(o.readinessProbe) {
		return true
	}

	return false
}

// SetReadinessProbe gets a reference to the given HealthProbe and assigns it to the readinessProbe field.
// readinessProbe: 

func (o *WebserviceSpec) ReadinessProbe(v HealthProbe) (*WebserviceSpec){
	o.readinessProbe = &v
return o
}

// GetVolumeMounts returns the VolumeMounts field value if set, zero value otherwise.
func (o *WebserviceSpec) GetVolumeMounts() WebserviceSpecVolumeMounts {
	if o == nil || utils.IsNil(o.volumeMounts) {
		var ret WebserviceSpecVolumeMounts
		return ret
	}
	return *o.volumeMounts
}

// GetVolumeMountsOk returns a tuple with the VolumeMounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetVolumeMountsOk() (*WebserviceSpecVolumeMounts, bool) {
	if o == nil || utils.IsNil(o.volumeMounts) {
		return nil, false
	}
	return o.volumeMounts, true
}

// HasVolumeMounts returns a boolean if a field has been set.
func (o *WebserviceSpec) HasVolumeMounts() bool {
	if o != nil && !utils.IsNil(o.volumeMounts) {
		return true
	}

	return false
}

// SetVolumeMounts gets a reference to the given WebserviceSpecVolumeMounts and assigns it to the volumeMounts field.
// volumeMounts: 

func (o *WebserviceSpec) VolumeMounts(v WebserviceSpecVolumeMounts) (*WebserviceSpec){
	o.volumeMounts = &v
return o
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *WebserviceSpec) GetVolumes() []WebserviceSpecVolumes {
	if o == nil || utils.IsNil(o.volumes) {
		var ret []WebserviceSpecVolumes
		return ret
	}
	return o.volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserviceSpec) GetVolumesOk() ([]WebserviceSpecVolumes, bool) {
	if o == nil || utils.IsNil(o.volumes) {
		return nil, false
	}
	return o.volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *WebserviceSpec) HasVolumes() bool {
	if o != nil && !utils.IsNil(o.volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []WebserviceSpecVolumes and assigns it to the volumes field.
// volumes:  Deprecated field, use volumeMounts instead. 

func (o *WebserviceSpec) Volumes(v []WebserviceSpecVolumes) (*WebserviceSpec){
	o.volumes = v
return o
}

func (o WebserviceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebserviceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addRevisionLabel"] = o.addRevisionLabel
	if !utils.IsNil(o.annotations) {
		toSerialize["annotations"] = o.annotations
	}
	if !utils.IsNil(o.args) {
		toSerialize["args"] = o.args
	}
	if !utils.IsNil(o.cmd) {
		toSerialize["cmd"] = o.cmd
	}
	if !utils.IsNil(o.cpu) {
		toSerialize["cpu"] = o.cpu
	}
	if !utils.IsNil(o.env) {
		toSerialize["env"] = o.env
	}
	toSerialize["exposeType"] = o.exposeType
	if !utils.IsNil(o.hostAliases) {
		toSerialize["hostAliases"] = o.hostAliases
	}
	toSerialize["image"] = o.image
	if !utils.IsNil(o.imagePullPolicy) {
		toSerialize["imagePullPolicy"] = o.imagePullPolicy
	}
	if !utils.IsNil(o.imagePullSecrets) {
		toSerialize["imagePullSecrets"] = o.imagePullSecrets
	}
	if !utils.IsNil(o.labels) {
		toSerialize["labels"] = o.labels
	}
	if !utils.IsNil(o.livenessProbe) {
		toSerialize["livenessProbe"] = o.livenessProbe
	}
	if !utils.IsNil(o.memory) {
		toSerialize["memory"] = o.memory
	}
	if !utils.IsNil(o.port) {
		toSerialize["port"] = o.port
	}
	if !utils.IsNil(o.ports) {
		toSerialize["ports"] = o.ports
	}
	if !utils.IsNil(o.readinessProbe) {
		toSerialize["readinessProbe"] = o.readinessProbe
	}
	if !utils.IsNil(o.volumeMounts) {
		toSerialize["volumeMounts"] = o.volumeMounts
	}
	if !utils.IsNil(o.volumes) {
		toSerialize["volumes"] = o.volumes
	}
	return toSerialize, nil
}

type NullableWebserviceSpec struct {
	value *WebserviceSpec
	isSet bool
}

func (v NullableWebserviceSpec) Get() *WebserviceSpec {
	return v.value
}

func (v *NullableWebserviceSpec) Set(val *WebserviceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableWebserviceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableWebserviceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebserviceSpec(val *WebserviceSpec) *NullableWebserviceSpec {
	return &NullableWebserviceSpec{value: val, isSet: true}
}

func (v NullableWebserviceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebserviceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
const WebserviceType = "webservice"

type WebserviceComponent struct {
	Base  ComponentBase
	Props WebserviceSpec
}

func Webservice(name string) *WebserviceComponent {
	w := &WebserviceComponent{Base: ComponentBase{
		Name: name,
	}}
	return w
}

func (w *WebserviceComponent) Build() common.ApplicationComponent {
	traits := make([]common.ApplicationTrait, 0)
	for _, trait := range w.Base.Traits {
		traits = append(traits, trait.Build())
	}
	res := common.ApplicationComponent{
		DependsOn:  w.Base.DependsOn,
		Inputs:     w.Base.Inputs,
		Name:       w.Base.Name,
		Outputs:    w.Base.Outputs,
		Properties: util.Object2RawExtension(w.Props),
		Traits:     traits,
		Type:       WebserviceType,
	}
	return res
}

func (w *WebserviceComponent) Trait(traits ...Trait) *WebserviceComponent {
	w.Base.Traits = append(w.Base.Traits, traits...)
	return w
}

