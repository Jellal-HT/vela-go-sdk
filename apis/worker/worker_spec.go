/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worker

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the WorkerSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &WorkerSpec{}

// WorkerSpec struct for WorkerSpec
type WorkerSpec struct {
	// Commands to run in the container
	cmd []string `json:"cmd,omitempty"`
	// Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
	cpu *string `json:"cpu,omitempty"`
	// Define arguments by using environment variables
	env []WorkerSpecEnv `json:"env,omitempty"`
	// Which image would you like to use for your service +short=i
	image string `json:"image"`
	// Specify image pull policy for your service
	imagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	// Specify image pull secrets for your service
	imagePullSecrets []string `json:"imagePullSecrets,omitempty"`
	livenessProbe *HealthProbe `json:"livenessProbe,omitempty"`
	// Specifies the attributes of the memory resource required for the container.
	memory *string `json:"memory,omitempty"`
	readinessProbe *HealthProbe `json:"readinessProbe,omitempty"`
	volumeMounts *WorkerSpecVolumeMounts `json:"volumeMounts,omitempty"`
	// Deprecated field, use volumeMounts instead.
	volumes []WorkerSpecVolumes `json:"volumes,omitempty"`
}

// NewWorkerSpec instantiates a new WorkerSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkerSpec(image string) *WorkerSpec {
	this := WorkerSpec{}
	this.image = image
	return &this
}

// NewWorkerSpecWithDefaults instantiates a new WorkerSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkerSpecWithDefaults() *WorkerSpec {
	this := WorkerSpec{}
	return &this
}

// GetCmd returns the Cmd field value if set, zero value otherwise.
func (o *WorkerSpec) GetCmd() []string {
	if o == nil || utils.IsNil(o.cmd) {
		var ret []string
		return ret
	}
	return o.cmd
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetCmdOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.cmd) {
		return nil, false
	}
	return o.cmd, true
}

// HasCmd returns a boolean if a field has been set.
func (o *WorkerSpec) HasCmd() bool {
	if o != nil && !utils.IsNil(o.cmd) {
		return true
	}

	return false
}

// SetCmd gets a reference to the given []string and assigns it to the cmd field.
// cmd:  Commands to run in the container 

func (o *WorkerSpec) Cmd(v []string) (*WorkerSpec){
	o.cmd = v
return o
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *WorkerSpec) GetCpu() string {
	if o == nil || utils.IsNil(o.cpu) {
		var ret string
		return ret
	}
	return *o.cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetCpuOk() (*string, bool) {
	if o == nil || utils.IsNil(o.cpu) {
		return nil, false
	}
	return o.cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *WorkerSpec) HasCpu() bool {
	if o != nil && !utils.IsNil(o.cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given string and assigns it to the cpu field.
// cpu:  Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core) 

func (o *WorkerSpec) Cpu(v string) (*WorkerSpec){
	o.cpu = &v
return o
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *WorkerSpec) GetEnv() []WorkerSpecEnv {
	if o == nil || utils.IsNil(o.env) {
		var ret []WorkerSpecEnv
		return ret
	}
	return o.env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetEnvOk() ([]WorkerSpecEnv, bool) {
	if o == nil || utils.IsNil(o.env) {
		return nil, false
	}
	return o.env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *WorkerSpec) HasEnv() bool {
	if o != nil && !utils.IsNil(o.env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []WorkerSpecEnv and assigns it to the env field.
// env:  Define arguments by using environment variables 

func (o *WorkerSpec) Env(v []WorkerSpecEnv) (*WorkerSpec){
	o.env = v
return o
}

// GetImage returns the Image field value
func (o *WorkerSpec) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.image, true
}

// Image sets field value
func (o *WorkerSpec) Image(v string) *WorkerSpec {
	o.image = v
    return o
}

// GetImagePullPolicy returns the ImagePullPolicy field value if set, zero value otherwise.
func (o *WorkerSpec) GetImagePullPolicy() string {
	if o == nil || utils.IsNil(o.imagePullPolicy) {
		var ret string
		return ret
	}
	return *o.imagePullPolicy
}

// GetImagePullPolicyOk returns a tuple with the ImagePullPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetImagePullPolicyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.imagePullPolicy) {
		return nil, false
	}
	return o.imagePullPolicy, true
}

// HasImagePullPolicy returns a boolean if a field has been set.
func (o *WorkerSpec) HasImagePullPolicy() bool {
	if o != nil && !utils.IsNil(o.imagePullPolicy) {
		return true
	}

	return false
}

// SetImagePullPolicy gets a reference to the given string and assigns it to the imagePullPolicy field.
// imagePullPolicy:  Specify image pull policy for your service 

func (o *WorkerSpec) ImagePullPolicy(v string) (*WorkerSpec){
	o.imagePullPolicy = &v
return o
}

// GetImagePullSecrets returns the ImagePullSecrets field value if set, zero value otherwise.
func (o *WorkerSpec) GetImagePullSecrets() []string {
	if o == nil || utils.IsNil(o.imagePullSecrets) {
		var ret []string
		return ret
	}
	return o.imagePullSecrets
}

// GetImagePullSecretsOk returns a tuple with the ImagePullSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetImagePullSecretsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.imagePullSecrets) {
		return nil, false
	}
	return o.imagePullSecrets, true
}

// HasImagePullSecrets returns a boolean if a field has been set.
func (o *WorkerSpec) HasImagePullSecrets() bool {
	if o != nil && !utils.IsNil(o.imagePullSecrets) {
		return true
	}

	return false
}

// SetImagePullSecrets gets a reference to the given []string and assigns it to the imagePullSecrets field.
// imagePullSecrets:  Specify image pull secrets for your service 

func (o *WorkerSpec) ImagePullSecrets(v []string) (*WorkerSpec){
	o.imagePullSecrets = v
return o
}

// GetLivenessProbe returns the LivenessProbe field value if set, zero value otherwise.
func (o *WorkerSpec) GetLivenessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.livenessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.livenessProbe
}

// GetLivenessProbeOk returns a tuple with the LivenessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetLivenessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.livenessProbe) {
		return nil, false
	}
	return o.livenessProbe, true
}

// HasLivenessProbe returns a boolean if a field has been set.
func (o *WorkerSpec) HasLivenessProbe() bool {
	if o != nil && !utils.IsNil(o.livenessProbe) {
		return true
	}

	return false
}

// SetLivenessProbe gets a reference to the given HealthProbe and assigns it to the livenessProbe field.
// livenessProbe: 

func (o *WorkerSpec) LivenessProbe(v HealthProbe) (*WorkerSpec){
	o.livenessProbe = &v
return o
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *WorkerSpec) GetMemory() string {
	if o == nil || utils.IsNil(o.memory) {
		var ret string
		return ret
	}
	return *o.memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetMemoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.memory) {
		return nil, false
	}
	return o.memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *WorkerSpec) HasMemory() bool {
	if o != nil && !utils.IsNil(o.memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given string and assigns it to the memory field.
// memory:  Specifies the attributes of the memory resource required for the container. 

func (o *WorkerSpec) Memory(v string) (*WorkerSpec){
	o.memory = &v
return o
}

// GetReadinessProbe returns the ReadinessProbe field value if set, zero value otherwise.
func (o *WorkerSpec) GetReadinessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.readinessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.readinessProbe
}

// GetReadinessProbeOk returns a tuple with the ReadinessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetReadinessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.readinessProbe) {
		return nil, false
	}
	return o.readinessProbe, true
}

// HasReadinessProbe returns a boolean if a field has been set.
func (o *WorkerSpec) HasReadinessProbe() bool {
	if o != nil && !utils.IsNil(o.readinessProbe) {
		return true
	}

	return false
}

// SetReadinessProbe gets a reference to the given HealthProbe and assigns it to the readinessProbe field.
// readinessProbe: 

func (o *WorkerSpec) ReadinessProbe(v HealthProbe) (*WorkerSpec){
	o.readinessProbe = &v
return o
}

// GetVolumeMounts returns the VolumeMounts field value if set, zero value otherwise.
func (o *WorkerSpec) GetVolumeMounts() WorkerSpecVolumeMounts {
	if o == nil || utils.IsNil(o.volumeMounts) {
		var ret WorkerSpecVolumeMounts
		return ret
	}
	return *o.volumeMounts
}

// GetVolumeMountsOk returns a tuple with the VolumeMounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetVolumeMountsOk() (*WorkerSpecVolumeMounts, bool) {
	if o == nil || utils.IsNil(o.volumeMounts) {
		return nil, false
	}
	return o.volumeMounts, true
}

// HasVolumeMounts returns a boolean if a field has been set.
func (o *WorkerSpec) HasVolumeMounts() bool {
	if o != nil && !utils.IsNil(o.volumeMounts) {
		return true
	}

	return false
}

// SetVolumeMounts gets a reference to the given WorkerSpecVolumeMounts and assigns it to the volumeMounts field.
// volumeMounts: 

func (o *WorkerSpec) VolumeMounts(v WorkerSpecVolumeMounts) (*WorkerSpec){
	o.volumeMounts = &v
return o
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *WorkerSpec) GetVolumes() []WorkerSpecVolumes {
	if o == nil || utils.IsNil(o.volumes) {
		var ret []WorkerSpecVolumes
		return ret
	}
	return o.volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerSpec) GetVolumesOk() ([]WorkerSpecVolumes, bool) {
	if o == nil || utils.IsNil(o.volumes) {
		return nil, false
	}
	return o.volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *WorkerSpec) HasVolumes() bool {
	if o != nil && !utils.IsNil(o.volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []WorkerSpecVolumes and assigns it to the volumes field.
// volumes:  Deprecated field, use volumeMounts instead. 

func (o *WorkerSpec) Volumes(v []WorkerSpecVolumes) (*WorkerSpec){
	o.volumes = v
return o
}

func (o WorkerSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkerSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.cmd) {
		toSerialize["cmd"] = o.cmd
	}
	if !utils.IsNil(o.cpu) {
		toSerialize["cpu"] = o.cpu
	}
	if !utils.IsNil(o.env) {
		toSerialize["env"] = o.env
	}
	toSerialize["image"] = o.image
	if !utils.IsNil(o.imagePullPolicy) {
		toSerialize["imagePullPolicy"] = o.imagePullPolicy
	}
	if !utils.IsNil(o.imagePullSecrets) {
		toSerialize["imagePullSecrets"] = o.imagePullSecrets
	}
	if !utils.IsNil(o.livenessProbe) {
		toSerialize["livenessProbe"] = o.livenessProbe
	}
	if !utils.IsNil(o.memory) {
		toSerialize["memory"] = o.memory
	}
	if !utils.IsNil(o.readinessProbe) {
		toSerialize["readinessProbe"] = o.readinessProbe
	}
	if !utils.IsNil(o.volumeMounts) {
		toSerialize["volumeMounts"] = o.volumeMounts
	}
	if !utils.IsNil(o.volumes) {
		toSerialize["volumes"] = o.volumes
	}
	return toSerialize, nil
}

type NullableWorkerSpec struct {
	value *WorkerSpec
	isSet bool
}

func (v NullableWorkerSpec) Get() *WorkerSpec {
	return v.value
}

func (v *NullableWorkerSpec) Set(val *WorkerSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerSpec(val *WorkerSpec) *NullableWorkerSpec {
	return &NullableWorkerSpec{value: val, isSet: true}
}

func (v NullableWorkerSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
