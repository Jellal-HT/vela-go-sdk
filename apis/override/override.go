/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package override

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1alpha1"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the OverrideSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &OverrideSpec{}

// OverrideSpec struct for OverrideSpec
type OverrideSpec struct {
	// Specify the overridden component configuration.
	components []PatchParams `json:"components"`
	// Specify a list of component names to use, if empty, all components will be selected.
	selector []string `json:"selector,omitempty"`
}

// NewOverrideSpec instantiates a new OverrideSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverrideSpec(components []PatchParams) *OverrideSpec {
	this := OverrideSpec{}
	this.components = components
	return &this
}

// NewOverrideSpecWithDefaults instantiates a new OverrideSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverrideSpecWithDefaults() *OverrideSpec {
	this := OverrideSpec{}
	return &this
}

// GetComponents returns the Components field value
func (o *OverrideSpec) GetComponents() []PatchParams {
	if o == nil {
		var ret []PatchParams
		return ret
	}

	return o.components
}

// GetComponentsOk returns a tuple with the Components field value
// and a boolean to check if the value has been set.
func (o *OverrideSpec) GetComponentsOk() ([]PatchParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.components, true
}

// Components sets field value
func (o *OverrideSpec) Components(v []PatchParams) *OverrideSpec {
	o.components = v
    return o
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *OverrideSpec) GetSelector() []string {
	if o == nil || utils.IsNil(o.selector) {
		var ret []string
		return ret
	}
	return o.selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverrideSpec) GetSelectorOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.selector) {
		return nil, false
	}
	return o.selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *OverrideSpec) HasSelector() bool {
	if o != nil && !utils.IsNil(o.selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given []string and assigns it to the selector field.
// selector:  Specify a list of component names to use, if empty, all components will be selected. 

func (o *OverrideSpec) Selector(v []string) (*OverrideSpec){
	o.selector = v
return o
}

func (o OverrideSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OverrideSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["components"] = o.components
	if !utils.IsNil(o.selector) {
		toSerialize["selector"] = o.selector
	}
	return toSerialize, nil
}

type NullableOverrideSpec struct {
	value *OverrideSpec
	isSet bool
}

func (v NullableOverrideSpec) Get() *OverrideSpec {
	return v.value
}

func (v *NullableOverrideSpec) Set(val *OverrideSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableOverrideSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableOverrideSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverrideSpec(val *OverrideSpec) *NullableOverrideSpec {
	return &NullableOverrideSpec{value: val, isSet: true}
}

func (v NullableOverrideSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverrideSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
const OverrideType = "override"

type OverridePolicy struct {
	Base       PolicyBase
	Properties OverrideSpec
}

func Override() *OverridePolicy {
	o := &OverridePolicy{Base: PolicyBase{}}
	return o
}

func (o *OverridePolicy) Build() v1alpha1.Policy {
	res := v1alpha1.Policy{
		Properties: util.Object2RawExtension(o.Properties),
		Type:       OverrideType,
	}
	return res
}

func (o *OverridePolicy) Props() *OverrideSpec {
	return &o.Properties
}

