/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deploy2env

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the Deploy2envSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Deploy2envSpec{}

// Deploy2envSpec struct for Deploy2envSpec
type Deploy2envSpec struct {
	// Declare the name of the env in policy
	env string `json:"env"`
	// components are applied in parallel
	parallel bool `json:"parallel"`
	// Declare the name of the env-binding policy, if empty, the first env-binding policy will be used
	policy string `json:"policy"`
}

// NewDeploy2envSpec instantiates a new Deploy2envSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploy2envSpec(env string, parallel bool, policy string) *Deploy2envSpec {
	this := Deploy2envSpec{}
	this.env = env
	this.parallel = parallel
	this.policy = policy
	return &this
}

// NewDeploy2envSpecWithDefaults instantiates a new Deploy2envSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploy2envSpecWithDefaults() *Deploy2envSpec {
	this := Deploy2envSpec{}
	var parallel bool = false
	this.parallel = parallel
	var policy string = ""
	this.policy = policy
	return &this
}

// GetEnv returns the Env field value
func (o *Deploy2envSpec) GetEnv() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.env
}

// GetEnvOk returns a tuple with the Env field value
// and a boolean to check if the value has been set.
func (o *Deploy2envSpec) GetEnvOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.env, true
}

// Env sets field value
func (o *Deploy2envSpec) Env(v string) *Deploy2envSpec {
	o.env = v
    return o
}

// GetParallel returns the Parallel field value
func (o *Deploy2envSpec) GetParallel() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.parallel
}

// GetParallelOk returns a tuple with the Parallel field value
// and a boolean to check if the value has been set.
func (o *Deploy2envSpec) GetParallelOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.parallel, true
}

// Parallel sets field value
func (o *Deploy2envSpec) Parallel(v bool) *Deploy2envSpec {
	o.parallel = v
    return o
}

// GetPolicy returns the Policy field value
func (o *Deploy2envSpec) GetPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *Deploy2envSpec) GetPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.policy, true
}

// Policy sets field value
func (o *Deploy2envSpec) Policy(v string) *Deploy2envSpec {
	o.policy = v
    return o
}

func (o Deploy2envSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Deploy2envSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["env"] = o.env
	toSerialize["parallel"] = o.parallel
	toSerialize["policy"] = o.policy
	return toSerialize, nil
}

type NullableDeploy2envSpec struct {
	value *Deploy2envSpec
	isSet bool
}

func (v NullableDeploy2envSpec) Get() *Deploy2envSpec {
	return v.value
}

func (v *NullableDeploy2envSpec) Set(val *Deploy2envSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploy2envSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploy2envSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploy2envSpec(val *Deploy2envSpec) *NullableDeploy2envSpec {
	return &NullableDeploy2envSpec{value: val, isSet: true}
}

func (v NullableDeploy2envSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploy2envSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
