/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expose

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the ExposeSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ExposeSpec{}

// ExposeSpec struct for ExposeSpec
type ExposeSpec struct {
	// Specify the annotaions of the exposed service
	annotations map[string]string `json:"annotations"`
	// Specify the exposion ports
	port []int32 `json:"port"`
	// Specify what kind of Service you want. options: \"ClusterIP\",\"NodePort\",\"LoadBalancer\",\"ExternalName\"
	type_ string `json:"type"`
}

// NewExposeSpec instantiates a new ExposeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExposeSpec(annotations map[string]string, port []int32, type_ string) *ExposeSpec {
	this := ExposeSpec{}
	this.annotations = annotations
	this.port = port
	this.type_ = type_
	return &this
}

// NewExposeSpecWithDefaults instantiates a new ExposeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExposeSpecWithDefaults() *ExposeSpec {
	this := ExposeSpec{}
	var type_ string = "ClusterIP"
	this.type_ = type_
	return &this
}

// GetAnnotations returns the Annotations field value
func (o *ExposeSpec) GetAnnotations() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value
// and a boolean to check if the value has been set.
func (o *ExposeSpec) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.annotations, true
}

// Annotations sets field value
func (o *ExposeSpec) Annotations(v map[string]string) *ExposeSpec {
	o.annotations = v
    return o
}

// GetPort returns the Port field value
func (o *ExposeSpec) GetPort() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *ExposeSpec) GetPortOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.port, true
}

// Port sets field value
func (o *ExposeSpec) Port(v []int32) *ExposeSpec {
	o.port = v
    return o
}

// GetType returns the Type field value
func (o *ExposeSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.type_
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ExposeSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.type_, true
}

// Type sets field value
func (o *ExposeSpec) Type(v string) *ExposeSpec {
	o.type_ = v
    return o
}

func (o ExposeSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExposeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["annotations"] = o.annotations
	toSerialize["port"] = o.port
	toSerialize["type"] = o.type_
	return toSerialize, nil
}

type NullableExposeSpec struct {
	value *ExposeSpec
	isSet bool
}

func (v NullableExposeSpec) Get() *ExposeSpec {
	return v.value
}

func (v *NullableExposeSpec) Set(val *ExposeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableExposeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableExposeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExposeSpec(val *ExposeSpec) *NullableExposeSpec {
	return &NullableExposeSpec{value: val, isSet: true}
}

func (v NullableExposeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExposeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
