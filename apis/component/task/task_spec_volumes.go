/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package task

import (
	"encoding/json"

	"vela-go-sdk/apis/utils"
)

// checks if the TaskSpecVolumes type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TaskSpecVolumes{}

// TaskSpecVolumes struct for TaskSpecVolumes
type TaskSpecVolumes struct {
	medium    string `json:"medium"`
	mountPath string `json:"mountPath"`
	name      string `json:"name"`
	// Specify volume type, options: \"pvc\",\"configMap\",\"secret\",\"emptyDir\", default to emptyDir
	type_ string `json:"type"`
}

// TaskSpecVolumesWith instantiates a new TaskSpecVolumes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func TaskSpecVolumesWith(medium string, mountPath string, name string, type_ string) *TaskSpecVolumes {
	this := TaskSpecVolumes{}
	this.medium = medium
	this.mountPath = mountPath
	this.name = name
	this.type_ = type_
	return &this
}

// NewTaskSpecVolumes instantiates a new TaskSpecVolumes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskSpecVolumes() *TaskSpecVolumes {
	this := TaskSpecVolumes{}
	var medium string = ""
	this.medium = medium
	var type_ string = "emptyDir"
	this.type_ = type_
	return &this
}

// GetMedium returns the Medium field value
func (o *TaskSpecVolumes) GetMedium() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.medium
}

// GetMediumOk returns a tuple with the Medium field value
// and a boolean to check if the value has been set.
func (o *TaskSpecVolumes) GetMediumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.medium, true
}

// Medium sets field value
func (o *TaskSpecVolumes) Medium(v string) *TaskSpecVolumes {
	o.medium = v
	return o
}

// GetMountPath returns the MountPath field value
func (o *TaskSpecVolumes) GetMountPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.mountPath
}

// GetMountPathOk returns a tuple with the MountPath field value
// and a boolean to check if the value has been set.
func (o *TaskSpecVolumes) GetMountPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.mountPath, true
}

// MountPath sets field value
func (o *TaskSpecVolumes) MountPath(v string) *TaskSpecVolumes {
	o.mountPath = v
	return o
}

// GetName returns the Name field value
func (o *TaskSpecVolumes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TaskSpecVolumes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.name, true
}

// Name sets field value
func (o *TaskSpecVolumes) Name(v string) *TaskSpecVolumes {
	o.name = v
	return o
}

// GetType returns the Type field value
func (o *TaskSpecVolumes) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.type_
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TaskSpecVolumes) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.type_, true
}

// Type sets field value
func (o *TaskSpecVolumes) Type(v string) *TaskSpecVolumes {
	o.type_ = v
	return o
}

func (o TaskSpecVolumes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskSpecVolumes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["medium"] = o.medium
	toSerialize["mountPath"] = o.mountPath
	toSerialize["name"] = o.name
	toSerialize["type"] = o.type_
	return toSerialize, nil
}

type NullableTaskSpecVolumes struct {
	value *TaskSpecVolumes
	isSet bool
}

func (v NullableTaskSpecVolumes) Get() *TaskSpecVolumes {
	return v.value
}

func (v *NullableTaskSpecVolumes) Set(val *TaskSpecVolumes) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskSpecVolumes) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskSpecVolumes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskSpecVolumes(val *TaskSpecVolumes) *NullableTaskSpecVolumes {
	return &NullableTaskSpecVolumes{value: val, isSet: true}
}

func (v NullableTaskSpecVolumes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskSpecVolumes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
