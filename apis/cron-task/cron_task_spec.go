/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cron_task

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the CronTaskSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CronTaskSpec{}

// CronTaskSpec struct for CronTaskSpec
type CronTaskSpec struct {
	// The duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it
	activeDeadlineSeconds *int32 `json:"activeDeadlineSeconds,omitempty"`
	// Specify the annotations in the workload
	annotations *map[string]string `json:"annotations,omitempty"`
	// The number of retries before marking this job failed
	backoffLimit int32 `json:"backoffLimit"`
	// Commands to run in the container
	cmd []string `json:"cmd,omitempty"`
	// Specifies how to treat concurrent executions of a Job
	concurrencyPolicy string `json:"concurrencyPolicy"`
	// Specify number of tasks to run in parallel +short=c
	count int32 `json:"count"`
	// Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
	cpu *string `json:"cpu,omitempty"`
	// Define arguments by using environment variables
	env []Env `json:"env,omitempty"`
	// The number of failed finished jobs to retain
	failedJobsHistoryLimit int32 `json:"failedJobsHistoryLimit"`
	// An optional list of hosts and IPs that will be injected into the pod's hosts file
	hostAliases []HostAliases `json:"hostAliases,omitempty"`
	// Which image would you like to use for your service +short=i
	image string `json:"image"`
	// Specify image pull policy for your service
	imagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	// Specify image pull secrets for your service
	imagePullSecrets []string `json:"imagePullSecrets,omitempty"`
	// Specify the labels in the workload
	labels *map[string]string `json:"labels,omitempty"`
	livenessProbe *HealthProbe `json:"livenessProbe,omitempty"`
	// Specifies the attributes of the memory resource required for the container.
	memory *string `json:"memory,omitempty"`
	readinessProbe *HealthProbe `json:"readinessProbe,omitempty"`
	// Define the job restart policy, the value can only be Never or OnFailure. By default, it's Never.
	restart string `json:"restart"`
	// Specify the schedule in Cron format, see https://en.wikipedia.org/wiki/Cron
	schedule string `json:"schedule"`
	// Specify deadline in seconds for starting the job if it misses scheduled
	startingDeadlineSeconds *int32 `json:"startingDeadlineSeconds,omitempty"`
	// The number of successful finished jobs to retain
	successfulJobsHistoryLimit int32 `json:"successfulJobsHistoryLimit"`
	// suspend subsequent executions
	suspend bool `json:"suspend"`
	// Limits the lifetime of a Job that has finished
	ttlSecondsAfterFinished *int32 `json:"ttlSecondsAfterFinished,omitempty"`
	// Declare volumes and volumeMounts
	volumes []Volumes `json:"volumes,omitempty"`
}

// NewCronTaskSpec instantiates a new CronTaskSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCronTaskSpec(backoffLimit int32, concurrencyPolicy string, count int32, failedJobsHistoryLimit int32, image string, restart string, schedule string, successfulJobsHistoryLimit int32, suspend bool) *CronTaskSpec {
	this := CronTaskSpec{}
	this.backoffLimit = backoffLimit
	this.concurrencyPolicy = concurrencyPolicy
	this.count = count
	this.failedJobsHistoryLimit = failedJobsHistoryLimit
	this.image = image
	this.restart = restart
	this.schedule = schedule
	this.successfulJobsHistoryLimit = successfulJobsHistoryLimit
	this.suspend = suspend
	return &this
}

// NewCronTaskSpecWithDefaults instantiates a new CronTaskSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCronTaskSpecWithDefaults() *CronTaskSpec {
	this := CronTaskSpec{}
	var backoffLimit int32 = 6
	this.backoffLimit = backoffLimit
	var concurrencyPolicy string = "Allow"
	this.concurrencyPolicy = concurrencyPolicy
	var count int32 = 1
	this.count = count
	var failedJobsHistoryLimit int32 = 1
	this.failedJobsHistoryLimit = failedJobsHistoryLimit
	var restart string = "Never"
	this.restart = restart
	var successfulJobsHistoryLimit int32 = 3
	this.successfulJobsHistoryLimit = successfulJobsHistoryLimit
	var suspend bool = false
	this.suspend = suspend
	return &this
}

// GetActiveDeadlineSeconds returns the ActiveDeadlineSeconds field value if set, zero value otherwise.
func (o *CronTaskSpec) GetActiveDeadlineSeconds() int32 {
	if o == nil || utils.IsNil(o.activeDeadlineSeconds) {
		var ret int32
		return ret
	}
	return *o.activeDeadlineSeconds
}

// GetActiveDeadlineSecondsOk returns a tuple with the ActiveDeadlineSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetActiveDeadlineSecondsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.activeDeadlineSeconds) {
		return nil, false
	}
	return o.activeDeadlineSeconds, true
}

// HasActiveDeadlineSeconds returns a boolean if a field has been set.
func (o *CronTaskSpec) HasActiveDeadlineSeconds() bool {
	if o != nil && !utils.IsNil(o.activeDeadlineSeconds) {
		return true
	}

	return false
}

// SetActiveDeadlineSeconds gets a reference to the given int32 and assigns it to the activeDeadlineSeconds field.
// activeDeadlineSeconds:  The duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it 

func (o *CronTaskSpec) ActiveDeadlineSeconds(v int32) (*CronTaskSpec){
	o.activeDeadlineSeconds = &v
return o
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *CronTaskSpec) GetAnnotations() map[string]string {
	if o == nil || utils.IsNil(o.annotations) {
		var ret map[string]string
		return ret
	}
	return *o.annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.annotations) {
		return nil, false
	}
	return o.annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *CronTaskSpec) HasAnnotations() bool {
	if o != nil && !utils.IsNil(o.annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the annotations field.
// annotations:  Specify the annotations in the workload 

func (o *CronTaskSpec) Annotations(v map[string]string) (*CronTaskSpec){
	o.annotations = &v
return o
}

// GetBackoffLimit returns the BackoffLimit field value
func (o *CronTaskSpec) GetBackoffLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.backoffLimit
}

// GetBackoffLimitOk returns a tuple with the BackoffLimit field value
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetBackoffLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.backoffLimit, true
}

// BackoffLimit sets field value
func (o *CronTaskSpec) BackoffLimit(v int32) *CronTaskSpec {
	o.backoffLimit = v
    return o
}

// GetCmd returns the Cmd field value if set, zero value otherwise.
func (o *CronTaskSpec) GetCmd() []string {
	if o == nil || utils.IsNil(o.cmd) {
		var ret []string
		return ret
	}
	return o.cmd
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetCmdOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.cmd) {
		return nil, false
	}
	return o.cmd, true
}

// HasCmd returns a boolean if a field has been set.
func (o *CronTaskSpec) HasCmd() bool {
	if o != nil && !utils.IsNil(o.cmd) {
		return true
	}

	return false
}

// SetCmd gets a reference to the given []string and assigns it to the cmd field.
// cmd:  Commands to run in the container 

func (o *CronTaskSpec) Cmd(v []string) (*CronTaskSpec){
	o.cmd = v
return o
}

// GetConcurrencyPolicy returns the ConcurrencyPolicy field value
func (o *CronTaskSpec) GetConcurrencyPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.concurrencyPolicy
}

// GetConcurrencyPolicyOk returns a tuple with the ConcurrencyPolicy field value
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetConcurrencyPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.concurrencyPolicy, true
}

// ConcurrencyPolicy sets field value
func (o *CronTaskSpec) ConcurrencyPolicy(v string) *CronTaskSpec {
	o.concurrencyPolicy = v
    return o
}

// GetCount returns the Count field value
func (o *CronTaskSpec) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.count, true
}

// Count sets field value
func (o *CronTaskSpec) Count(v int32) *CronTaskSpec {
	o.count = v
    return o
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *CronTaskSpec) GetCpu() string {
	if o == nil || utils.IsNil(o.cpu) {
		var ret string
		return ret
	}
	return *o.cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetCpuOk() (*string, bool) {
	if o == nil || utils.IsNil(o.cpu) {
		return nil, false
	}
	return o.cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *CronTaskSpec) HasCpu() bool {
	if o != nil && !utils.IsNil(o.cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given string and assigns it to the cpu field.
// cpu:  Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core) 

func (o *CronTaskSpec) Cpu(v string) (*CronTaskSpec){
	o.cpu = &v
return o
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *CronTaskSpec) GetEnv() []Env {
	if o == nil || utils.IsNil(o.env) {
		var ret []Env
		return ret
	}
	return o.env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetEnvOk() ([]Env, bool) {
	if o == nil || utils.IsNil(o.env) {
		return nil, false
	}
	return o.env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *CronTaskSpec) HasEnv() bool {
	if o != nil && !utils.IsNil(o.env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []Env and assigns it to the env field.
// env:  Define arguments by using environment variables 

func (o *CronTaskSpec) Env(v []Env) (*CronTaskSpec){
	o.env = v
return o
}

// GetFailedJobsHistoryLimit returns the FailedJobsHistoryLimit field value
func (o *CronTaskSpec) GetFailedJobsHistoryLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.failedJobsHistoryLimit
}

// GetFailedJobsHistoryLimitOk returns a tuple with the FailedJobsHistoryLimit field value
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetFailedJobsHistoryLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.failedJobsHistoryLimit, true
}

// FailedJobsHistoryLimit sets field value
func (o *CronTaskSpec) FailedJobsHistoryLimit(v int32) *CronTaskSpec {
	o.failedJobsHistoryLimit = v
    return o
}

// GetHostAliases returns the HostAliases field value if set, zero value otherwise.
func (o *CronTaskSpec) GetHostAliases() []HostAliases {
	if o == nil || utils.IsNil(o.hostAliases) {
		var ret []HostAliases
		return ret
	}
	return o.hostAliases
}

// GetHostAliasesOk returns a tuple with the HostAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetHostAliasesOk() ([]HostAliases, bool) {
	if o == nil || utils.IsNil(o.hostAliases) {
		return nil, false
	}
	return o.hostAliases, true
}

// HasHostAliases returns a boolean if a field has been set.
func (o *CronTaskSpec) HasHostAliases() bool {
	if o != nil && !utils.IsNil(o.hostAliases) {
		return true
	}

	return false
}

// SetHostAliases gets a reference to the given []HostAliases and assigns it to the hostAliases field.
// hostAliases:  An optional list of hosts and IPs that will be injected into the pod's hosts file 

func (o *CronTaskSpec) HostAliases(v []HostAliases) (*CronTaskSpec){
	o.hostAliases = v
return o
}

// GetImage returns the Image field value
func (o *CronTaskSpec) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.image, true
}

// Image sets field value
func (o *CronTaskSpec) Image(v string) *CronTaskSpec {
	o.image = v
    return o
}

// GetImagePullPolicy returns the ImagePullPolicy field value if set, zero value otherwise.
func (o *CronTaskSpec) GetImagePullPolicy() string {
	if o == nil || utils.IsNil(o.imagePullPolicy) {
		var ret string
		return ret
	}
	return *o.imagePullPolicy
}

// GetImagePullPolicyOk returns a tuple with the ImagePullPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetImagePullPolicyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.imagePullPolicy) {
		return nil, false
	}
	return o.imagePullPolicy, true
}

// HasImagePullPolicy returns a boolean if a field has been set.
func (o *CronTaskSpec) HasImagePullPolicy() bool {
	if o != nil && !utils.IsNil(o.imagePullPolicy) {
		return true
	}

	return false
}

// SetImagePullPolicy gets a reference to the given string and assigns it to the imagePullPolicy field.
// imagePullPolicy:  Specify image pull policy for your service 

func (o *CronTaskSpec) ImagePullPolicy(v string) (*CronTaskSpec){
	o.imagePullPolicy = &v
return o
}

// GetImagePullSecrets returns the ImagePullSecrets field value if set, zero value otherwise.
func (o *CronTaskSpec) GetImagePullSecrets() []string {
	if o == nil || utils.IsNil(o.imagePullSecrets) {
		var ret []string
		return ret
	}
	return o.imagePullSecrets
}

// GetImagePullSecretsOk returns a tuple with the ImagePullSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetImagePullSecretsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.imagePullSecrets) {
		return nil, false
	}
	return o.imagePullSecrets, true
}

// HasImagePullSecrets returns a boolean if a field has been set.
func (o *CronTaskSpec) HasImagePullSecrets() bool {
	if o != nil && !utils.IsNil(o.imagePullSecrets) {
		return true
	}

	return false
}

// SetImagePullSecrets gets a reference to the given []string and assigns it to the imagePullSecrets field.
// imagePullSecrets:  Specify image pull secrets for your service 

func (o *CronTaskSpec) ImagePullSecrets(v []string) (*CronTaskSpec){
	o.imagePullSecrets = v
return o
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CronTaskSpec) GetLabels() map[string]string {
	if o == nil || utils.IsNil(o.labels) {
		var ret map[string]string
		return ret
	}
	return *o.labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.labels) {
		return nil, false
	}
	return o.labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CronTaskSpec) HasLabels() bool {
	if o != nil && !utils.IsNil(o.labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the labels field.
// labels:  Specify the labels in the workload 

func (o *CronTaskSpec) Labels(v map[string]string) (*CronTaskSpec){
	o.labels = &v
return o
}

// GetLivenessProbe returns the LivenessProbe field value if set, zero value otherwise.
func (o *CronTaskSpec) GetLivenessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.livenessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.livenessProbe
}

// GetLivenessProbeOk returns a tuple with the LivenessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetLivenessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.livenessProbe) {
		return nil, false
	}
	return o.livenessProbe, true
}

// HasLivenessProbe returns a boolean if a field has been set.
func (o *CronTaskSpec) HasLivenessProbe() bool {
	if o != nil && !utils.IsNil(o.livenessProbe) {
		return true
	}

	return false
}

// SetLivenessProbe gets a reference to the given HealthProbe and assigns it to the livenessProbe field.
// livenessProbe: 

func (o *CronTaskSpec) LivenessProbe(v HealthProbe) (*CronTaskSpec){
	o.livenessProbe = &v
return o
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *CronTaskSpec) GetMemory() string {
	if o == nil || utils.IsNil(o.memory) {
		var ret string
		return ret
	}
	return *o.memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetMemoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.memory) {
		return nil, false
	}
	return o.memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *CronTaskSpec) HasMemory() bool {
	if o != nil && !utils.IsNil(o.memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given string and assigns it to the memory field.
// memory:  Specifies the attributes of the memory resource required for the container. 

func (o *CronTaskSpec) Memory(v string) (*CronTaskSpec){
	o.memory = &v
return o
}

// GetReadinessProbe returns the ReadinessProbe field value if set, zero value otherwise.
func (o *CronTaskSpec) GetReadinessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.readinessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.readinessProbe
}

// GetReadinessProbeOk returns a tuple with the ReadinessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetReadinessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.readinessProbe) {
		return nil, false
	}
	return o.readinessProbe, true
}

// HasReadinessProbe returns a boolean if a field has been set.
func (o *CronTaskSpec) HasReadinessProbe() bool {
	if o != nil && !utils.IsNil(o.readinessProbe) {
		return true
	}

	return false
}

// SetReadinessProbe gets a reference to the given HealthProbe and assigns it to the readinessProbe field.
// readinessProbe: 

func (o *CronTaskSpec) ReadinessProbe(v HealthProbe) (*CronTaskSpec){
	o.readinessProbe = &v
return o
}

// GetRestart returns the Restart field value
func (o *CronTaskSpec) GetRestart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.restart
}

// GetRestartOk returns a tuple with the Restart field value
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetRestartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.restart, true
}

// Restart sets field value
func (o *CronTaskSpec) Restart(v string) *CronTaskSpec {
	o.restart = v
    return o
}

// GetSchedule returns the Schedule field value
func (o *CronTaskSpec) GetSchedule() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.schedule, true
}

// Schedule sets field value
func (o *CronTaskSpec) Schedule(v string) *CronTaskSpec {
	o.schedule = v
    return o
}

// GetStartingDeadlineSeconds returns the StartingDeadlineSeconds field value if set, zero value otherwise.
func (o *CronTaskSpec) GetStartingDeadlineSeconds() int32 {
	if o == nil || utils.IsNil(o.startingDeadlineSeconds) {
		var ret int32
		return ret
	}
	return *o.startingDeadlineSeconds
}

// GetStartingDeadlineSecondsOk returns a tuple with the StartingDeadlineSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetStartingDeadlineSecondsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.startingDeadlineSeconds) {
		return nil, false
	}
	return o.startingDeadlineSeconds, true
}

// HasStartingDeadlineSeconds returns a boolean if a field has been set.
func (o *CronTaskSpec) HasStartingDeadlineSeconds() bool {
	if o != nil && !utils.IsNil(o.startingDeadlineSeconds) {
		return true
	}

	return false
}

// SetStartingDeadlineSeconds gets a reference to the given int32 and assigns it to the startingDeadlineSeconds field.
// startingDeadlineSeconds:  Specify deadline in seconds for starting the job if it misses scheduled 

func (o *CronTaskSpec) StartingDeadlineSeconds(v int32) (*CronTaskSpec){
	o.startingDeadlineSeconds = &v
return o
}

// GetSuccessfulJobsHistoryLimit returns the SuccessfulJobsHistoryLimit field value
func (o *CronTaskSpec) GetSuccessfulJobsHistoryLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.successfulJobsHistoryLimit
}

// GetSuccessfulJobsHistoryLimitOk returns a tuple with the SuccessfulJobsHistoryLimit field value
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetSuccessfulJobsHistoryLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.successfulJobsHistoryLimit, true
}

// SuccessfulJobsHistoryLimit sets field value
func (o *CronTaskSpec) SuccessfulJobsHistoryLimit(v int32) *CronTaskSpec {
	o.successfulJobsHistoryLimit = v
    return o
}

// GetSuspend returns the Suspend field value
func (o *CronTaskSpec) GetSuspend() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.suspend
}

// GetSuspendOk returns a tuple with the Suspend field value
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetSuspendOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.suspend, true
}

// Suspend sets field value
func (o *CronTaskSpec) Suspend(v bool) *CronTaskSpec {
	o.suspend = v
    return o
}

// GetTtlSecondsAfterFinished returns the TtlSecondsAfterFinished field value if set, zero value otherwise.
func (o *CronTaskSpec) GetTtlSecondsAfterFinished() int32 {
	if o == nil || utils.IsNil(o.ttlSecondsAfterFinished) {
		var ret int32
		return ret
	}
	return *o.ttlSecondsAfterFinished
}

// GetTtlSecondsAfterFinishedOk returns a tuple with the TtlSecondsAfterFinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetTtlSecondsAfterFinishedOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ttlSecondsAfterFinished) {
		return nil, false
	}
	return o.ttlSecondsAfterFinished, true
}

// HasTtlSecondsAfterFinished returns a boolean if a field has been set.
func (o *CronTaskSpec) HasTtlSecondsAfterFinished() bool {
	if o != nil && !utils.IsNil(o.ttlSecondsAfterFinished) {
		return true
	}

	return false
}

// SetTtlSecondsAfterFinished gets a reference to the given int32 and assigns it to the ttlSecondsAfterFinished field.
// ttlSecondsAfterFinished:  Limits the lifetime of a Job that has finished 

func (o *CronTaskSpec) TtlSecondsAfterFinished(v int32) (*CronTaskSpec){
	o.ttlSecondsAfterFinished = &v
return o
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *CronTaskSpec) GetVolumes() []Volumes {
	if o == nil || utils.IsNil(o.volumes) {
		var ret []Volumes
		return ret
	}
	return o.volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronTaskSpec) GetVolumesOk() ([]Volumes, bool) {
	if o == nil || utils.IsNil(o.volumes) {
		return nil, false
	}
	return o.volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *CronTaskSpec) HasVolumes() bool {
	if o != nil && !utils.IsNil(o.volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []Volumes and assigns it to the volumes field.
// volumes:  Declare volumes and volumeMounts 

func (o *CronTaskSpec) Volumes(v []Volumes) (*CronTaskSpec){
	o.volumes = v
return o
}

func (o CronTaskSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CronTaskSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.activeDeadlineSeconds) {
		toSerialize["activeDeadlineSeconds"] = o.activeDeadlineSeconds
	}
	if !utils.IsNil(o.annotations) {
		toSerialize["annotations"] = o.annotations
	}
	toSerialize["backoffLimit"] = o.backoffLimit
	if !utils.IsNil(o.cmd) {
		toSerialize["cmd"] = o.cmd
	}
	toSerialize["concurrencyPolicy"] = o.concurrencyPolicy
	toSerialize["count"] = o.count
	if !utils.IsNil(o.cpu) {
		toSerialize["cpu"] = o.cpu
	}
	if !utils.IsNil(o.env) {
		toSerialize["env"] = o.env
	}
	toSerialize["failedJobsHistoryLimit"] = o.failedJobsHistoryLimit
	if !utils.IsNil(o.hostAliases) {
		toSerialize["hostAliases"] = o.hostAliases
	}
	toSerialize["image"] = o.image
	if !utils.IsNil(o.imagePullPolicy) {
		toSerialize["imagePullPolicy"] = o.imagePullPolicy
	}
	if !utils.IsNil(o.imagePullSecrets) {
		toSerialize["imagePullSecrets"] = o.imagePullSecrets
	}
	if !utils.IsNil(o.labels) {
		toSerialize["labels"] = o.labels
	}
	if !utils.IsNil(o.livenessProbe) {
		toSerialize["livenessProbe"] = o.livenessProbe
	}
	if !utils.IsNil(o.memory) {
		toSerialize["memory"] = o.memory
	}
	if !utils.IsNil(o.readinessProbe) {
		toSerialize["readinessProbe"] = o.readinessProbe
	}
	toSerialize["restart"] = o.restart
	toSerialize["schedule"] = o.schedule
	if !utils.IsNil(o.startingDeadlineSeconds) {
		toSerialize["startingDeadlineSeconds"] = o.startingDeadlineSeconds
	}
	toSerialize["successfulJobsHistoryLimit"] = o.successfulJobsHistoryLimit
	toSerialize["suspend"] = o.suspend
	if !utils.IsNil(o.ttlSecondsAfterFinished) {
		toSerialize["ttlSecondsAfterFinished"] = o.ttlSecondsAfterFinished
	}
	if !utils.IsNil(o.volumes) {
		toSerialize["volumes"] = o.volumes
	}
	return toSerialize, nil
}

type NullableCronTaskSpec struct {
	value *CronTaskSpec
	isSet bool
}

func (v NullableCronTaskSpec) Get() *CronTaskSpec {
	return v.value
}

func (v *NullableCronTaskSpec) Set(val *CronTaskSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCronTaskSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCronTaskSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCronTaskSpec(val *CronTaskSpec) *NullableCronTaskSpec {
	return &NullableCronTaskSpec{value: val, isSet: true}
}

func (v NullableCronTaskSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCronTaskSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
