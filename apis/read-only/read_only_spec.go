/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package read_only

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the ReadOnlySpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ReadOnlySpec{}

// ReadOnlySpec struct for ReadOnlySpec
type ReadOnlySpec struct {
	// Specify the list of rules to control read only strategy at resource level. The selected resource will be read-only to the current application. If the target resource does not exist, error will be raised.
	rules []PolicyRule `json:"rules,omitempty"`
}

// NewReadOnlySpec instantiates a new ReadOnlySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadOnlySpec() *ReadOnlySpec {
	this := ReadOnlySpec{}
	return &this
}

// NewReadOnlySpecWithDefaults instantiates a new ReadOnlySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadOnlySpecWithDefaults() *ReadOnlySpec {
	this := ReadOnlySpec{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *ReadOnlySpec) GetRules() []PolicyRule {
	if o == nil || utils.IsNil(o.rules) {
		var ret []PolicyRule
		return ret
	}
	return o.rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadOnlySpec) GetRulesOk() ([]PolicyRule, bool) {
	if o == nil || utils.IsNil(o.rules) {
		return nil, false
	}
	return o.rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *ReadOnlySpec) HasRules() bool {
	if o != nil && !utils.IsNil(o.rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []PolicyRule and assigns it to the rules field.
// rules:  Specify the list of rules to control read only strategy at resource level. The selected resource will be read-only to the current application. If the target resource does not exist, error will be raised. 

func (o *ReadOnlySpec) Rules(v []PolicyRule) (*ReadOnlySpec){
	o.rules = v
return o
}

func (o ReadOnlySpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReadOnlySpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.rules) {
		toSerialize["rules"] = o.rules
	}
	return toSerialize, nil
}

type NullableReadOnlySpec struct {
	value *ReadOnlySpec
	isSet bool
}

func (v NullableReadOnlySpec) Get() *ReadOnlySpec {
	return v.value
}

func (v *NullableReadOnlySpec) Set(val *ReadOnlySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableReadOnlySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableReadOnlySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadOnlySpec(val *ReadOnlySpec) *NullableReadOnlySpec {
	return &NullableReadOnlySpec{value: val, isSet: true}
}

func (v NullableReadOnlySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadOnlySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
