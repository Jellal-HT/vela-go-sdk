/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delete_config

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the DeleteConfigSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DeleteConfigSpec{}

// DeleteConfigSpec struct for DeleteConfigSpec
type DeleteConfigSpec struct {
	// Specify the name of the config.
	name string `json:"name"`
	// Specify the namespace of the config.
	namespace *string `json:"namespace,omitempty"`
}

// NewDeleteConfigSpec instantiates a new DeleteConfigSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteConfigSpec(name string) *DeleteConfigSpec {
	this := DeleteConfigSpec{}
	this.name = name
	return &this
}

// NewDeleteConfigSpecWithDefaults instantiates a new DeleteConfigSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteConfigSpecWithDefaults() *DeleteConfigSpec {
	this := DeleteConfigSpec{}
	return &this
}

// GetName returns the Name field value
func (o *DeleteConfigSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeleteConfigSpec) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.name, true
}

// Name sets field value
func (o *DeleteConfigSpec) Name(v string) *DeleteConfigSpec {
	o.name = v
    return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *DeleteConfigSpec) GetNamespace() string {
	if o == nil || utils.IsNil(o.namespace) {
		var ret string
		return ret
	}
	return *o.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteConfigSpec) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.namespace) {
		return nil, false
	}
	return o.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *DeleteConfigSpec) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the namespace of the config. 

func (o *DeleteConfigSpec) Namespace(v string) (*DeleteConfigSpec){
	o.namespace = &v
return o
}

func (o DeleteConfigSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteConfigSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.name
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	return toSerialize, nil
}

type NullableDeleteConfigSpec struct {
	value *DeleteConfigSpec
	isSet bool
}

func (v NullableDeleteConfigSpec) Get() *DeleteConfigSpec {
	return v.value
}

func (v *NullableDeleteConfigSpec) Set(val *DeleteConfigSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteConfigSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteConfigSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteConfigSpec(val *DeleteConfigSpec) *NullableDeleteConfigSpec {
	return &NullableDeleteConfigSpec{value: val, isSet: true}
}

func (v NullableDeleteConfigSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteConfigSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
