/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package topology

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the TopologySpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TopologySpec{}

// TopologySpec struct for TopologySpec
type TopologySpec struct {
	// Ignore empty cluster error
	allowEmpty *bool `json:"allowEmpty,omitempty"`
	// Specify the label selector for clusters
	clusterLabelSelector *map[string]string `json:"clusterLabelSelector,omitempty"`
	// Deprecated: Use clusterLabelSelector instead.
	clusterSelector *map[string]string `json:"clusterSelector,omitempty"`
	// Specify the names of the clusters to select.
	clusters []string `json:"clusters,omitempty"`
	// Specify the target namespace to deploy in the selected clusters, default inherit the original namespace.
	namespace *string `json:"namespace,omitempty"`
}

// NewTopologySpec instantiates a new TopologySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopologySpec() *TopologySpec {
	this := TopologySpec{}
	return &this
}

// NewTopologySpecWithDefaults instantiates a new TopologySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopologySpecWithDefaults() *TopologySpec {
	this := TopologySpec{}
	return &this
}

// GetAllowEmpty returns the AllowEmpty field value if set, zero value otherwise.
func (o *TopologySpec) GetAllowEmpty() bool {
	if o == nil || utils.IsNil(o.allowEmpty) {
		var ret bool
		return ret
	}
	return *o.allowEmpty
}

// GetAllowEmptyOk returns a tuple with the AllowEmpty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologySpec) GetAllowEmptyOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.allowEmpty) {
		return nil, false
	}
	return o.allowEmpty, true
}

// HasAllowEmpty returns a boolean if a field has been set.
func (o *TopologySpec) HasAllowEmpty() bool {
	if o != nil && !utils.IsNil(o.allowEmpty) {
		return true
	}

	return false
}

// SetAllowEmpty gets a reference to the given bool and assigns it to the allowEmpty field.
// allowEmpty:  Ignore empty cluster error 

func (o *TopologySpec) AllowEmpty(v bool) (*TopologySpec){
	o.allowEmpty = &v
return o
}

// GetClusterLabelSelector returns the ClusterLabelSelector field value if set, zero value otherwise.
func (o *TopologySpec) GetClusterLabelSelector() map[string]string {
	if o == nil || utils.IsNil(o.clusterLabelSelector) {
		var ret map[string]string
		return ret
	}
	return *o.clusterLabelSelector
}

// GetClusterLabelSelectorOk returns a tuple with the ClusterLabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologySpec) GetClusterLabelSelectorOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.clusterLabelSelector) {
		return nil, false
	}
	return o.clusterLabelSelector, true
}

// HasClusterLabelSelector returns a boolean if a field has been set.
func (o *TopologySpec) HasClusterLabelSelector() bool {
	if o != nil && !utils.IsNil(o.clusterLabelSelector) {
		return true
	}

	return false
}

// SetClusterLabelSelector gets a reference to the given map[string]string and assigns it to the clusterLabelSelector field.
// clusterLabelSelector:  Specify the label selector for clusters 

func (o *TopologySpec) ClusterLabelSelector(v map[string]string) (*TopologySpec){
	o.clusterLabelSelector = &v
return o
}

// GetClusterSelector returns the ClusterSelector field value if set, zero value otherwise.
func (o *TopologySpec) GetClusterSelector() map[string]string {
	if o == nil || utils.IsNil(o.clusterSelector) {
		var ret map[string]string
		return ret
	}
	return *o.clusterSelector
}

// GetClusterSelectorOk returns a tuple with the ClusterSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologySpec) GetClusterSelectorOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.clusterSelector) {
		return nil, false
	}
	return o.clusterSelector, true
}

// HasClusterSelector returns a boolean if a field has been set.
func (o *TopologySpec) HasClusterSelector() bool {
	if o != nil && !utils.IsNil(o.clusterSelector) {
		return true
	}

	return false
}

// SetClusterSelector gets a reference to the given map[string]string and assigns it to the clusterSelector field.
// clusterSelector:  Deprecated: Use clusterLabelSelector instead. 

func (o *TopologySpec) ClusterSelector(v map[string]string) (*TopologySpec){
	o.clusterSelector = &v
return o
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *TopologySpec) GetClusters() []string {
	if o == nil || utils.IsNil(o.clusters) {
		var ret []string
		return ret
	}
	return o.clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologySpec) GetClustersOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.clusters) {
		return nil, false
	}
	return o.clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *TopologySpec) HasClusters() bool {
	if o != nil && !utils.IsNil(o.clusters) {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []string and assigns it to the clusters field.
// clusters:  Specify the names of the clusters to select. 

func (o *TopologySpec) Clusters(v []string) (*TopologySpec){
	o.clusters = v
return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *TopologySpec) GetNamespace() string {
	if o == nil || utils.IsNil(o.namespace) {
		var ret string
		return ret
	}
	return *o.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologySpec) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.namespace) {
		return nil, false
	}
	return o.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *TopologySpec) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the target namespace to deploy in the selected clusters, default inherit the original namespace. 

func (o *TopologySpec) Namespace(v string) (*TopologySpec){
	o.namespace = &v
return o
}

func (o TopologySpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopologySpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.allowEmpty) {
		toSerialize["allowEmpty"] = o.allowEmpty
	}
	if !utils.IsNil(o.clusterLabelSelector) {
		toSerialize["clusterLabelSelector"] = o.clusterLabelSelector
	}
	if !utils.IsNil(o.clusterSelector) {
		toSerialize["clusterSelector"] = o.clusterSelector
	}
	if !utils.IsNil(o.clusters) {
		toSerialize["clusters"] = o.clusters
	}
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	return toSerialize, nil
}

type NullableTopologySpec struct {
	value *TopologySpec
	isSet bool
}

func (v NullableTopologySpec) Get() *TopologySpec {
	return v.value
}

func (v *NullableTopologySpec) Set(val *TopologySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTopologySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTopologySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopologySpec(val *TopologySpec) *NullableTopologySpec {
	return &NullableTopologySpec{value: val, isSet: true}
}

func (v NullableTopologySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopologySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
