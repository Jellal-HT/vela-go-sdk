/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deploy

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the DeploySpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DeploySpec{}

// DeploySpec struct for DeploySpec
type DeploySpec struct {
	// If set to false, the workflow will suspend automatically before this step, default to be true.
	auto bool `json:"auto"`
	// If set false, this step will apply the components with the terraform workload.
	ignoreTerraformComponent bool `json:"ignoreTerraformComponent"`
	// Maximum number of concurrent delivered components.
	parallelism int32 `json:"parallelism"`
	// Declare the policies that used for this deployment. If not specified, the components will be deployed to the hub cluster.
	policies []string `json:"policies,omitempty"`
}

// NewDeploySpec instantiates a new DeploySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploySpec(auto bool, ignoreTerraformComponent bool, parallelism int32) *DeploySpec {
	this := DeploySpec{}
	this.auto = auto
	this.ignoreTerraformComponent = ignoreTerraformComponent
	this.parallelism = parallelism
	return &this
}

// NewDeploySpecWithDefaults instantiates a new DeploySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploySpecWithDefaults() *DeploySpec {
	this := DeploySpec{}
	var auto bool = true
	this.auto = auto
	var ignoreTerraformComponent bool = true
	this.ignoreTerraformComponent = ignoreTerraformComponent
	var parallelism int32 = 5
	this.parallelism = parallelism
	return &this
}

// GetAuto returns the Auto field value
func (o *DeploySpec) GetAuto() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.auto
}

// GetAutoOk returns a tuple with the Auto field value
// and a boolean to check if the value has been set.
func (o *DeploySpec) GetAutoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.auto, true
}

// Auto sets field value
func (o *DeploySpec) Auto(v bool) *DeploySpec {
	o.auto = v
    return o
}

// GetIgnoreTerraformComponent returns the IgnoreTerraformComponent field value
func (o *DeploySpec) GetIgnoreTerraformComponent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ignoreTerraformComponent
}

// GetIgnoreTerraformComponentOk returns a tuple with the IgnoreTerraformComponent field value
// and a boolean to check if the value has been set.
func (o *DeploySpec) GetIgnoreTerraformComponentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ignoreTerraformComponent, true
}

// IgnoreTerraformComponent sets field value
func (o *DeploySpec) IgnoreTerraformComponent(v bool) *DeploySpec {
	o.ignoreTerraformComponent = v
    return o
}

// GetParallelism returns the Parallelism field value
func (o *DeploySpec) GetParallelism() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.parallelism
}

// GetParallelismOk returns a tuple with the Parallelism field value
// and a boolean to check if the value has been set.
func (o *DeploySpec) GetParallelismOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.parallelism, true
}

// Parallelism sets field value
func (o *DeploySpec) Parallelism(v int32) *DeploySpec {
	o.parallelism = v
    return o
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *DeploySpec) GetPolicies() []string {
	if o == nil || utils.IsNil(o.policies) {
		var ret []string
		return ret
	}
	return o.policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploySpec) GetPoliciesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.policies) {
		return nil, false
	}
	return o.policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *DeploySpec) HasPolicies() bool {
	if o != nil && !utils.IsNil(o.policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []string and assigns it to the policies field.
// policies:  Declare the policies that used for this deployment. If not specified, the components will be deployed to the hub cluster. 

func (o *DeploySpec) Policies(v []string) (*DeploySpec){
	o.policies = v
return o
}

func (o DeploySpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploySpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auto"] = o.auto
	toSerialize["ignoreTerraformComponent"] = o.ignoreTerraformComponent
	toSerialize["parallelism"] = o.parallelism
	if !utils.IsNil(o.policies) {
		toSerialize["policies"] = o.policies
	}
	return toSerialize, nil
}

type NullableDeploySpec struct {
	value *DeploySpec
	isSet bool
}

func (v NullableDeploySpec) Get() *DeploySpec {
	return v.value
}

func (v *NullableDeploySpec) Set(val *DeploySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploySpec(val *DeploySpec) *NullableDeploySpec {
	return &NullableDeploySpec{value: val, isSet: true}
}

func (v NullableDeploySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
const DeployType = "deploy"

type DeployWorkflowStep struct {
	Base       WorkflowStepBase
	Properties DeploySpec
}

func Deploy() *DeployWorkflowStep {
	d := &DeployWorkflowStep{Base: WorkflowStepBase{}}
	return d
}

func (d *DeployWorkflowStep) Build() common.WorkflowStep {
	res := common.WorkflowStep{
		Properties: util.Object2RawExtension(d.Properties),
		Type:       DeployType,
	}
	return res
}

func (d *DeployWorkflowStep) Props() *DeploySpec {
	return &d.Properties
}

