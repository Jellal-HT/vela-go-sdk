/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shared_resource

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1alpha1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"vela-go-sdk/api"
	"vela-go-sdk/apis/utils"
)

// checks if the SharedResourceSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &SharedResourceSpec{}

// SharedResourceSpec struct for SharedResourceSpec
type SharedResourceSpec struct {
	// Specify the list of rules to control shared-resource strategy at resource level. The selected resource will be sharable across applications. (That means multiple applications can all read it without conflict, but only the first one can write it)
	rules []SharedResourcePolicyRule `json:"rules,omitempty"`
}

// NewSharedResourceSpecWith instantiates a new SharedResourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedResourceSpecWith() *SharedResourceSpec {
	this := SharedResourceSpec{}
	return &this
}

// NewSharedResourceSpec instantiates a new SharedResourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedResourceSpec() *SharedResourceSpec {
	this := SharedResourceSpec{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *SharedResourcePolicy) GetRules() []SharedResourcePolicyRule {
	if o == nil || utils.IsNil(o.Properties.rules) {
		var ret []SharedResourcePolicyRule
		return ret
	}
	return o.Properties.rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedResourcePolicy) GetRulesOk() ([]SharedResourcePolicyRule, bool) {
	if o == nil || utils.IsNil(o.Properties.rules) {
		return nil, false
	}
	return o.Properties.rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *SharedResourcePolicy) HasRules() bool {
	if o != nil && !utils.IsNil(o.Properties.rules) {
		return true
	}

	return false
}

// Rules gets a reference to the given []SharedResourcePolicyRule and assigns it to the rules field.
// rules:  Specify the list of rules to control shared-resource strategy at resource level. The selected resource will be sharable across applications. (That means multiple applications can all read it without conflict, but only the first one can write it)
func (o *SharedResourcePolicy) Rules(v []SharedResourcePolicyRule) *SharedResourcePolicy {
	o.Properties.rules = v
	return o
}

func (o SharedResourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedResourceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.rules) {
		toSerialize["rules"] = o.rules
	}
	return toSerialize, nil
}

type NullableSharedResourceSpec struct {
	value *SharedResourceSpec
	isSet bool
}

func (v NullableSharedResourceSpec) Get() *SharedResourceSpec {
	return v.value
}

func (v *NullableSharedResourceSpec) Set(val *SharedResourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedResourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedResourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedResourceSpec(val *SharedResourceSpec) *NullableSharedResourceSpec {
	return &NullableSharedResourceSpec{value: val, isSet: true}
}

func (v NullableSharedResourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedResourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const SharedResourceType = "shared-resource"

type SharedResourcePolicy struct {
	Base       api.PolicyBase
	Properties SharedResourceSpec
}

func SharedResource() *SharedResourcePolicy {
	s := &SharedResourcePolicy{Base: api.PolicyBase{}}
	return s
}

func (s *SharedResourcePolicy) Build() v1alpha1.Policy {
	res := v1alpha1.Policy{
		Properties: util.Object2RawExtension(s.Properties),
		Type:       SharedResourceType,
	}
	return res
}

func (s *SharedResourcePolicy) Props() *SharedResourceSpec {
	return &s.Properties
}
