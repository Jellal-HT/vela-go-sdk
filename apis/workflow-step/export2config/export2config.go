/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export2config

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"vela-go-sdk/api"
	"vela-go-sdk/apis/utils"
)

// checks if the Export2configSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Export2configSpec{}

// Export2configSpec struct for Export2configSpec
type Export2configSpec struct {
	// Specify the cluster of the config map
	cluster string `json:"cluster"`
	// Specify the name of the config map
	configName string `json:"configName"`
	// Specify the data of config map
	data map[string]interface{} `json:"data"`
	// Specify the namespace of the config map
	namespace *string `json:"namespace,omitempty"`
}

// NewExport2configSpecWith instantiates a new Export2configSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExport2configSpecWith(cluster string, configName string, data map[string]interface{}) *Export2configSpec {
	this := Export2configSpec{}
	this.cluster = cluster
	this.configName = configName
	this.data = data
	return &this
}

// NewExport2configSpec instantiates a new Export2configSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExport2configSpec() *Export2configSpec {
	this := Export2configSpec{}
	var cluster string = ""
	this.cluster = cluster
	return &this
}

// GetCluster returns the Cluster field value
func (o *Export2configWorkflowStep) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *Export2configWorkflowStep) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.cluster, true
}

// Cluster sets field value
func (o *Export2configWorkflowStep) Cluster(v string) *Export2configWorkflowStep {
	o.Properties.cluster = v
	return o
}

// GetConfigName returns the ConfigName field value
func (o *Export2configWorkflowStep) GetConfigName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.configName
}

// GetConfigNameOk returns a tuple with the ConfigName field value
// and a boolean to check if the value has been set.
func (o *Export2configWorkflowStep) GetConfigNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.configName, true
}

// ConfigName sets field value
func (o *Export2configWorkflowStep) ConfigName(v string) *Export2configWorkflowStep {
	o.Properties.configName = v
	return o
}

// GetData returns the Data field value
func (o *Export2configWorkflowStep) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties.data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Export2configWorkflowStep) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Properties.data, true
}

// Data sets field value
func (o *Export2configWorkflowStep) Data(v map[string]interface{}) *Export2configSpec {
	o.Properties.data = v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Export2configWorkflowStep) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		var ret string
		return ret
	}
	return *o.Properties.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Export2configWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		return nil, false
	}
	return o.Properties.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Export2configWorkflowStep) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.namespace) {
		return true
	}

	return false
}

// Namespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the namespace of the config map
func (o *Export2configWorkflowStep) Namespace(v string) *Export2configWorkflowStep {
	o.Properties.namespace = &v
	return o
}

func (o Export2configSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Export2configSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster"] = o.cluster
	toSerialize["configName"] = o.configName
	toSerialize["data"] = o.data
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	return toSerialize, nil
}

type NullableExport2configSpec struct {
	value *Export2configSpec
	isSet bool
}

func (v NullableExport2configSpec) Get() *Export2configSpec {
	return v.value
}

func (v *NullableExport2configSpec) Set(val *Export2configSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableExport2configSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableExport2configSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExport2configSpec(val *Export2configSpec) *NullableExport2configSpec {
	return &NullableExport2configSpec{value: val, isSet: true}
}

func (v NullableExport2configSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExport2configSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const Export2configType = "export2config"

type Export2configWorkflowStep struct {
	Base       api.WorkflowStepBase
	Properties Export2configSpec
}

func Export2config() *Export2configWorkflowStep {
	e := &Export2configWorkflowStep{Base: api.WorkflowStepBase{}}
	return e
}

func (e *Export2configWorkflowStep) Build() common.WorkflowStep {
	res := common.WorkflowStep{
		Properties: util.Object2RawExtension(e.Properties),
		Type:       Export2configType,
	}
	return res
}

func (e *Export2configWorkflowStep) Props() *Export2configSpec {
	return &e.Properties
}
