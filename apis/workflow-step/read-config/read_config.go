/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package read_config

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"vela-go-sdk/api"
	"vela-go-sdk/apis/utils"
)

// checks if the ReadConfigSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ReadConfigSpec{}

// ReadConfigSpec struct for ReadConfigSpec
type ReadConfigSpec struct {
	// Specify the name of the config.
	name string `json:"name"`
	// Specify the namespace of the config.
	namespace *string `json:"namespace,omitempty"`
}

// NewReadConfigSpecWith instantiates a new ReadConfigSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadConfigSpecWith(name string) *ReadConfigSpec {
	this := ReadConfigSpec{}
	this.name = name
	return &this
}

// NewReadConfigSpec instantiates a new ReadConfigSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadConfigSpec() *ReadConfigSpec {
	this := ReadConfigSpec{}
	return &this
}

// GetName returns the Name field value
func (o *ReadConfigWorkflowStep) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReadConfigWorkflowStep) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.name, true
}

// Name sets field value
func (o *ReadConfigWorkflowStep) Name(v string) *ReadConfigWorkflowStep {
	o.Properties.name = v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ReadConfigWorkflowStep) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		var ret string
		return ret
	}
	return *o.Properties.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadConfigWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		return nil, false
	}
	return o.Properties.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ReadConfigWorkflowStep) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.namespace) {
		return true
	}

	return false
}

// Namespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the namespace of the config.
func (o *ReadConfigWorkflowStep) Namespace(v string) *ReadConfigWorkflowStep {
	o.Properties.namespace = &v
	return o
}

func (o ReadConfigSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReadConfigSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.name
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	return toSerialize, nil
}

type NullableReadConfigSpec struct {
	value *ReadConfigSpec
	isSet bool
}

func (v NullableReadConfigSpec) Get() *ReadConfigSpec {
	return v.value
}

func (v *NullableReadConfigSpec) Set(val *ReadConfigSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableReadConfigSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableReadConfigSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadConfigSpec(val *ReadConfigSpec) *NullableReadConfigSpec {
	return &NullableReadConfigSpec{value: val, isSet: true}
}

func (v NullableReadConfigSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadConfigSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const ReadConfigType = "read-config"

type ReadConfigWorkflowStep struct {
	Base       api.WorkflowStepBase
	Properties ReadConfigSpec
}

func ReadConfig() *ReadConfigWorkflowStep {
	r := &ReadConfigWorkflowStep{Base: api.WorkflowStepBase{}}
	return r
}

func (r *ReadConfigWorkflowStep) Build() common.WorkflowStep {
	res := common.WorkflowStep{
		Properties: util.Object2RawExtension(r.Properties),
		Type:       ReadConfigType,
	}
	return res
}

func (r *ReadConfigWorkflowStep) Props() *ReadConfigSpec {
	return &r.Properties
}
