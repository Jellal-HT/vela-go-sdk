/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export2secret

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"vela-go-sdk/api"
	"vela-go-sdk/apis/utils"
)

// checks if the Export2secretSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Export2secretSpec{}

// Export2secretSpec struct for Export2secretSpec
type Export2secretSpec struct {
	// Specify the cluster of the secret
	cluster string `json:"cluster"`
	// Specify the data of secret
	data           map[string]interface{} `json:"data"`
	dockerRegistry *DockerRegistry        `json:"dockerRegistry,omitempty"`
	// Specify the kind of the secret
	kind string `json:"kind"`
	// Specify the namespace of the secret
	namespace *string `json:"namespace,omitempty"`
	// Specify the name of the secret
	secretName string `json:"secretName"`
	// Specify the type of the secret
	type_ *string `json:"type,omitempty"`
}

// NewExport2secretSpecWith instantiates a new Export2secretSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExport2secretSpecWith(cluster string, data map[string]interface{}, kind string, secretName string) *Export2secretSpec {
	this := Export2secretSpec{}
	this.cluster = cluster
	this.data = data
	this.kind = kind
	this.secretName = secretName
	return &this
}

// NewExport2secretSpec instantiates a new Export2secretSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExport2secretSpec() *Export2secretSpec {
	this := Export2secretSpec{}
	var cluster string = ""
	this.cluster = cluster
	var kind string = "generic"
	this.kind = kind
	return &this
}

// GetCluster returns the Cluster field value
func (o *Export2secretWorkflowStep) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *Export2secretWorkflowStep) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.cluster, true
}

// Cluster sets field value
func (o *Export2secretWorkflowStep) Cluster(v string) *Export2secretWorkflowStep {
	o.Properties.cluster = v
	return o
}

// GetData returns the Data field value
func (o *Export2secretWorkflowStep) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties.data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Export2secretWorkflowStep) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Properties.data, true
}

// Data sets field value
func (o *Export2secretWorkflowStep) Data(v map[string]interface{}) *Export2secretWorkflowStep {
	o.Properties.data = v
	return o
}

// GetDockerRegistry returns the DockerRegistry field value if set, zero value otherwise.
func (o *Export2secretWorkflowStep) GetDockerRegistry() DockerRegistry {
	if o == nil || utils.IsNil(o.Properties.dockerRegistry) {
		var ret DockerRegistry
		return ret
	}
	return *o.Properties.dockerRegistry
}

// GetDockerRegistryOk returns a tuple with the DockerRegistry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Export2secretWorkflowStep) GetDockerRegistryOk() (*DockerRegistry, bool) {
	if o == nil || utils.IsNil(o.Properties.dockerRegistry) {
		return nil, false
	}
	return o.Properties.dockerRegistry, true
}

// HasDockerRegistry returns a boolean if a field has been set.
func (o *Export2secretWorkflowStep) HasDockerRegistry() bool {
	if o != nil && !utils.IsNil(o.Properties.dockerRegistry) {
		return true
	}

	return false
}

// DockerRegistry gets a reference to the given DockerRegistry and assigns it to the dockerRegistry field.
// dockerRegistry:
func (o *Export2secretWorkflowStep) DockerRegistry(v DockerRegistry) *Export2secretWorkflowStep {
	o.Properties.dockerRegistry = &v
	return o
}

// GetKind returns the Kind field value
func (o *Export2secretWorkflowStep) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *Export2secretWorkflowStep) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.kind, true
}

// Kind sets field value
func (o *Export2secretWorkflowStep) Kind(v string) *Export2secretWorkflowStep {
	o.Properties.kind = v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Export2secretWorkflowStep) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		var ret string
		return ret
	}
	return *o.Properties.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Export2secretWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		return nil, false
	}
	return o.Properties.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Export2secretWorkflowStep) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.namespace) {
		return true
	}

	return false
}

// Namespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the namespace of the secret
func (o *Export2secretWorkflowStep) Namespace(v string) *Export2secretWorkflowStep {
	o.Properties.namespace = &v
	return o
}

// GetSecretName returns the SecretName field value
func (o *Export2secretWorkflowStep) GetSecretName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.secretName
}

// GetSecretNameOk returns a tuple with the SecretName field value
// and a boolean to check if the value has been set.
func (o *Export2secretWorkflowStep) GetSecretNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.secretName, true
}

// SecretName sets field value
func (o *Export2secretWorkflowStep) SecretName(v string) *Export2secretWorkflowStep {
	o.Properties.secretName = v
	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Export2secretWorkflowStep) GetType() string {
	if o == nil || utils.IsNil(o.Properties.type_) {
		var ret string
		return ret
	}
	return *o.Properties.type_
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Export2secretWorkflowStep) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.type_) {
		return nil, false
	}
	return o.Properties.type_, true
}

// HasType returns a boolean if a field has been set.
func (o *Export2secretWorkflowStep) HasType() bool {
	if o != nil && !utils.IsNil(o.Properties.type_) {
		return true
	}

	return false
}

// Type gets a reference to the given string and assigns it to the type_ field.
// type_:  Specify the type of the secret
func (o *Export2secretWorkflowStep) Type(v string) *Export2secretWorkflowStep {
	o.Properties.type_ = &v
	return o
}

func (o Export2secretSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Export2secretSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster"] = o.cluster
	toSerialize["data"] = o.data
	if !utils.IsNil(o.dockerRegistry) {
		toSerialize["dockerRegistry"] = o.dockerRegistry
	}
	toSerialize["kind"] = o.kind
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	toSerialize["secretName"] = o.secretName
	if !utils.IsNil(o.type_) {
		toSerialize["type"] = o.type_
	}
	return toSerialize, nil
}

type NullableExport2secretSpec struct {
	value *Export2secretSpec
	isSet bool
}

func (v NullableExport2secretSpec) Get() *Export2secretSpec {
	return v.value
}

func (v *NullableExport2secretSpec) Set(val *Export2secretSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableExport2secretSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableExport2secretSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExport2secretSpec(val *Export2secretSpec) *NullableExport2secretSpec {
	return &NullableExport2secretSpec{value: val, isSet: true}
}

func (v NullableExport2secretSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExport2secretSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const Export2secretType = "export2secret"

type Export2secretWorkflowStep struct {
	Base       api.WorkflowStepBase
	Properties Export2secretSpec
}

func Export2secret() *Export2secretWorkflowStep {
	e := &Export2secretWorkflowStep{Base: api.WorkflowStepBase{}}
	return e
}

func (e *Export2secretWorkflowStep) Build() common.WorkflowStep {
	res := common.WorkflowStep{
		Properties: util.Object2RawExtension(e.Properties),
		Type:       Export2secretType,
	}
	return res
}

func (e *Export2secretWorkflowStep) Props() *Export2secretSpec {
	return &e.Properties
}
