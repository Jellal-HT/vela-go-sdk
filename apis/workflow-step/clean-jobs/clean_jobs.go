/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clean_jobs

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"vela-go-sdk/api"
	"vela-go-sdk/apis/utils"
)

// checks if the CleanJobsSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CleanJobsSpec{}

// CleanJobsSpec struct for CleanJobsSpec
type CleanJobsSpec struct {
	labelselector map[string]interface{} `json:"labelselector,omitempty"`
	namespace     string                 `json:"namespace"`
}

// NewCleanJobsSpecWith instantiates a new CleanJobsSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCleanJobsSpecWith(namespace string) *CleanJobsSpec {
	this := CleanJobsSpec{}
	this.namespace = namespace
	return &this
}

// NewCleanJobsSpec instantiates a new CleanJobsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCleanJobsSpec() *CleanJobsSpec {
	this := CleanJobsSpec{}
	return &this
}

// GetLabelselector returns the Labelselector field value if set, zero value otherwise.
func (o *CleanJobsWorkflowStep) GetLabelselector() map[string]interface{} {
	if o == nil || utils.IsNil(o.Properties.labelselector) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties.labelselector
}

// GetLabelselectorOk returns a tuple with the Labelselector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CleanJobsWorkflowStep) GetLabelselectorOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Properties.labelselector) {
		return map[string]interface{}{}, false
	}
	return o.Properties.labelselector, true
}

// HasLabelselector returns a boolean if a field has been set.
func (o *CleanJobsWorkflowStep) HasLabelselector() bool {
	if o != nil && !utils.IsNil(o.Properties.labelselector) {
		return true
	}

	return false
}

// Labelselector gets a reference to the given map[string]interface{} and assigns it to the labelselector field.
// labelselector:
func (o *CleanJobsWorkflowStep) Labelselector(v map[string]interface{}) *CleanJobsSpec {
	o.Properties.labelselector = v
	return o
}

// GetNamespace returns the Namespace field value
func (o *CleanJobsWorkflowStep) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *CleanJobsWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.namespace, true
}

// Namespace sets field value
func (o *CleanJobsWorkflowStep) Namespace(v string) *CleanJobsWorkflowStep {
	o.Properties.namespace = v
	return o
}

func (o CleanJobsSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CleanJobsSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.labelselector) {
		toSerialize["labelselector"] = o.labelselector
	}
	toSerialize["namespace"] = o.namespace
	return toSerialize, nil
}

type NullableCleanJobsSpec struct {
	value *CleanJobsSpec
	isSet bool
}

func (v NullableCleanJobsSpec) Get() *CleanJobsSpec {
	return v.value
}

func (v *NullableCleanJobsSpec) Set(val *CleanJobsSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCleanJobsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCleanJobsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCleanJobsSpec(val *CleanJobsSpec) *NullableCleanJobsSpec {
	return &NullableCleanJobsSpec{value: val, isSet: true}
}

func (v NullableCleanJobsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCleanJobsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const CleanJobsType = "clean-jobs"

type CleanJobsWorkflowStep struct {
	Base       api.WorkflowStepBase
	Properties CleanJobsSpec
}

func CleanJobs() *CleanJobsWorkflowStep {
	c := &CleanJobsWorkflowStep{Base: api.WorkflowStepBase{}}
	return c
}

func (c *CleanJobsWorkflowStep) Build() common.WorkflowStep {
	res := common.WorkflowStep{
		Properties: util.Object2RawExtension(c.Properties),
		Type:       CleanJobsType,
	}
	return res
}

func (c *CleanJobsWorkflowStep) Props() *CleanJobsSpec {
	return &c.Properties
}
