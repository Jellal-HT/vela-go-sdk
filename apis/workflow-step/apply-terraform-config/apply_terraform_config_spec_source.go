/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_terraform_config

import (
	"encoding/json"

	"fmt"
	"vela-go-sdk/apis/utils"
)

// ApplyTerraformConfigSpecSource - specify the source of the terraform configuration
type ApplyTerraformConfigSpecSource struct {
	ApplyTerraformConfigSpecSourceOneOf  *ApplyTerraformConfigSpecSourceOneOf
	ApplyTerraformConfigSpecSourceOneOf1 *ApplyTerraformConfigSpecSourceOneOf1
}

// ApplyTerraformConfigSpecSourceOneOfAsApplyTerraformConfigSpecSource is a convenience function that returns ApplyTerraformConfigSpecSourceOneOf wrapped in ApplyTerraformConfigSpecSource
func ApplyTerraformConfigSpecSourceOneOfAsApplyTerraformConfigSpecSource(v *ApplyTerraformConfigSpecSourceOneOf) ApplyTerraformConfigSpecSource {
	return ApplyTerraformConfigSpecSource{
		ApplyTerraformConfigSpecSourceOneOf: v,
	}
}

// ApplyTerraformConfigSpecSourceOneOf1AsApplyTerraformConfigSpecSource is a convenience function that returns ApplyTerraformConfigSpecSourceOneOf1 wrapped in ApplyTerraformConfigSpecSource
func ApplyTerraformConfigSpecSourceOneOf1AsApplyTerraformConfigSpecSource(v *ApplyTerraformConfigSpecSourceOneOf1) ApplyTerraformConfigSpecSource {
	return ApplyTerraformConfigSpecSource{
		ApplyTerraformConfigSpecSourceOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApplyTerraformConfigSpecSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApplyTerraformConfigSpecSourceOneOf
	err = utils.NewStrictDecoder(data).Decode(&dst.ApplyTerraformConfigSpecSourceOneOf)
	if err == nil {
		jsonApplyTerraformConfigSpecSourceOneOf, _ := json.Marshal(dst.ApplyTerraformConfigSpecSourceOneOf)
		if string(jsonApplyTerraformConfigSpecSourceOneOf) == "{}" { // empty struct
			dst.ApplyTerraformConfigSpecSourceOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ApplyTerraformConfigSpecSourceOneOf = nil
	}

	// try to unmarshal data into ApplyTerraformConfigSpecSourceOneOf1
	err = utils.NewStrictDecoder(data).Decode(&dst.ApplyTerraformConfigSpecSourceOneOf1)
	if err == nil {
		jsonApplyTerraformConfigSpecSourceOneOf1, _ := json.Marshal(dst.ApplyTerraformConfigSpecSourceOneOf1)
		if string(jsonApplyTerraformConfigSpecSourceOneOf1) == "{}" { // empty struct
			dst.ApplyTerraformConfigSpecSourceOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ApplyTerraformConfigSpecSourceOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApplyTerraformConfigSpecSourceOneOf = nil
		dst.ApplyTerraformConfigSpecSourceOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApplyTerraformConfigSpecSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApplyTerraformConfigSpecSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApplyTerraformConfigSpecSource) MarshalJSON() ([]byte, error) {
	if src.ApplyTerraformConfigSpecSourceOneOf != nil {
		return json.Marshal(&src.ApplyTerraformConfigSpecSourceOneOf)
	}

	if src.ApplyTerraformConfigSpecSourceOneOf1 != nil {
		return json.Marshal(&src.ApplyTerraformConfigSpecSourceOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApplyTerraformConfigSpecSource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ApplyTerraformConfigSpecSourceOneOf != nil {
		return obj.ApplyTerraformConfigSpecSourceOneOf
	}

	if obj.ApplyTerraformConfigSpecSourceOneOf1 != nil {
		return obj.ApplyTerraformConfigSpecSourceOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableApplyTerraformConfigSpecSource struct {
	value *ApplyTerraformConfigSpecSource
	isSet bool
}

func (v NullableApplyTerraformConfigSpecSource) Get() *ApplyTerraformConfigSpecSource {
	return v.value
}

func (v *NullableApplyTerraformConfigSpecSource) Set(val *ApplyTerraformConfigSpecSource) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyTerraformConfigSpecSource) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyTerraformConfigSpecSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyTerraformConfigSpecSource(val *ApplyTerraformConfigSpecSource) *NullableApplyTerraformConfigSpecSource {
	return &NullableApplyTerraformConfigSpecSource{value: val, isSet: true}
}

func (v NullableApplyTerraformConfigSpecSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyTerraformConfigSpecSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
