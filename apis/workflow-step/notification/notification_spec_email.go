/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"vela-go-sdk/apis/utils"
)

// checks if the NotificationSpecEmail type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NotificationSpecEmail{}

// NotificationSpecEmail Please fulfill its from, to and content if you want to send email
type NotificationSpecEmail struct {
	content NotificationSpecEmailContent `json:"content"`
	from    NotificationSpecEmailFrom    `json:"from"`
	// Specify the email address that you want to send to
	to []string `json:"to"`
}

// NotificationSpecEmailWith instantiates a new NotificationSpecEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NotificationSpecEmailWith(content NotificationSpecEmailContent, from NotificationSpecEmailFrom, to []string) *NotificationSpecEmail {
	this := NotificationSpecEmail{}
	this.content = content
	this.from = from
	this.to = to
	return &this
}

// NewNotificationSpecEmail instantiates a new NotificationSpecEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSpecEmail() *NotificationSpecEmail {
	this := NotificationSpecEmail{}
	return &this
}

// GetContent returns the Content field value
func (o *NotificationSpecEmail) GetContent() NotificationSpecEmailContent {
	if o == nil {
		var ret NotificationSpecEmailContent
		return ret
	}

	return o.content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *NotificationSpecEmail) GetContentOk() (*NotificationSpecEmailContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.content, true
}

// Content sets field value
func (o *NotificationSpecEmail) Content(v NotificationSpecEmailContent) *NotificationSpecEmail {
	o.content = v
	return o
}

// GetFrom returns the From field value
func (o *NotificationSpecEmail) GetFrom() NotificationSpecEmailFrom {
	if o == nil {
		var ret NotificationSpecEmailFrom
		return ret
	}

	return o.from
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *NotificationSpecEmail) GetFromOk() (*NotificationSpecEmailFrom, bool) {
	if o == nil {
		return nil, false
	}
	return &o.from, true
}

// From sets field value
func (o *NotificationSpecEmail) From(v NotificationSpecEmailFrom) *NotificationSpecEmail {
	o.from = v
	return o
}

// GetTo returns the To field value
func (o *NotificationSpecEmail) GetTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.to
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *NotificationSpecEmail) GetToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.to, true
}

// To sets field value
func (o *NotificationSpecEmail) To(v []string) *NotificationSpecEmail {
	o.to = v
	return o
}

func (o NotificationSpecEmail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSpecEmail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.content
	toSerialize["from"] = o.from
	toSerialize["to"] = o.to
	return toSerialize, nil
}

type NullableNotificationSpecEmail struct {
	value *NotificationSpecEmail
	isSet bool
}

func (v NullableNotificationSpecEmail) Get() *NotificationSpecEmail {
	return v.value
}

func (v *NullableNotificationSpecEmail) Set(val *NotificationSpecEmail) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSpecEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSpecEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSpecEmail(val *NotificationSpecEmail) *NullableNotificationSpecEmail {
	return &NullableNotificationSpecEmail{value: val, isSet: true}
}

func (v NullableNotificationSpecEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSpecEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
