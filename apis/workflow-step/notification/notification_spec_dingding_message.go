/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"vela-go-sdk/apis/utils"
)

// checks if the NotificationSpecDingdingMessage type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NotificationSpecDingdingMessage{}

// NotificationSpecDingdingMessage Specify the message that you want to sent, refer to [dingtalk messaging](https://developers.dingtalk.com/document/robots/custom-robot-access/title-72m-8ag-pqw)
type NotificationSpecDingdingMessage struct {
	actionCard NullableNotificationSpecDingdingMessageActionCard `json:"actionCard,omitempty"`
	at         NullableNotificationSpecDingdingMessageAt         `json:"at,omitempty"`
	feedCard   NullableNotificationSpecDingdingMessageFeedCard   `json:"feedCard,omitempty"`
	link       NullableNotificationSpecDingdingMessageLink       `json:"link,omitempty"`
	markdown   NullableNotificationSpecDingdingMessageMarkdown   `json:"markdown,omitempty"`
	// msgType can be text, link, mardown, actionCard, feedCard
	msgtype string                                      `json:"msgtype"`
	text    NullableNotificationSpecDingdingMessageText `json:"text,omitempty"`
}

// NotificationSpecDingdingMessageWith instantiates a new NotificationSpecDingdingMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NotificationSpecDingdingMessageWith(msgtype string) *NotificationSpecDingdingMessage {
	this := NotificationSpecDingdingMessage{}
	this.msgtype = msgtype
	return &this
}

// NewNotificationSpecDingdingMessage instantiates a new NotificationSpecDingdingMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSpecDingdingMessage() *NotificationSpecDingdingMessage {
	this := NotificationSpecDingdingMessage{}
	var msgtype string = "text"
	this.msgtype = msgtype
	return &this
}

// GetActionCard returns the ActionCard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSpecDingdingMessage) GetActionCard() NotificationSpecDingdingMessageActionCard {
	if o == nil || utils.IsNil(o.actionCard.Get()) {
		var ret NotificationSpecDingdingMessageActionCard
		return ret
	}
	return *o.actionCard.Get()
}

// GetActionCardOk returns a tuple with the ActionCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSpecDingdingMessage) GetActionCardOk() (*NotificationSpecDingdingMessageActionCard, bool) {
	if o == nil {
		return nil, false
	}
	return o.actionCard.Get(), o.actionCard.IsSet()
}

// HasActionCard returns a boolean if a field has been set.
func (o *NotificationSpecDingdingMessage) HasActionCard() bool {
	if o != nil && o.actionCard.IsSet() {
		return true
	}

	return false
}

// SetActionCard gets a reference to the given NullableNotificationSpecDingdingMessageActionCard and assigns it to the actionCard field.
// actionCard:

func (o *NotificationSpecDingdingMessage) ActionCard(v NotificationSpecDingdingMessageActionCard) *NotificationSpecDingdingMessage {
	o.actionCard.Set(&v)
	return o
}

// SetActionCardNil sets the value for ActionCard to be an explicit nil
func (o *NotificationSpecDingdingMessage) SetActionCardNil() {
	o.actionCard.Set(nil)
}

// UnsetActionCard ensures that no value is present for ActionCard, not even an explicit nil
func (o *NotificationSpecDingdingMessage) UnsetActionCard() {
	o.actionCard.Unset()
}

// GetAt returns the At field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSpecDingdingMessage) GetAt() NotificationSpecDingdingMessageAt {
	if o == nil || utils.IsNil(o.at.Get()) {
		var ret NotificationSpecDingdingMessageAt
		return ret
	}
	return *o.at.Get()
}

// GetAtOk returns a tuple with the At field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSpecDingdingMessage) GetAtOk() (*NotificationSpecDingdingMessageAt, bool) {
	if o == nil {
		return nil, false
	}
	return o.at.Get(), o.at.IsSet()
}

// HasAt returns a boolean if a field has been set.
func (o *NotificationSpecDingdingMessage) HasAt() bool {
	if o != nil && o.at.IsSet() {
		return true
	}

	return false
}

// SetAt gets a reference to the given NullableNotificationSpecDingdingMessageAt and assigns it to the at field.
// at:

func (o *NotificationSpecDingdingMessage) At(v NotificationSpecDingdingMessageAt) *NotificationSpecDingdingMessage {
	o.at.Set(&v)
	return o
}

// SetAtNil sets the value for At to be an explicit nil
func (o *NotificationSpecDingdingMessage) SetAtNil() {
	o.at.Set(nil)
}

// UnsetAt ensures that no value is present for At, not even an explicit nil
func (o *NotificationSpecDingdingMessage) UnsetAt() {
	o.at.Unset()
}

// GetFeedCard returns the FeedCard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSpecDingdingMessage) GetFeedCard() NotificationSpecDingdingMessageFeedCard {
	if o == nil || utils.IsNil(o.feedCard.Get()) {
		var ret NotificationSpecDingdingMessageFeedCard
		return ret
	}
	return *o.feedCard.Get()
}

// GetFeedCardOk returns a tuple with the FeedCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSpecDingdingMessage) GetFeedCardOk() (*NotificationSpecDingdingMessageFeedCard, bool) {
	if o == nil {
		return nil, false
	}
	return o.feedCard.Get(), o.feedCard.IsSet()
}

// HasFeedCard returns a boolean if a field has been set.
func (o *NotificationSpecDingdingMessage) HasFeedCard() bool {
	if o != nil && o.feedCard.IsSet() {
		return true
	}

	return false
}

// SetFeedCard gets a reference to the given NullableNotificationSpecDingdingMessageFeedCard and assigns it to the feedCard field.
// feedCard:

func (o *NotificationSpecDingdingMessage) FeedCard(v NotificationSpecDingdingMessageFeedCard) *NotificationSpecDingdingMessage {
	o.feedCard.Set(&v)
	return o
}

// SetFeedCardNil sets the value for FeedCard to be an explicit nil
func (o *NotificationSpecDingdingMessage) SetFeedCardNil() {
	o.feedCard.Set(nil)
}

// UnsetFeedCard ensures that no value is present for FeedCard, not even an explicit nil
func (o *NotificationSpecDingdingMessage) UnsetFeedCard() {
	o.feedCard.Unset()
}

// GetLink returns the Link field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSpecDingdingMessage) GetLink() NotificationSpecDingdingMessageLink {
	if o == nil || utils.IsNil(o.link.Get()) {
		var ret NotificationSpecDingdingMessageLink
		return ret
	}
	return *o.link.Get()
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSpecDingdingMessage) GetLinkOk() (*NotificationSpecDingdingMessageLink, bool) {
	if o == nil {
		return nil, false
	}
	return o.link.Get(), o.link.IsSet()
}

// HasLink returns a boolean if a field has been set.
func (o *NotificationSpecDingdingMessage) HasLink() bool {
	if o != nil && o.link.IsSet() {
		return true
	}

	return false
}

// SetLink gets a reference to the given NullableNotificationSpecDingdingMessageLink and assigns it to the link field.
// link:

func (o *NotificationSpecDingdingMessage) Link(v NotificationSpecDingdingMessageLink) *NotificationSpecDingdingMessage {
	o.link.Set(&v)
	return o
}

// SetLinkNil sets the value for Link to be an explicit nil
func (o *NotificationSpecDingdingMessage) SetLinkNil() {
	o.link.Set(nil)
}

// UnsetLink ensures that no value is present for Link, not even an explicit nil
func (o *NotificationSpecDingdingMessage) UnsetLink() {
	o.link.Unset()
}

// GetMarkdown returns the Markdown field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSpecDingdingMessage) GetMarkdown() NotificationSpecDingdingMessageMarkdown {
	if o == nil || utils.IsNil(o.markdown.Get()) {
		var ret NotificationSpecDingdingMessageMarkdown
		return ret
	}
	return *o.markdown.Get()
}

// GetMarkdownOk returns a tuple with the Markdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSpecDingdingMessage) GetMarkdownOk() (*NotificationSpecDingdingMessageMarkdown, bool) {
	if o == nil {
		return nil, false
	}
	return o.markdown.Get(), o.markdown.IsSet()
}

// HasMarkdown returns a boolean if a field has been set.
func (o *NotificationSpecDingdingMessage) HasMarkdown() bool {
	if o != nil && o.markdown.IsSet() {
		return true
	}

	return false
}

// SetMarkdown gets a reference to the given NullableNotificationSpecDingdingMessageMarkdown and assigns it to the markdown field.
// markdown:

func (o *NotificationSpecDingdingMessage) Markdown(v NotificationSpecDingdingMessageMarkdown) *NotificationSpecDingdingMessage {
	o.markdown.Set(&v)
	return o
}

// SetMarkdownNil sets the value for Markdown to be an explicit nil
func (o *NotificationSpecDingdingMessage) SetMarkdownNil() {
	o.markdown.Set(nil)
}

// UnsetMarkdown ensures that no value is present for Markdown, not even an explicit nil
func (o *NotificationSpecDingdingMessage) UnsetMarkdown() {
	o.markdown.Unset()
}

// GetMsgtype returns the Msgtype field value
func (o *NotificationSpecDingdingMessage) GetMsgtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.msgtype
}

// GetMsgtypeOk returns a tuple with the Msgtype field value
// and a boolean to check if the value has been set.
func (o *NotificationSpecDingdingMessage) GetMsgtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.msgtype, true
}

// Msgtype sets field value
func (o *NotificationSpecDingdingMessage) Msgtype(v string) *NotificationSpecDingdingMessage {
	o.msgtype = v
	return o
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSpecDingdingMessage) GetText() NotificationSpecDingdingMessageText {
	if o == nil || utils.IsNil(o.text.Get()) {
		var ret NotificationSpecDingdingMessageText
		return ret
	}
	return *o.text.Get()
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSpecDingdingMessage) GetTextOk() (*NotificationSpecDingdingMessageText, bool) {
	if o == nil {
		return nil, false
	}
	return o.text.Get(), o.text.IsSet()
}

// HasText returns a boolean if a field has been set.
func (o *NotificationSpecDingdingMessage) HasText() bool {
	if o != nil && o.text.IsSet() {
		return true
	}

	return false
}

// SetText gets a reference to the given NullableNotificationSpecDingdingMessageText and assigns it to the text field.
// text:

func (o *NotificationSpecDingdingMessage) Text(v NotificationSpecDingdingMessageText) *NotificationSpecDingdingMessage {
	o.text.Set(&v)
	return o
}

// SetTextNil sets the value for Text to be an explicit nil
func (o *NotificationSpecDingdingMessage) SetTextNil() {
	o.text.Set(nil)
}

// UnsetText ensures that no value is present for Text, not even an explicit nil
func (o *NotificationSpecDingdingMessage) UnsetText() {
	o.text.Unset()
}

func (o NotificationSpecDingdingMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSpecDingdingMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.actionCard.IsSet() {
		toSerialize["actionCard"] = o.actionCard.Get()
	}
	if o.at.IsSet() {
		toSerialize["at"] = o.at.Get()
	}
	if o.feedCard.IsSet() {
		toSerialize["feedCard"] = o.feedCard.Get()
	}
	if o.link.IsSet() {
		toSerialize["link"] = o.link.Get()
	}
	if o.markdown.IsSet() {
		toSerialize["markdown"] = o.markdown.Get()
	}
	toSerialize["msgtype"] = o.msgtype
	if o.text.IsSet() {
		toSerialize["text"] = o.text.Get()
	}
	return toSerialize, nil
}

type NullableNotificationSpecDingdingMessage struct {
	value *NotificationSpecDingdingMessage
	isSet bool
}

func (v NullableNotificationSpecDingdingMessage) Get() *NotificationSpecDingdingMessage {
	return v.value
}

func (v *NullableNotificationSpecDingdingMessage) Set(val *NotificationSpecDingdingMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSpecDingdingMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSpecDingdingMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSpecDingdingMessage(val *NotificationSpecDingdingMessage) *NullableNotificationSpecDingdingMessage {
	return &NullableNotificationSpecDingdingMessage{value: val, isSet: true}
}

func (v NullableNotificationSpecDingdingMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSpecDingdingMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
