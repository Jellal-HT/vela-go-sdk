/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"vela-go-sdk/apis/utils"
)

// checks if the NotificationSpecSlackMessage type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NotificationSpecSlackMessage{}

// NotificationSpecSlackMessage Specify the message that you want to sent, refer to [slack messaging](https://api.slack.com/reference/messaging/payload)
type NotificationSpecSlackMessage struct {
	attachments NullableNotificationSpecSlackMessageAttachments `json:"attachments,omitempty"`
	blocks      NullableString                                  `json:"blocks,omitempty"`
	// Specify the message text format in markdown for slack notification
	mrkdwn *bool `json:"mrkdwn,omitempty"`
	// Specify the message text for slack notification
	text     string  `json:"text"`
	threadTs *string `json:"thread_ts,omitempty"`
}

// NotificationSpecSlackMessageWith instantiates a new NotificationSpecSlackMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NotificationSpecSlackMessageWith(text string) *NotificationSpecSlackMessage {
	this := NotificationSpecSlackMessage{}
	var mrkdwn bool = true
	this.mrkdwn = &mrkdwn
	this.text = text
	return &this
}

// NewNotificationSpecSlackMessage instantiates a new NotificationSpecSlackMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSpecSlackMessage() *NotificationSpecSlackMessage {
	this := NotificationSpecSlackMessage{}
	var mrkdwn bool = true
	this.mrkdwn = &mrkdwn
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSpecSlackMessage) GetAttachments() NotificationSpecSlackMessageAttachments {
	if o == nil || utils.IsNil(o.attachments.Get()) {
		var ret NotificationSpecSlackMessageAttachments
		return ret
	}
	return *o.attachments.Get()
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSpecSlackMessage) GetAttachmentsOk() (*NotificationSpecSlackMessageAttachments, bool) {
	if o == nil {
		return nil, false
	}
	return o.attachments.Get(), o.attachments.IsSet()
}

// HasAttachments returns a boolean if a field has been set.
func (o *NotificationSpecSlackMessage) HasAttachments() bool {
	if o != nil && o.attachments.IsSet() {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given NullableNotificationSpecSlackMessageAttachments and assigns it to the attachments field.
// attachments:

func (o *NotificationSpecSlackMessage) Attachments(v NotificationSpecSlackMessageAttachments) *NotificationSpecSlackMessage {
	o.attachments.Set(&v)
	return o
}

// SetAttachmentsNil sets the value for Attachments to be an explicit nil
func (o *NotificationSpecSlackMessage) SetAttachmentsNil() {
	o.attachments.Set(nil)
}

// UnsetAttachments ensures that no value is present for Attachments, not even an explicit nil
func (o *NotificationSpecSlackMessage) UnsetAttachments() {
	o.attachments.Unset()
}

// GetBlocks returns the Blocks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSpecSlackMessage) GetBlocks() string {
	if o == nil || utils.IsNil(o.blocks.Get()) {
		var ret string
		return ret
	}
	return *o.blocks.Get()
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSpecSlackMessage) GetBlocksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.blocks.Get(), o.blocks.IsSet()
}

// HasBlocks returns a boolean if a field has been set.
func (o *NotificationSpecSlackMessage) HasBlocks() bool {
	if o != nil && o.blocks.IsSet() {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given NullableString and assigns it to the blocks field.
// blocks:

func (o *NotificationSpecSlackMessage) Blocks(v string) *NotificationSpecSlackMessage {
	o.blocks.Set(&v)
	return o
}

// SetBlocksNil sets the value for Blocks to be an explicit nil
func (o *NotificationSpecSlackMessage) SetBlocksNil() {
	o.blocks.Set(nil)
}

// UnsetBlocks ensures that no value is present for Blocks, not even an explicit nil
func (o *NotificationSpecSlackMessage) UnsetBlocks() {
	o.blocks.Unset()
}

// GetMrkdwn returns the Mrkdwn field value if set, zero value otherwise.
func (o *NotificationSpecSlackMessage) GetMrkdwn() bool {
	if o == nil || utils.IsNil(o.mrkdwn) {
		var ret bool
		return ret
	}
	return *o.mrkdwn
}

// GetMrkdwnOk returns a tuple with the Mrkdwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSpecSlackMessage) GetMrkdwnOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.mrkdwn) {
		return nil, false
	}
	return o.mrkdwn, true
}

// HasMrkdwn returns a boolean if a field has been set.
func (o *NotificationSpecSlackMessage) HasMrkdwn() bool {
	if o != nil && !utils.IsNil(o.mrkdwn) {
		return true
	}

	return false
}

// SetMrkdwn gets a reference to the given bool and assigns it to the mrkdwn field.
// mrkdwn:  Specify the message text format in markdown for slack notification

func (o *NotificationSpecSlackMessage) Mrkdwn(v bool) *NotificationSpecSlackMessage {
	o.mrkdwn = &v
	return o
}

// GetText returns the Text field value
func (o *NotificationSpecSlackMessage) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *NotificationSpecSlackMessage) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.text, true
}

// Text sets field value
func (o *NotificationSpecSlackMessage) Text(v string) *NotificationSpecSlackMessage {
	o.text = v
	return o
}

// GetThreadTs returns the ThreadTs field value if set, zero value otherwise.
func (o *NotificationSpecSlackMessage) GetThreadTs() string {
	if o == nil || utils.IsNil(o.threadTs) {
		var ret string
		return ret
	}
	return *o.threadTs
}

// GetThreadTsOk returns a tuple with the ThreadTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSpecSlackMessage) GetThreadTsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.threadTs) {
		return nil, false
	}
	return o.threadTs, true
}

// HasThreadTs returns a boolean if a field has been set.
func (o *NotificationSpecSlackMessage) HasThreadTs() bool {
	if o != nil && !utils.IsNil(o.threadTs) {
		return true
	}

	return false
}

// SetThreadTs gets a reference to the given string and assigns it to the threadTs field.
// threadTs:

func (o *NotificationSpecSlackMessage) ThreadTs(v string) *NotificationSpecSlackMessage {
	o.threadTs = &v
	return o
}

func (o NotificationSpecSlackMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSpecSlackMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.attachments.IsSet() {
		toSerialize["attachments"] = o.attachments.Get()
	}
	if o.blocks.IsSet() {
		toSerialize["blocks"] = o.blocks.Get()
	}
	if !utils.IsNil(o.mrkdwn) {
		toSerialize["mrkdwn"] = o.mrkdwn
	}
	toSerialize["text"] = o.text
	if !utils.IsNil(o.threadTs) {
		toSerialize["thread_ts"] = o.threadTs
	}
	return toSerialize, nil
}

type NullableNotificationSpecSlackMessage struct {
	value *NotificationSpecSlackMessage
	isSet bool
}

func (v NullableNotificationSpecSlackMessage) Get() *NotificationSpecSlackMessage {
	return v.value
}

func (v *NullableNotificationSpecSlackMessage) Set(val *NotificationSpecSlackMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSpecSlackMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSpecSlackMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSpecSlackMessage(val *NotificationSpecSlackMessage) *NullableNotificationSpecSlackMessage {
	return &NullableNotificationSpecSlackMessage{value: val, isSet: true}
}

func (v NullableNotificationSpecSlackMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSpecSlackMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
