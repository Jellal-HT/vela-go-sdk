/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"fmt"
	"vela-go-sdk/apis/utils"
)

// NotificationSpecSlackUrl - Specify the the slack url, you can either sepcify it in value or use secretRef
type NotificationSpecSlackUrl struct {
	NotificationSpecDingdingUrlOneOf  *NotificationSpecDingdingUrlOneOf
	NotificationSpecDingdingUrlOneOf1 *NotificationSpecDingdingUrlOneOf1
}

// NotificationSpecDingdingUrlOneOfAsNotificationSpecSlackUrl is a convenience function that returns NotificationSpecDingdingUrlOneOf wrapped in NotificationSpecSlackUrl
func NotificationSpecDingdingUrlOneOfAsNotificationSpecSlackUrl(v *NotificationSpecDingdingUrlOneOf) NotificationSpecSlackUrl {
	return NotificationSpecSlackUrl{
		NotificationSpecDingdingUrlOneOf: v,
	}
}

// NotificationSpecDingdingUrlOneOf1AsNotificationSpecSlackUrl is a convenience function that returns NotificationSpecDingdingUrlOneOf1 wrapped in NotificationSpecSlackUrl
func NotificationSpecDingdingUrlOneOf1AsNotificationSpecSlackUrl(v *NotificationSpecDingdingUrlOneOf1) NotificationSpecSlackUrl {
	return NotificationSpecSlackUrl{
		NotificationSpecDingdingUrlOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *NotificationSpecSlackUrl) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NotificationSpecDingdingUrlOneOf
	err = utils.NewStrictDecoder(data).Decode(&dst.NotificationSpecDingdingUrlOneOf)
	if err == nil {
		jsonNotificationSpecDingdingUrlOneOf, _ := json.Marshal(dst.NotificationSpecDingdingUrlOneOf)
		if string(jsonNotificationSpecDingdingUrlOneOf) == "{}" { // empty struct
			dst.NotificationSpecDingdingUrlOneOf = nil
		} else {
			match++
		}
	} else {
		dst.NotificationSpecDingdingUrlOneOf = nil
	}

	// try to unmarshal data into NotificationSpecDingdingUrlOneOf1
	err = utils.NewStrictDecoder(data).Decode(&dst.NotificationSpecDingdingUrlOneOf1)
	if err == nil {
		jsonNotificationSpecDingdingUrlOneOf1, _ := json.Marshal(dst.NotificationSpecDingdingUrlOneOf1)
		if string(jsonNotificationSpecDingdingUrlOneOf1) == "{}" { // empty struct
			dst.NotificationSpecDingdingUrlOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.NotificationSpecDingdingUrlOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NotificationSpecDingdingUrlOneOf = nil
		dst.NotificationSpecDingdingUrlOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NotificationSpecSlackUrl)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NotificationSpecSlackUrl)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NotificationSpecSlackUrl) MarshalJSON() ([]byte, error) {
	if src.NotificationSpecDingdingUrlOneOf != nil {
		return json.Marshal(&src.NotificationSpecDingdingUrlOneOf)
	}

	if src.NotificationSpecDingdingUrlOneOf1 != nil {
		return json.Marshal(&src.NotificationSpecDingdingUrlOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NotificationSpecSlackUrl) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.NotificationSpecDingdingUrlOneOf != nil {
		return obj.NotificationSpecDingdingUrlOneOf
	}

	if obj.NotificationSpecDingdingUrlOneOf1 != nil {
		return obj.NotificationSpecDingdingUrlOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableNotificationSpecSlackUrl struct {
	value *NotificationSpecSlackUrl
	isSet bool
}

func (v NullableNotificationSpecSlackUrl) Get() *NotificationSpecSlackUrl {
	return v.value
}

func (v *NullableNotificationSpecSlackUrl) Set(val *NotificationSpecSlackUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSpecSlackUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSpecSlackUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSpecSlackUrl(val *NotificationSpecSlackUrl) *NullableNotificationSpecSlackUrl {
	return &NullableNotificationSpecSlackUrl{value: val, isSet: true}
}

func (v NullableNotificationSpecSlackUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSpecSlackUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
