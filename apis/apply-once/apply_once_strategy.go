/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_once

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the ApplyOnceStrategy type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApplyOnceStrategy{}

// ApplyOnceStrategy struct for ApplyOnceStrategy
type ApplyOnceStrategy struct {
	// When the strategy takes effect,e.g. onUpdate、onStateKeep
	affect *string `json:"affect,omitempty"`
	// Specify the path of the resource that allow configuration drift
	path []string `json:"path"`
}

// NewApplyOnceStrategy instantiates a new ApplyOnceStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyOnceStrategy(path []string) *ApplyOnceStrategy {
	this := ApplyOnceStrategy{}
	this.path = path
	return &this
}

// NewApplyOnceStrategyWithDefaults instantiates a new ApplyOnceStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyOnceStrategyWithDefaults() *ApplyOnceStrategy {
	this := ApplyOnceStrategy{}
	return &this
}

// GetAffect returns the Affect field value if set, zero value otherwise.
func (o *ApplyOnceStrategy) GetAffect() string {
	if o == nil || utils.IsNil(o.affect) {
		var ret string
		return ret
	}
	return *o.affect
}

// GetAffectOk returns a tuple with the Affect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyOnceStrategy) GetAffectOk() (*string, bool) {
	if o == nil || utils.IsNil(o.affect) {
		return nil, false
	}
	return o.affect, true
}

// HasAffect returns a boolean if a field has been set.
func (o *ApplyOnceStrategy) HasAffect() bool {
	if o != nil && !utils.IsNil(o.affect) {
		return true
	}

	return false
}

// SetAffect gets a reference to the given string and assigns it to the affect field.
// affect:  When the strategy takes effect,e.g. onUpdate、onStateKeep 

func (o *ApplyOnceStrategy) Affect(v string) (*ApplyOnceStrategy){
	o.affect = &v
return o
}

// GetPath returns the Path field value
func (o *ApplyOnceStrategy) GetPath() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ApplyOnceStrategy) GetPathOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.path, true
}

// Path sets field value
func (o *ApplyOnceStrategy) Path(v []string) *ApplyOnceStrategy {
	o.path = v
    return o
}

func (o ApplyOnceStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyOnceStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.affect) {
		toSerialize["affect"] = o.affect
	}
	toSerialize["path"] = o.path
	return toSerialize, nil
}

type NullableApplyOnceStrategy struct {
	value *ApplyOnceStrategy
	isSet bool
}

func (v NullableApplyOnceStrategy) Get() *ApplyOnceStrategy {
	return v.value
}

func (v *NullableApplyOnceStrategy) Set(val *ApplyOnceStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyOnceStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyOnceStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyOnceStrategy(val *ApplyOnceStrategy) *NullableApplyOnceStrategy {
	return &NullableApplyOnceStrategy{value: val, isSet: true}
}

func (v NullableApplyOnceStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyOnceStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
