/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affinity

import (
	"encoding/json"

	"vela-go-sdk/apis/utils"
)

// checks if the AffinitySpecTolerations type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AffinitySpecTolerations{}

// AffinitySpecTolerations struct for AffinitySpecTolerations
type AffinitySpecTolerations struct {
	effect   *string `json:"effect,omitempty"`
	key      *string `json:"key,omitempty"`
	operator string  `json:"operator"`
	// Specify the period of time the toleration
	tolerationSeconds *int32  `json:"tolerationSeconds,omitempty"`
	value             *string `json:"value,omitempty"`
}

// NewAffinitySpecTolerationsWith instantiates a new AffinitySpecTolerations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAffinitySpecTolerationsWith(operator string) *AffinitySpecTolerations {
	this := AffinitySpecTolerations{}
	this.operator = operator
	return &this
}

// NewAffinitySpecTolerations instantiates a new AffinitySpecTolerations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAffinitySpecTolerations() *AffinitySpecTolerations {
	this := AffinitySpecTolerations{}
	var operator string = "Equal"
	this.operator = operator
	return &this
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *AffinitySpecTolerations) GetEffect() string {
	if o == nil || utils.IsNil(o.effect) {
		var ret string
		return ret
	}
	return *o.effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffinitySpecTolerations) GetEffectOk() (*string, bool) {
	if o == nil || utils.IsNil(o.effect) {
		return nil, false
	}
	return o.effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *AffinitySpecTolerations) HasEffect() bool {
	if o != nil && !utils.IsNil(o.effect) {
		return true
	}

	return false
}

// Effect gets a reference to the given string and assigns it to the effect field.
// effect:
func (o *AffinitySpecTolerations) Effect(v string) *AffinitySpecTolerations {
	o.effect = &v
	return o
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AffinitySpecTolerations) GetKey() string {
	if o == nil || utils.IsNil(o.key) {
		var ret string
		return ret
	}
	return *o.key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffinitySpecTolerations) GetKeyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.key) {
		return nil, false
	}
	return o.key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AffinitySpecTolerations) HasKey() bool {
	if o != nil && !utils.IsNil(o.key) {
		return true
	}

	return false
}

// Key gets a reference to the given string and assigns it to the key field.
// key:
func (o *AffinitySpecTolerations) Key(v string) *AffinitySpecTolerations {
	o.key = &v
	return o
}

// GetOperator returns the Operator field value
func (o *AffinitySpecTolerations) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *AffinitySpecTolerations) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.operator, true
}

// Operator sets field value
func (o *AffinitySpecTolerations) Operator(v string) *AffinitySpecTolerations {
	o.operator = v
	return o
}

// GetTolerationSeconds returns the TolerationSeconds field value if set, zero value otherwise.
func (o *AffinitySpecTolerations) GetTolerationSeconds() int32 {
	if o == nil || utils.IsNil(o.tolerationSeconds) {
		var ret int32
		return ret
	}
	return *o.tolerationSeconds
}

// GetTolerationSecondsOk returns a tuple with the TolerationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffinitySpecTolerations) GetTolerationSecondsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.tolerationSeconds) {
		return nil, false
	}
	return o.tolerationSeconds, true
}

// HasTolerationSeconds returns a boolean if a field has been set.
func (o *AffinitySpecTolerations) HasTolerationSeconds() bool {
	if o != nil && !utils.IsNil(o.tolerationSeconds) {
		return true
	}

	return false
}

// TolerationSeconds gets a reference to the given int32 and assigns it to the tolerationSeconds field.
// tolerationSeconds:  Specify the period of time the toleration
func (o *AffinitySpecTolerations) TolerationSeconds(v int32) *AffinitySpecTolerations {
	o.tolerationSeconds = &v
	return o
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AffinitySpecTolerations) GetValue() string {
	if o == nil || utils.IsNil(o.value) {
		var ret string
		return ret
	}
	return *o.value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffinitySpecTolerations) GetValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.value) {
		return nil, false
	}
	return o.value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AffinitySpecTolerations) HasValue() bool {
	if o != nil && !utils.IsNil(o.value) {
		return true
	}

	return false
}

// Value gets a reference to the given string and assigns it to the value field.
// value:
func (o *AffinitySpecTolerations) Value(v string) *AffinitySpecTolerations {
	o.value = &v
	return o
}

func (o AffinitySpecTolerations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AffinitySpecTolerations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.effect) {
		toSerialize["effect"] = o.effect
	}
	if !utils.IsNil(o.key) {
		toSerialize["key"] = o.key
	}
	toSerialize["operator"] = o.operator
	if !utils.IsNil(o.tolerationSeconds) {
		toSerialize["tolerationSeconds"] = o.tolerationSeconds
	}
	if !utils.IsNil(o.value) {
		toSerialize["value"] = o.value
	}
	return toSerialize, nil
}

type NullableAffinitySpecTolerations struct {
	value *AffinitySpecTolerations
	isSet bool
}

func (v NullableAffinitySpecTolerations) Get() *AffinitySpecTolerations {
	return v.value
}

func (v *NullableAffinitySpecTolerations) Set(val *AffinitySpecTolerations) {
	v.value = val
	v.isSet = true
}

func (v NullableAffinitySpecTolerations) IsSet() bool {
	return v.isSet
}

func (v *NullableAffinitySpecTolerations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAffinitySpecTolerations(val *AffinitySpecTolerations) *NullableAffinitySpecTolerations {
	return &NullableAffinitySpecTolerations{value: val, isSet: true}
}

func (v NullableAffinitySpecTolerations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAffinitySpecTolerations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
