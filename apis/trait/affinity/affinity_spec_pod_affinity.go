/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affinity

import (
	"encoding/json"

	"vela-go-sdk/apis/utils"
)

// checks if the AffinitySpecPodAffinity type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AffinitySpecPodAffinity{}

// AffinitySpecPodAffinity Specify the pod affinity scheduling rules
type AffinitySpecPodAffinity struct {
	// Specify the preferred during scheduling ignored during execution
	preferred []AffinitySpecPodAffinityPreferred `json:"preferred,omitempty"`
	// Specify the required during scheduling ignored during execution
	required []PodAffinityTerm `json:"required,omitempty"`
}

// NewAffinitySpecPodAffinityWith instantiates a new AffinitySpecPodAffinity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAffinitySpecPodAffinityWith() *AffinitySpecPodAffinity {
	this := AffinitySpecPodAffinity{}
	return &this
}

// NewAffinitySpecPodAffinity instantiates a new AffinitySpecPodAffinity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAffinitySpecPodAffinity() *AffinitySpecPodAffinity {
	this := AffinitySpecPodAffinity{}
	return &this
}

// GetPreferred returns the Preferred field value if set, zero value otherwise.
func (o *AffinitySpecPodAffinity) GetPreferred() []AffinitySpecPodAffinityPreferred {
	if o == nil || utils.IsNil(o.preferred) {
		var ret []AffinitySpecPodAffinityPreferred
		return ret
	}
	return o.preferred
}

// GetPreferredOk returns a tuple with the Preferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffinitySpecPodAffinity) GetPreferredOk() ([]AffinitySpecPodAffinityPreferred, bool) {
	if o == nil || utils.IsNil(o.preferred) {
		return nil, false
	}
	return o.preferred, true
}

// HasPreferred returns a boolean if a field has been set.
func (o *AffinitySpecPodAffinity) HasPreferred() bool {
	if o != nil && !utils.IsNil(o.preferred) {
		return true
	}

	return false
}

// Preferred gets a reference to the given []AffinitySpecPodAffinityPreferred and assigns it to the preferred field.
// preferred:  Specify the preferred during scheduling ignored during execution
func (o *AffinitySpecPodAffinity) Preferred(v []AffinitySpecPodAffinityPreferred) *AffinitySpecPodAffinity {
	o.preferred = v
	return o
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *AffinitySpecPodAffinity) GetRequired() []PodAffinityTerm {
	if o == nil || utils.IsNil(o.required) {
		var ret []PodAffinityTerm
		return ret
	}
	return o.required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffinitySpecPodAffinity) GetRequiredOk() ([]PodAffinityTerm, bool) {
	if o == nil || utils.IsNil(o.required) {
		return nil, false
	}
	return o.required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *AffinitySpecPodAffinity) HasRequired() bool {
	if o != nil && !utils.IsNil(o.required) {
		return true
	}

	return false
}

// Required gets a reference to the given []PodAffinityTerm and assigns it to the required field.
// required:  Specify the required during scheduling ignored during execution
func (o *AffinitySpecPodAffinity) Required(v []PodAffinityTerm) *AffinitySpecPodAffinity {
	o.required = v
	return o
}

func (o AffinitySpecPodAffinity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AffinitySpecPodAffinity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.preferred) {
		toSerialize["preferred"] = o.preferred
	}
	if !utils.IsNil(o.required) {
		toSerialize["required"] = o.required
	}
	return toSerialize, nil
}

type NullableAffinitySpecPodAffinity struct {
	value *AffinitySpecPodAffinity
	isSet bool
}

func (v NullableAffinitySpecPodAffinity) Get() *AffinitySpecPodAffinity {
	return v.value
}

func (v *NullableAffinitySpecPodAffinity) Set(val *AffinitySpecPodAffinity) {
	v.value = val
	v.isSet = true
}

func (v NullableAffinitySpecPodAffinity) IsSet() bool {
	return v.isSet
}

func (v *NullableAffinitySpecPodAffinity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAffinitySpecPodAffinity(val *AffinitySpecPodAffinity) *NullableAffinitySpecPodAffinity {
	return &NullableAffinitySpecPodAffinity{value: val, isSet: true}
}

func (v NullableAffinitySpecPodAffinity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAffinitySpecPodAffinity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
