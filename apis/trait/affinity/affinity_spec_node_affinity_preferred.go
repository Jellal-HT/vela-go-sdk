/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affinity

import (
	"encoding/json"

	"vela-go-sdk/apis/utils"
)

// checks if the AffinitySpecNodeAffinityPreferred type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AffinitySpecNodeAffinityPreferred{}

// AffinitySpecNodeAffinityPreferred struct for AffinitySpecNodeAffinityPreferred
type AffinitySpecNodeAffinityPreferred struct {
	preference NodeSelectorTerm `json:"preference"`
	// Specify weight associated with matching the corresponding nodeSelector
	weight int32 `json:"weight"`
}

// NewAffinitySpecNodeAffinityPreferredWith instantiates a new AffinitySpecNodeAffinityPreferred object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAffinitySpecNodeAffinityPreferredWith(preference NodeSelectorTerm, weight int32) *AffinitySpecNodeAffinityPreferred {
	this := AffinitySpecNodeAffinityPreferred{}
	this.preference = preference
	this.weight = weight
	return &this
}

// NewAffinitySpecNodeAffinityPreferred instantiates a new AffinitySpecNodeAffinityPreferred object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAffinitySpecNodeAffinityPreferred() *AffinitySpecNodeAffinityPreferred {
	this := AffinitySpecNodeAffinityPreferred{}
	return &this
}

// GetPreference returns the Preference field value
func (o *AffinitySpecNodeAffinityPreferred) GetPreference() NodeSelectorTerm {
	if o == nil {
		var ret NodeSelectorTerm
		return ret
	}

	return o.preference
}

// GetPreferenceOk returns a tuple with the Preference field value
// and a boolean to check if the value has been set.
func (o *AffinitySpecNodeAffinityPreferred) GetPreferenceOk() (*NodeSelectorTerm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.preference, true
}

// Preference sets field value
func (o *AffinitySpecNodeAffinityPreferred) Preference(v NodeSelectorTerm) *AffinitySpecNodeAffinityPreferred {
	o.preference = v
	return o
}

// GetWeight returns the Weight field value
func (o *AffinitySpecNodeAffinityPreferred) GetWeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *AffinitySpecNodeAffinityPreferred) GetWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.weight, true
}

// Weight sets field value
func (o *AffinitySpecNodeAffinityPreferred) Weight(v int32) *AffinitySpecNodeAffinityPreferred {
	o.weight = v
	return o
}

func (o AffinitySpecNodeAffinityPreferred) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AffinitySpecNodeAffinityPreferred) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["preference"] = o.preference
	toSerialize["weight"] = o.weight
	return toSerialize, nil
}

type NullableAffinitySpecNodeAffinityPreferred struct {
	value *AffinitySpecNodeAffinityPreferred
	isSet bool
}

func (v NullableAffinitySpecNodeAffinityPreferred) Get() *AffinitySpecNodeAffinityPreferred {
	return v.value
}

func (v *NullableAffinitySpecNodeAffinityPreferred) Set(val *AffinitySpecNodeAffinityPreferred) {
	v.value = val
	v.isSet = true
}

func (v NullableAffinitySpecNodeAffinityPreferred) IsSet() bool {
	return v.isSet
}

func (v *NullableAffinitySpecNodeAffinityPreferred) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAffinitySpecNodeAffinityPreferred(val *AffinitySpecNodeAffinityPreferred) *NullableAffinitySpecNodeAffinityPreferred {
	return &NullableAffinitySpecNodeAffinityPreferred{value: val, isSet: true}
}

func (v NullableAffinitySpecNodeAffinityPreferred) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAffinitySpecNodeAffinityPreferred) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
