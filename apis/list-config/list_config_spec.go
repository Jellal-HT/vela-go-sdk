/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package list_config

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the ListConfigSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ListConfigSpec{}

// ListConfigSpec struct for ListConfigSpec
type ListConfigSpec struct {
	// Specify the namespace of the config.
	namespace *string `json:"namespace,omitempty"`
	// Specify the template of the config.
	template string `json:"template"`
}

// NewListConfigSpec instantiates a new ListConfigSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListConfigSpec(template string) *ListConfigSpec {
	this := ListConfigSpec{}
	this.template = template
	return &this
}

// NewListConfigSpecWithDefaults instantiates a new ListConfigSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListConfigSpecWithDefaults() *ListConfigSpec {
	this := ListConfigSpec{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ListConfigSpec) GetNamespace() string {
	if o == nil || utils.IsNil(o.namespace) {
		var ret string
		return ret
	}
	return *o.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListConfigSpec) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.namespace) {
		return nil, false
	}
	return o.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ListConfigSpec) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the namespace of the config. 

func (o *ListConfigSpec) Namespace(v string) (*ListConfigSpec){
	o.namespace = &v
return o
}

// GetTemplate returns the Template field value
func (o *ListConfigSpec) GetTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *ListConfigSpec) GetTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.template, true
}

// Template sets field value
func (o *ListConfigSpec) Template(v string) *ListConfigSpec {
	o.template = v
    return o
}

func (o ListConfigSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListConfigSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	toSerialize["template"] = o.template
	return toSerialize, nil
}

type NullableListConfigSpec struct {
	value *ListConfigSpec
	isSet bool
}

func (v NullableListConfigSpec) Get() *ListConfigSpec {
	return v.value
}

func (v *NullableListConfigSpec) Set(val *ListConfigSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableListConfigSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableListConfigSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListConfigSpec(val *ListConfigSpec) *NullableListConfigSpec {
	return &NullableListConfigSpec{value: val, isSet: true}
}

func (v NullableListConfigSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListConfigSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
