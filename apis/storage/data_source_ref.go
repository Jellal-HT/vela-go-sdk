/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the DataSourceRef type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DataSourceRef{}

// DataSourceRef struct for DataSourceRef
type DataSourceRef struct {
	apiGroup string `json:"apiGroup"`
	kind string `json:"kind"`
	name string `json:"name"`
}

// NewDataSourceRef instantiates a new DataSourceRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourceRef(apiGroup string, kind string, name string) *DataSourceRef {
	this := DataSourceRef{}
	this.apiGroup = apiGroup
	this.kind = kind
	this.name = name
	return &this
}

// NewDataSourceRefWithDefaults instantiates a new DataSourceRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceRefWithDefaults() *DataSourceRef {
	this := DataSourceRef{}
	return &this
}

// GetApiGroup returns the ApiGroup field value
func (o *DataSourceRef) GetApiGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.apiGroup
}

// GetApiGroupOk returns a tuple with the ApiGroup field value
// and a boolean to check if the value has been set.
func (o *DataSourceRef) GetApiGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.apiGroup, true
}

// ApiGroup sets field value
func (o *DataSourceRef) ApiGroup(v string) *DataSourceRef {
	o.apiGroup = v
    return o
}

// GetKind returns the Kind field value
func (o *DataSourceRef) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *DataSourceRef) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.kind, true
}

// Kind sets field value
func (o *DataSourceRef) Kind(v string) *DataSourceRef {
	o.kind = v
    return o
}

// GetName returns the Name field value
func (o *DataSourceRef) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataSourceRef) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.name, true
}

// Name sets field value
func (o *DataSourceRef) Name(v string) *DataSourceRef {
	o.name = v
    return o
}

func (o DataSourceRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSourceRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiGroup"] = o.apiGroup
	toSerialize["kind"] = o.kind
	toSerialize["name"] = o.name
	return toSerialize, nil
}

type NullableDataSourceRef struct {
	value *DataSourceRef
	isSet bool
}

func (v NullableDataSourceRef) Get() *DataSourceRef {
	return v.value
}

func (v *NullableDataSourceRef) Set(val *DataSourceRef) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceRef) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceRef(val *DataSourceRef) *NullableDataSourceRef {
	return &NullableDataSourceRef{value: val, isSet: true}
}

func (v NullableDataSourceRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
