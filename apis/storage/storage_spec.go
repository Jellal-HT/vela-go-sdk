/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the StorageSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &StorageSpec{}

// StorageSpec struct for StorageSpec
type StorageSpec struct {
	// Declare config map type storage
	configMap []ConfigMap `json:"configMap,omitempty"`
	// Declare empty dir type storage
	emptyDir []EmptyDir `json:"emptyDir,omitempty"`
	// Declare host path type storage
	hostPath []HostPath `json:"hostPath,omitempty"`
	// Declare pvc type storage
	pvc []Pvc `json:"pvc,omitempty"`
	// Declare secret type storage
	secret []Secret `json:"secret,omitempty"`
}

// NewStorageSpec instantiates a new StorageSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSpec() *StorageSpec {
	this := StorageSpec{}
	return &this
}

// NewStorageSpecWithDefaults instantiates a new StorageSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSpecWithDefaults() *StorageSpec {
	this := StorageSpec{}
	return &this
}

// GetConfigMap returns the ConfigMap field value if set, zero value otherwise.
func (o *StorageSpec) GetConfigMap() []ConfigMap {
	if o == nil || utils.IsNil(o.configMap) {
		var ret []ConfigMap
		return ret
	}
	return o.configMap
}

// GetConfigMapOk returns a tuple with the ConfigMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSpec) GetConfigMapOk() ([]ConfigMap, bool) {
	if o == nil || utils.IsNil(o.configMap) {
		return nil, false
	}
	return o.configMap, true
}

// HasConfigMap returns a boolean if a field has been set.
func (o *StorageSpec) HasConfigMap() bool {
	if o != nil && !utils.IsNil(o.configMap) {
		return true
	}

	return false
}

// SetConfigMap gets a reference to the given []ConfigMap and assigns it to the configMap field.
// configMap:  Declare config map type storage 

func (o *StorageSpec) ConfigMap(v []ConfigMap) (*StorageSpec){
	o.configMap = v
return o
}

// GetEmptyDir returns the EmptyDir field value if set, zero value otherwise.
func (o *StorageSpec) GetEmptyDir() []EmptyDir {
	if o == nil || utils.IsNil(o.emptyDir) {
		var ret []EmptyDir
		return ret
	}
	return o.emptyDir
}

// GetEmptyDirOk returns a tuple with the EmptyDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSpec) GetEmptyDirOk() ([]EmptyDir, bool) {
	if o == nil || utils.IsNil(o.emptyDir) {
		return nil, false
	}
	return o.emptyDir, true
}

// HasEmptyDir returns a boolean if a field has been set.
func (o *StorageSpec) HasEmptyDir() bool {
	if o != nil && !utils.IsNil(o.emptyDir) {
		return true
	}

	return false
}

// SetEmptyDir gets a reference to the given []EmptyDir and assigns it to the emptyDir field.
// emptyDir:  Declare empty dir type storage 

func (o *StorageSpec) EmptyDir(v []EmptyDir) (*StorageSpec){
	o.emptyDir = v
return o
}

// GetHostPath returns the HostPath field value if set, zero value otherwise.
func (o *StorageSpec) GetHostPath() []HostPath {
	if o == nil || utils.IsNil(o.hostPath) {
		var ret []HostPath
		return ret
	}
	return o.hostPath
}

// GetHostPathOk returns a tuple with the HostPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSpec) GetHostPathOk() ([]HostPath, bool) {
	if o == nil || utils.IsNil(o.hostPath) {
		return nil, false
	}
	return o.hostPath, true
}

// HasHostPath returns a boolean if a field has been set.
func (o *StorageSpec) HasHostPath() bool {
	if o != nil && !utils.IsNil(o.hostPath) {
		return true
	}

	return false
}

// SetHostPath gets a reference to the given []HostPath and assigns it to the hostPath field.
// hostPath:  Declare host path type storage 

func (o *StorageSpec) HostPath(v []HostPath) (*StorageSpec){
	o.hostPath = v
return o
}

// GetPvc returns the Pvc field value if set, zero value otherwise.
func (o *StorageSpec) GetPvc() []Pvc {
	if o == nil || utils.IsNil(o.pvc) {
		var ret []Pvc
		return ret
	}
	return o.pvc
}

// GetPvcOk returns a tuple with the Pvc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSpec) GetPvcOk() ([]Pvc, bool) {
	if o == nil || utils.IsNil(o.pvc) {
		return nil, false
	}
	return o.pvc, true
}

// HasPvc returns a boolean if a field has been set.
func (o *StorageSpec) HasPvc() bool {
	if o != nil && !utils.IsNil(o.pvc) {
		return true
	}

	return false
}

// SetPvc gets a reference to the given []Pvc and assigns it to the pvc field.
// pvc:  Declare pvc type storage 

func (o *StorageSpec) Pvc(v []Pvc) (*StorageSpec){
	o.pvc = v
return o
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *StorageSpec) GetSecret() []Secret {
	if o == nil || utils.IsNil(o.secret) {
		var ret []Secret
		return ret
	}
	return o.secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSpec) GetSecretOk() ([]Secret, bool) {
	if o == nil || utils.IsNil(o.secret) {
		return nil, false
	}
	return o.secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *StorageSpec) HasSecret() bool {
	if o != nil && !utils.IsNil(o.secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given []Secret and assigns it to the secret field.
// secret:  Declare secret type storage 

func (o *StorageSpec) Secret(v []Secret) (*StorageSpec){
	o.secret = v
return o
}

func (o StorageSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.configMap) {
		toSerialize["configMap"] = o.configMap
	}
	if !utils.IsNil(o.emptyDir) {
		toSerialize["emptyDir"] = o.emptyDir
	}
	if !utils.IsNil(o.hostPath) {
		toSerialize["hostPath"] = o.hostPath
	}
	if !utils.IsNil(o.pvc) {
		toSerialize["pvc"] = o.pvc
	}
	if !utils.IsNil(o.secret) {
		toSerialize["secret"] = o.secret
	}
	return toSerialize, nil
}

type NullableStorageSpec struct {
	value *StorageSpec
	isSet bool
}

func (v NullableStorageSpec) Get() *StorageSpec {
	return v.value
}

func (v *NullableStorageSpec) Set(val *StorageSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSpec(val *StorageSpec) *NullableStorageSpec {
	return &NullableStorageSpec{value: val, isSet: true}
}

func (v NullableStorageSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
