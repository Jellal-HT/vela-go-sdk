/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the MountToEnv1 type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MountToEnv1{}

// MountToEnv1 struct for MountToEnv1
type MountToEnv1 struct {
	envName string `json:"envName"`
	secretKey string `json:"secretKey"`
}

// NewMountToEnv1 instantiates a new MountToEnv1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountToEnv1(envName string, secretKey string) *MountToEnv1 {
	this := MountToEnv1{}
	this.envName = envName
	this.secretKey = secretKey
	return &this
}

// NewMountToEnv1WithDefaults instantiates a new MountToEnv1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountToEnv1WithDefaults() *MountToEnv1 {
	this := MountToEnv1{}
	return &this
}

// GetEnvName returns the EnvName field value
func (o *MountToEnv1) GetEnvName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.envName
}

// GetEnvNameOk returns a tuple with the EnvName field value
// and a boolean to check if the value has been set.
func (o *MountToEnv1) GetEnvNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.envName, true
}

// EnvName sets field value
func (o *MountToEnv1) EnvName(v string) *MountToEnv1 {
	o.envName = v
    return o
}

// GetSecretKey returns the SecretKey field value
func (o *MountToEnv1) GetSecretKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.secretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value
// and a boolean to check if the value has been set.
func (o *MountToEnv1) GetSecretKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.secretKey, true
}

// SecretKey sets field value
func (o *MountToEnv1) SecretKey(v string) *MountToEnv1 {
	o.secretKey = v
    return o
}

func (o MountToEnv1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MountToEnv1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["envName"] = o.envName
	toSerialize["secretKey"] = o.secretKey
	return toSerialize, nil
}

type NullableMountToEnv1 struct {
	value *MountToEnv1
	isSet bool
}

func (v NullableMountToEnv1) Get() *MountToEnv1 {
	return v.value
}

func (v *NullableMountToEnv1) Set(val *MountToEnv1) {
	v.value = val
	v.isSet = true
}

func (v NullableMountToEnv1) IsSet() bool {
	return v.isSet
}

func (v *NullableMountToEnv1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountToEnv1(val *MountToEnv1) *NullableMountToEnv1 {
	return &NullableMountToEnv1{value: val, isSet: true}
}

func (v NullableMountToEnv1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountToEnv1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
