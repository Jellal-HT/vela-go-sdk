/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package topologyspreadconstraints

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the MatchExpressions type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MatchExpressions{}

// MatchExpressions struct for MatchExpressions
type MatchExpressions struct {
	key string `json:"key"`
	operator string `json:"operator"`
	values []string `json:"values,omitempty"`
}

// NewMatchExpressions instantiates a new MatchExpressions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchExpressions(key string, operator string) *MatchExpressions {
	this := MatchExpressions{}
	this.key = key
	this.operator = operator
	return &this
}

// NewMatchExpressionsWithDefaults instantiates a new MatchExpressions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchExpressionsWithDefaults() *MatchExpressions {
	this := MatchExpressions{}
	var operator string = "In"
	this.operator = operator
	return &this
}

// GetKey returns the Key field value
func (o *MatchExpressions) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *MatchExpressions) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.key, true
}

// Key sets field value
func (o *MatchExpressions) Key(v string) *MatchExpressions {
	o.key = v
    return o
}

// GetOperator returns the Operator field value
func (o *MatchExpressions) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *MatchExpressions) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.operator, true
}

// Operator sets field value
func (o *MatchExpressions) Operator(v string) *MatchExpressions {
	o.operator = v
    return o
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *MatchExpressions) GetValues() []string {
	if o == nil || utils.IsNil(o.values) {
		var ret []string
		return ret
	}
	return o.values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchExpressions) GetValuesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.values) {
		return nil, false
	}
	return o.values, true
}

// HasValues returns a boolean if a field has been set.
func (o *MatchExpressions) HasValues() bool {
	if o != nil && !utils.IsNil(o.values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the values field.
// values: 

func (o *MatchExpressions) Values(v []string) (*MatchExpressions){
	o.values = v
return o
}

func (o MatchExpressions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchExpressions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.key
	toSerialize["operator"] = o.operator
	if !utils.IsNil(o.values) {
		toSerialize["values"] = o.values
	}
	return toSerialize, nil
}

type NullableMatchExpressions struct {
	value *MatchExpressions
	isSet bool
}

func (v NullableMatchExpressions) Get() *MatchExpressions {
	return v.value
}

func (v *NullableMatchExpressions) Set(val *MatchExpressions) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchExpressions) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchExpressions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchExpressions(val *MatchExpressions) *NullableMatchExpressions {
	return &NullableMatchExpressions{value: val, isSet: true}
}

func (v NullableMatchExpressions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchExpressions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
