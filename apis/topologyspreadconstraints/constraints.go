/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package topologyspreadconstraints

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the Constraints type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Constraints{}

// Constraints struct for Constraints
type Constraints struct {
	labelSelector LabSelector `json:"labelSelector"`
	// A list of pod label keys to select the pods over which spreading will be calculated
	matchLabelKeys []string `json:"matchLabelKeys,omitempty"`
	// Describe the degree to which Pods may be unevenly distributed
	maxSkew int32 `json:"maxSkew"`
	// Indicate a minimum number of eligible domains
	minDomains *int32 `json:"minDomains,omitempty"`
	// Indicate how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew
	nodeAffinityPolicy *string `json:"nodeAffinityPolicy,omitempty"`
	// Indicate how we will treat node taints when calculating pod topology spread skew
	nodeTaintsPolicy *string `json:"nodeTaintsPolicy,omitempty"`
	// Specify the key of node labels
	topologyKey string `json:"topologyKey"`
	// Indicate how to deal with a Pod if it doesn't satisfy the spread constraint
	whenUnsatisfiable string `json:"whenUnsatisfiable"`
}

// NewConstraints instantiates a new Constraints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstraints(labelSelector LabSelector, maxSkew int32, topologyKey string, whenUnsatisfiable string) *Constraints {
	this := Constraints{}
	this.labelSelector = labelSelector
	this.maxSkew = maxSkew
	var nodeAffinityPolicy string = "Honor"
	this.nodeAffinityPolicy = &nodeAffinityPolicy
	var nodeTaintsPolicy string = "Honor"
	this.nodeTaintsPolicy = &nodeTaintsPolicy
	this.topologyKey = topologyKey
	this.whenUnsatisfiable = whenUnsatisfiable
	return &this
}

// NewConstraintsWithDefaults instantiates a new Constraints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstraintsWithDefaults() *Constraints {
	this := Constraints{}
	var nodeAffinityPolicy string = "Honor"
	this.nodeAffinityPolicy = &nodeAffinityPolicy
	var nodeTaintsPolicy string = "Honor"
	this.nodeTaintsPolicy = &nodeTaintsPolicy
	var whenUnsatisfiable string = "DoNotSchedule"
	this.whenUnsatisfiable = whenUnsatisfiable
	return &this
}

// GetLabelSelector returns the LabelSelector field value
func (o *Constraints) GetLabelSelector() LabSelector {
	if o == nil {
		var ret LabSelector
		return ret
	}

	return o.labelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value
// and a boolean to check if the value has been set.
func (o *Constraints) GetLabelSelectorOk() (*LabSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.labelSelector, true
}

// LabelSelector sets field value
func (o *Constraints) LabelSelector(v LabSelector) *Constraints {
	o.labelSelector = v
    return o
}

// GetMatchLabelKeys returns the MatchLabelKeys field value if set, zero value otherwise.
func (o *Constraints) GetMatchLabelKeys() []string {
	if o == nil || utils.IsNil(o.matchLabelKeys) {
		var ret []string
		return ret
	}
	return o.matchLabelKeys
}

// GetMatchLabelKeysOk returns a tuple with the MatchLabelKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraints) GetMatchLabelKeysOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.matchLabelKeys) {
		return nil, false
	}
	return o.matchLabelKeys, true
}

// HasMatchLabelKeys returns a boolean if a field has been set.
func (o *Constraints) HasMatchLabelKeys() bool {
	if o != nil && !utils.IsNil(o.matchLabelKeys) {
		return true
	}

	return false
}

// SetMatchLabelKeys gets a reference to the given []string and assigns it to the matchLabelKeys field.
// matchLabelKeys:  A list of pod label keys to select the pods over which spreading will be calculated 

func (o *Constraints) MatchLabelKeys(v []string) (*Constraints){
	o.matchLabelKeys = v
return o
}

// GetMaxSkew returns the MaxSkew field value
func (o *Constraints) GetMaxSkew() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.maxSkew
}

// GetMaxSkewOk returns a tuple with the MaxSkew field value
// and a boolean to check if the value has been set.
func (o *Constraints) GetMaxSkewOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.maxSkew, true
}

// MaxSkew sets field value
func (o *Constraints) MaxSkew(v int32) *Constraints {
	o.maxSkew = v
    return o
}

// GetMinDomains returns the MinDomains field value if set, zero value otherwise.
func (o *Constraints) GetMinDomains() int32 {
	if o == nil || utils.IsNil(o.minDomains) {
		var ret int32
		return ret
	}
	return *o.minDomains
}

// GetMinDomainsOk returns a tuple with the MinDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraints) GetMinDomainsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.minDomains) {
		return nil, false
	}
	return o.minDomains, true
}

// HasMinDomains returns a boolean if a field has been set.
func (o *Constraints) HasMinDomains() bool {
	if o != nil && !utils.IsNil(o.minDomains) {
		return true
	}

	return false
}

// SetMinDomains gets a reference to the given int32 and assigns it to the minDomains field.
// minDomains:  Indicate a minimum number of eligible domains 

func (o *Constraints) MinDomains(v int32) (*Constraints){
	o.minDomains = &v
return o
}

// GetNodeAffinityPolicy returns the NodeAffinityPolicy field value if set, zero value otherwise.
func (o *Constraints) GetNodeAffinityPolicy() string {
	if o == nil || utils.IsNil(o.nodeAffinityPolicy) {
		var ret string
		return ret
	}
	return *o.nodeAffinityPolicy
}

// GetNodeAffinityPolicyOk returns a tuple with the NodeAffinityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraints) GetNodeAffinityPolicyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.nodeAffinityPolicy) {
		return nil, false
	}
	return o.nodeAffinityPolicy, true
}

// HasNodeAffinityPolicy returns a boolean if a field has been set.
func (o *Constraints) HasNodeAffinityPolicy() bool {
	if o != nil && !utils.IsNil(o.nodeAffinityPolicy) {
		return true
	}

	return false
}

// SetNodeAffinityPolicy gets a reference to the given string and assigns it to the nodeAffinityPolicy field.
// nodeAffinityPolicy:  Indicate how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew 

func (o *Constraints) NodeAffinityPolicy(v string) (*Constraints){
	o.nodeAffinityPolicy = &v
return o
}

// GetNodeTaintsPolicy returns the NodeTaintsPolicy field value if set, zero value otherwise.
func (o *Constraints) GetNodeTaintsPolicy() string {
	if o == nil || utils.IsNil(o.nodeTaintsPolicy) {
		var ret string
		return ret
	}
	return *o.nodeTaintsPolicy
}

// GetNodeTaintsPolicyOk returns a tuple with the NodeTaintsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraints) GetNodeTaintsPolicyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.nodeTaintsPolicy) {
		return nil, false
	}
	return o.nodeTaintsPolicy, true
}

// HasNodeTaintsPolicy returns a boolean if a field has been set.
func (o *Constraints) HasNodeTaintsPolicy() bool {
	if o != nil && !utils.IsNil(o.nodeTaintsPolicy) {
		return true
	}

	return false
}

// SetNodeTaintsPolicy gets a reference to the given string and assigns it to the nodeTaintsPolicy field.
// nodeTaintsPolicy:  Indicate how we will treat node taints when calculating pod topology spread skew 

func (o *Constraints) NodeTaintsPolicy(v string) (*Constraints){
	o.nodeTaintsPolicy = &v
return o
}

// GetTopologyKey returns the TopologyKey field value
func (o *Constraints) GetTopologyKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.topologyKey
}

// GetTopologyKeyOk returns a tuple with the TopologyKey field value
// and a boolean to check if the value has been set.
func (o *Constraints) GetTopologyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.topologyKey, true
}

// TopologyKey sets field value
func (o *Constraints) TopologyKey(v string) *Constraints {
	o.topologyKey = v
    return o
}

// GetWhenUnsatisfiable returns the WhenUnsatisfiable field value
func (o *Constraints) GetWhenUnsatisfiable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.whenUnsatisfiable
}

// GetWhenUnsatisfiableOk returns a tuple with the WhenUnsatisfiable field value
// and a boolean to check if the value has been set.
func (o *Constraints) GetWhenUnsatisfiableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.whenUnsatisfiable, true
}

// WhenUnsatisfiable sets field value
func (o *Constraints) WhenUnsatisfiable(v string) *Constraints {
	o.whenUnsatisfiable = v
    return o
}

func (o Constraints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Constraints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["labelSelector"] = o.labelSelector
	if !utils.IsNil(o.matchLabelKeys) {
		toSerialize["matchLabelKeys"] = o.matchLabelKeys
	}
	toSerialize["maxSkew"] = o.maxSkew
	if !utils.IsNil(o.minDomains) {
		toSerialize["minDomains"] = o.minDomains
	}
	if !utils.IsNil(o.nodeAffinityPolicy) {
		toSerialize["nodeAffinityPolicy"] = o.nodeAffinityPolicy
	}
	if !utils.IsNil(o.nodeTaintsPolicy) {
		toSerialize["nodeTaintsPolicy"] = o.nodeTaintsPolicy
	}
	toSerialize["topologyKey"] = o.topologyKey
	toSerialize["whenUnsatisfiable"] = o.whenUnsatisfiable
	return toSerialize, nil
}

type NullableConstraints struct {
	value *Constraints
	isSet bool
}

func (v NullableConstraints) Get() *Constraints {
	return v.value
}

func (v *NullableConstraints) Set(val *Constraints) {
	v.value = val
	v.isSet = true
}

func (v NullableConstraints) IsSet() bool {
	return v.isSet
}

func (v *NullableConstraints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstraints(val *Constraints) *NullableConstraints {
	return &NullableConstraints{value: val, isSet: true}
}

func (v NullableConstraints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstraints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
