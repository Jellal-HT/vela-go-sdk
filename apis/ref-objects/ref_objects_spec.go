/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ref_objects

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the RefObjectsSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RefObjectsSpec{}

// RefObjectsSpec struct for RefObjectsSpec
type RefObjectsSpec struct {
	// If specified, application will fetch native Kubernetes objects according to the object description
	objects []K8sObject `json:"objects,omitempty"`
	// If specified, the objects in the urls will be loaded.
	urls []string `json:"urls,omitempty"`
}

// NewRefObjectsSpec instantiates a new RefObjectsSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefObjectsSpec() *RefObjectsSpec {
	this := RefObjectsSpec{}
	return &this
}

// NewRefObjectsSpecWithDefaults instantiates a new RefObjectsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefObjectsSpecWithDefaults() *RefObjectsSpec {
	this := RefObjectsSpec{}
	return &this
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *RefObjectsSpec) GetObjects() []K8sObject {
	if o == nil || utils.IsNil(o.objects) {
		var ret []K8sObject
		return ret
	}
	return o.objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefObjectsSpec) GetObjectsOk() ([]K8sObject, bool) {
	if o == nil || utils.IsNil(o.objects) {
		return nil, false
	}
	return o.objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *RefObjectsSpec) HasObjects() bool {
	if o != nil && !utils.IsNil(o.objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []K8sObject and assigns it to the objects field.
// objects:  If specified, application will fetch native Kubernetes objects according to the object description 

func (o *RefObjectsSpec) Objects(v []K8sObject) (*RefObjectsSpec){
	o.objects = v
return o
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *RefObjectsSpec) GetUrls() []string {
	if o == nil || utils.IsNil(o.urls) {
		var ret []string
		return ret
	}
	return o.urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefObjectsSpec) GetUrlsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.urls) {
		return nil, false
	}
	return o.urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *RefObjectsSpec) HasUrls() bool {
	if o != nil && !utils.IsNil(o.urls) {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the urls field.
// urls:  If specified, the objects in the urls will be loaded. 

func (o *RefObjectsSpec) Urls(v []string) (*RefObjectsSpec){
	o.urls = v
return o
}

func (o RefObjectsSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefObjectsSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.objects) {
		toSerialize["objects"] = o.objects
	}
	if !utils.IsNil(o.urls) {
		toSerialize["urls"] = o.urls
	}
	return toSerialize, nil
}

type NullableRefObjectsSpec struct {
	value *RefObjectsSpec
	isSet bool
}

func (v NullableRefObjectsSpec) Get() *RefObjectsSpec {
	return v.value
}

func (v *NullableRefObjectsSpec) Set(val *RefObjectsSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRefObjectsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRefObjectsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefObjectsSpec(val *RefObjectsSpec) *NullableRefObjectsSpec {
	return &NullableRefObjectsSpec{value: val, isSet: true}
}

func (v NullableRefObjectsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefObjectsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
