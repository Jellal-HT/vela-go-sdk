/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the NotificationSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NotificationSpec{}

// NotificationSpec struct for NotificationSpec
type NotificationSpec struct {
	dingding *Dingding `json:"dingding,omitempty"`
	email *Email `json:"email,omitempty"`
	lark *Lark `json:"lark,omitempty"`
	slack *Slack `json:"slack,omitempty"`
}

// NewNotificationSpec instantiates a new NotificationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSpec() *NotificationSpec {
	this := NotificationSpec{}
	return &this
}

// NewNotificationSpecWithDefaults instantiates a new NotificationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSpecWithDefaults() *NotificationSpec {
	this := NotificationSpec{}
	return &this
}

// GetDingding returns the Dingding field value if set, zero value otherwise.
func (o *NotificationSpec) GetDingding() Dingding {
	if o == nil || utils.IsNil(o.dingding) {
		var ret Dingding
		return ret
	}
	return *o.dingding
}

// GetDingdingOk returns a tuple with the Dingding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetDingdingOk() (*Dingding, bool) {
	if o == nil || utils.IsNil(o.dingding) {
		return nil, false
	}
	return o.dingding, true
}

// HasDingding returns a boolean if a field has been set.
func (o *NotificationSpec) HasDingding() bool {
	if o != nil && !utils.IsNil(o.dingding) {
		return true
	}

	return false
}

// SetDingding gets a reference to the given Dingding and assigns it to the dingding field.
// dingding: 

func (o *NotificationSpec) Dingding(v Dingding) (*NotificationSpec){
	o.dingding = &v
return o
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *NotificationSpec) GetEmail() Email {
	if o == nil || utils.IsNil(o.email) {
		var ret Email
		return ret
	}
	return *o.email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetEmailOk() (*Email, bool) {
	if o == nil || utils.IsNil(o.email) {
		return nil, false
	}
	return o.email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *NotificationSpec) HasEmail() bool {
	if o != nil && !utils.IsNil(o.email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given Email and assigns it to the email field.
// email: 

func (o *NotificationSpec) Email(v Email) (*NotificationSpec){
	o.email = &v
return o
}

// GetLark returns the Lark field value if set, zero value otherwise.
func (o *NotificationSpec) GetLark() Lark {
	if o == nil || utils.IsNil(o.lark) {
		var ret Lark
		return ret
	}
	return *o.lark
}

// GetLarkOk returns a tuple with the Lark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetLarkOk() (*Lark, bool) {
	if o == nil || utils.IsNil(o.lark) {
		return nil, false
	}
	return o.lark, true
}

// HasLark returns a boolean if a field has been set.
func (o *NotificationSpec) HasLark() bool {
	if o != nil && !utils.IsNil(o.lark) {
		return true
	}

	return false
}

// SetLark gets a reference to the given Lark and assigns it to the lark field.
// lark: 

func (o *NotificationSpec) Lark(v Lark) (*NotificationSpec){
	o.lark = &v
return o
}

// GetSlack returns the Slack field value if set, zero value otherwise.
func (o *NotificationSpec) GetSlack() Slack {
	if o == nil || utils.IsNil(o.slack) {
		var ret Slack
		return ret
	}
	return *o.slack
}

// GetSlackOk returns a tuple with the Slack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSpec) GetSlackOk() (*Slack, bool) {
	if o == nil || utils.IsNil(o.slack) {
		return nil, false
	}
	return o.slack, true
}

// HasSlack returns a boolean if a field has been set.
func (o *NotificationSpec) HasSlack() bool {
	if o != nil && !utils.IsNil(o.slack) {
		return true
	}

	return false
}

// SetSlack gets a reference to the given Slack and assigns it to the slack field.
// slack: 

func (o *NotificationSpec) Slack(v Slack) (*NotificationSpec){
	o.slack = &v
return o
}

func (o NotificationSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.dingding) {
		toSerialize["dingding"] = o.dingding
	}
	if !utils.IsNil(o.email) {
		toSerialize["email"] = o.email
	}
	if !utils.IsNil(o.lark) {
		toSerialize["lark"] = o.lark
	}
	if !utils.IsNil(o.slack) {
		toSerialize["slack"] = o.slack
	}
	return toSerialize, nil
}

type NullableNotificationSpec struct {
	value *NotificationSpec
	isSet bool
}

func (v NullableNotificationSpec) Get() *NotificationSpec {
	return v.value
}

func (v *NullableNotificationSpec) Set(val *NotificationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSpec(val *NotificationSpec) *NullableNotificationSpec {
	return &NullableNotificationSpec{value: val, isSet: true}
}

func (v NullableNotificationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
