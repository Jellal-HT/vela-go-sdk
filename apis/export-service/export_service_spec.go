/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export_service

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)



    
    // checks if the ExportServiceSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ExportServiceSpec{}

// ExportServiceSpec struct for ExportServiceSpec
type ExportServiceSpec struct {
	// Specify the ip to be export
	ip string `json:"ip"`
	// Specify the name of the export destination
	name *string `json:"name,omitempty"`
	// Specify the namespace of the export destination
	namespace *string `json:"namespace,omitempty"`
	// Specify the port to be used in service
	port int32 `json:"port"`
	// Specify the port to be export
	targetPort int32 `json:"targetPort"`
	// Specify the topology to export
	topology *string `json:"topology,omitempty"`
}

// NewExportServiceSpec instantiates a new ExportServiceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportServiceSpec(ip string, port int32, targetPort int32) *ExportServiceSpec {
	this := ExportServiceSpec{}
	this.ip = ip
	this.port = port
	this.targetPort = targetPort
	return &this
}

// NewExportServiceSpecWithDefaults instantiates a new ExportServiceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportServiceSpecWithDefaults() *ExportServiceSpec {
	this := ExportServiceSpec{}
	return &this
}

// GetIp returns the Ip field value
func (o *ExportServiceSpec) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *ExportServiceSpec) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ip, true
}

// Ip sets field value
func (o *ExportServiceSpec) Ip(v string) *ExportServiceSpec {
	o.ip = v
    return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExportServiceSpec) GetName() string {
	if o == nil || utils.IsNil(o.name) {
		var ret string
		return ret
	}
	return *o.name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportServiceSpec) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.name) {
		return nil, false
	}
	return o.name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExportServiceSpec) HasName() bool {
	if o != nil && !utils.IsNil(o.name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the name field.
// name:  Specify the name of the export destination 

func (o *ExportServiceSpec) Name(v string) (*ExportServiceSpec){
	o.name = &v
return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ExportServiceSpec) GetNamespace() string {
	if o == nil || utils.IsNil(o.namespace) {
		var ret string
		return ret
	}
	return *o.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportServiceSpec) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.namespace) {
		return nil, false
	}
	return o.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ExportServiceSpec) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the namespace of the export destination 

func (o *ExportServiceSpec) Namespace(v string) (*ExportServiceSpec){
	o.namespace = &v
return o
}

// GetPort returns the Port field value
func (o *ExportServiceSpec) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *ExportServiceSpec) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.port, true
}

// Port sets field value
func (o *ExportServiceSpec) Port(v int32) *ExportServiceSpec {
	o.port = v
    return o
}

// GetTargetPort returns the TargetPort field value
func (o *ExportServiceSpec) GetTargetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.targetPort
}

// GetTargetPortOk returns a tuple with the TargetPort field value
// and a boolean to check if the value has been set.
func (o *ExportServiceSpec) GetTargetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.targetPort, true
}

// TargetPort sets field value
func (o *ExportServiceSpec) TargetPort(v int32) *ExportServiceSpec {
	o.targetPort = v
    return o
}

// GetTopology returns the Topology field value if set, zero value otherwise.
func (o *ExportServiceSpec) GetTopology() string {
	if o == nil || utils.IsNil(o.topology) {
		var ret string
		return ret
	}
	return *o.topology
}

// GetTopologyOk returns a tuple with the Topology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportServiceSpec) GetTopologyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.topology) {
		return nil, false
	}
	return o.topology, true
}

// HasTopology returns a boolean if a field has been set.
func (o *ExportServiceSpec) HasTopology() bool {
	if o != nil && !utils.IsNil(o.topology) {
		return true
	}

	return false
}

// SetTopology gets a reference to the given string and assigns it to the topology field.
// topology:  Specify the topology to export 

func (o *ExportServiceSpec) Topology(v string) (*ExportServiceSpec){
	o.topology = &v
return o
}

func (o ExportServiceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportServiceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.ip
	if !utils.IsNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	toSerialize["port"] = o.port
	toSerialize["targetPort"] = o.targetPort
	if !utils.IsNil(o.topology) {
		toSerialize["topology"] = o.topology
	}
	return toSerialize, nil
}

type NullableExportServiceSpec struct {
	value *ExportServiceSpec
	isSet bool
}

func (v NullableExportServiceSpec) Get() *ExportServiceSpec {
	return v.value
}

func (v *NullableExportServiceSpec) Set(val *ExportServiceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableExportServiceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableExportServiceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportServiceSpec(val *ExportServiceSpec) *NullableExportServiceSpec {
	return &NullableExportServiceSpec{value: val, isSet: true}
}

func (v NullableExportServiceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportServiceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

 
