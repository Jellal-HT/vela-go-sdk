/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_terraform_provider

import (
"encoding/json"
. "vela-go-sdk/api"
"vela-go-sdk/apis/utils"

"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
    "fmt"
)


// ApplyTerraformProviderSpec - struct for ApplyTerraformProviderSpec
type ApplyTerraformProviderSpec struct {
	AWSProvider *AWSProvider
	AlibabaProvider *AlibabaProvider
	AzureProvider *AzureProvider
	BaiduProvider *BaiduProvider
	ECProvider *ECProvider
	GCPProvider *GCPProvider
	TencentProvider *TencentProvider
	UCloudProvider *UCloudProvider
}

// AWSProviderAsApplyTerraformProviderSpec is a convenience function that returns AWSProvider wrapped in ApplyTerraformProviderSpec
func AWSProviderAsApplyTerraformProviderSpec(v *AWSProvider) ApplyTerraformProviderSpec {
	return ApplyTerraformProviderSpec{
		AWSProvider: v,
	}
}

// AlibabaProviderAsApplyTerraformProviderSpec is a convenience function that returns AlibabaProvider wrapped in ApplyTerraformProviderSpec
func AlibabaProviderAsApplyTerraformProviderSpec(v *AlibabaProvider) ApplyTerraformProviderSpec {
	return ApplyTerraformProviderSpec{
		AlibabaProvider: v,
	}
}

// AzureProviderAsApplyTerraformProviderSpec is a convenience function that returns AzureProvider wrapped in ApplyTerraformProviderSpec
func AzureProviderAsApplyTerraformProviderSpec(v *AzureProvider) ApplyTerraformProviderSpec {
	return ApplyTerraformProviderSpec{
		AzureProvider: v,
	}
}

// BaiduProviderAsApplyTerraformProviderSpec is a convenience function that returns BaiduProvider wrapped in ApplyTerraformProviderSpec
func BaiduProviderAsApplyTerraformProviderSpec(v *BaiduProvider) ApplyTerraformProviderSpec {
	return ApplyTerraformProviderSpec{
		BaiduProvider: v,
	}
}

// ECProviderAsApplyTerraformProviderSpec is a convenience function that returns ECProvider wrapped in ApplyTerraformProviderSpec
func ECProviderAsApplyTerraformProviderSpec(v *ECProvider) ApplyTerraformProviderSpec {
	return ApplyTerraformProviderSpec{
		ECProvider: v,
	}
}

// GCPProviderAsApplyTerraformProviderSpec is a convenience function that returns GCPProvider wrapped in ApplyTerraformProviderSpec
func GCPProviderAsApplyTerraformProviderSpec(v *GCPProvider) ApplyTerraformProviderSpec {
	return ApplyTerraformProviderSpec{
		GCPProvider: v,
	}
}

// TencentProviderAsApplyTerraformProviderSpec is a convenience function that returns TencentProvider wrapped in ApplyTerraformProviderSpec
func TencentProviderAsApplyTerraformProviderSpec(v *TencentProvider) ApplyTerraformProviderSpec {
	return ApplyTerraformProviderSpec{
		TencentProvider: v,
	}
}

// UCloudProviderAsApplyTerraformProviderSpec is a convenience function that returns UCloudProvider wrapped in ApplyTerraformProviderSpec
func UCloudProviderAsApplyTerraformProviderSpec(v *UCloudProvider) ApplyTerraformProviderSpec {
	return ApplyTerraformProviderSpec{
		UCloudProvider: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApplyTerraformProviderSpec) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AWSProvider
	err = newStrictDecoder(data).Decode(&dst.AWSProvider)
	if err == nil {
		jsonAWSProvider, _ := json.Marshal(dst.AWSProvider)
		if string(jsonAWSProvider) == "{}" { // empty struct
			dst.AWSProvider = nil
		} else {
			match++
		}
	} else {
		dst.AWSProvider = nil
	}

	// try to unmarshal data into AlibabaProvider
	err = newStrictDecoder(data).Decode(&dst.AlibabaProvider)
	if err == nil {
		jsonAlibabaProvider, _ := json.Marshal(dst.AlibabaProvider)
		if string(jsonAlibabaProvider) == "{}" { // empty struct
			dst.AlibabaProvider = nil
		} else {
			match++
		}
	} else {
		dst.AlibabaProvider = nil
	}

	// try to unmarshal data into AzureProvider
	err = newStrictDecoder(data).Decode(&dst.AzureProvider)
	if err == nil {
		jsonAzureProvider, _ := json.Marshal(dst.AzureProvider)
		if string(jsonAzureProvider) == "{}" { // empty struct
			dst.AzureProvider = nil
		} else {
			match++
		}
	} else {
		dst.AzureProvider = nil
	}

	// try to unmarshal data into BaiduProvider
	err = newStrictDecoder(data).Decode(&dst.BaiduProvider)
	if err == nil {
		jsonBaiduProvider, _ := json.Marshal(dst.BaiduProvider)
		if string(jsonBaiduProvider) == "{}" { // empty struct
			dst.BaiduProvider = nil
		} else {
			match++
		}
	} else {
		dst.BaiduProvider = nil
	}

	// try to unmarshal data into ECProvider
	err = newStrictDecoder(data).Decode(&dst.ECProvider)
	if err == nil {
		jsonECProvider, _ := json.Marshal(dst.ECProvider)
		if string(jsonECProvider) == "{}" { // empty struct
			dst.ECProvider = nil
		} else {
			match++
		}
	} else {
		dst.ECProvider = nil
	}

	// try to unmarshal data into GCPProvider
	err = newStrictDecoder(data).Decode(&dst.GCPProvider)
	if err == nil {
		jsonGCPProvider, _ := json.Marshal(dst.GCPProvider)
		if string(jsonGCPProvider) == "{}" { // empty struct
			dst.GCPProvider = nil
		} else {
			match++
		}
	} else {
		dst.GCPProvider = nil
	}

	// try to unmarshal data into TencentProvider
	err = newStrictDecoder(data).Decode(&dst.TencentProvider)
	if err == nil {
		jsonTencentProvider, _ := json.Marshal(dst.TencentProvider)
		if string(jsonTencentProvider) == "{}" { // empty struct
			dst.TencentProvider = nil
		} else {
			match++
		}
	} else {
		dst.TencentProvider = nil
	}

	// try to unmarshal data into UCloudProvider
	err = newStrictDecoder(data).Decode(&dst.UCloudProvider)
	if err == nil {
		jsonUCloudProvider, _ := json.Marshal(dst.UCloudProvider)
		if string(jsonUCloudProvider) == "{}" { // empty struct
			dst.UCloudProvider = nil
		} else {
			match++
		}
	} else {
		dst.UCloudProvider = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AWSProvider = nil
		dst.AlibabaProvider = nil
		dst.AzureProvider = nil
		dst.BaiduProvider = nil
		dst.ECProvider = nil
		dst.GCPProvider = nil
		dst.TencentProvider = nil
		dst.UCloudProvider = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApplyTerraformProviderSpec)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApplyTerraformProviderSpec)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApplyTerraformProviderSpec) MarshalJSON() ([]byte, error) {
	if src.AWSProvider != nil {
		return json.Marshal(&src.AWSProvider)
	}

	if src.AlibabaProvider != nil {
		return json.Marshal(&src.AlibabaProvider)
	}

	if src.AzureProvider != nil {
		return json.Marshal(&src.AzureProvider)
	}

	if src.BaiduProvider != nil {
		return json.Marshal(&src.BaiduProvider)
	}

	if src.ECProvider != nil {
		return json.Marshal(&src.ECProvider)
	}

	if src.GCPProvider != nil {
		return json.Marshal(&src.GCPProvider)
	}

	if src.TencentProvider != nil {
		return json.Marshal(&src.TencentProvider)
	}

	if src.UCloudProvider != nil {
		return json.Marshal(&src.UCloudProvider)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApplyTerraformProviderSpec) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AWSProvider != nil {
		return obj.AWSProvider
	}

	if obj.AlibabaProvider != nil {
		return obj.AlibabaProvider
	}

	if obj.AzureProvider != nil {
		return obj.AzureProvider
	}

	if obj.BaiduProvider != nil {
		return obj.BaiduProvider
	}

	if obj.ECProvider != nil {
		return obj.ECProvider
	}

	if obj.GCPProvider != nil {
		return obj.GCPProvider
	}

	if obj.TencentProvider != nil {
		return obj.TencentProvider
	}

	if obj.UCloudProvider != nil {
		return obj.UCloudProvider
	}

	// all schemas are nil
	return nil
}

type NullableApplyTerraformProviderSpec struct {
	value *ApplyTerraformProviderSpec
	isSet bool
}

func (v NullableApplyTerraformProviderSpec) Get() *ApplyTerraformProviderSpec {
	return v.value
}

func (v *NullableApplyTerraformProviderSpec) Set(val *ApplyTerraformProviderSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyTerraformProviderSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyTerraformProviderSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyTerraformProviderSpec(val *ApplyTerraformProviderSpec) *NullableApplyTerraformProviderSpec {
	return &NullableApplyTerraformProviderSpec{value: val, isSet: true}
}

func (v NullableApplyTerraformProviderSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyTerraformProviderSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


