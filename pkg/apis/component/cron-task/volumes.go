/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cron_task

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the Volumes type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Volumes{}

// Volumes struct for Volumes
type Volumes struct {
	medium    *string `json:"medium,omitempty"`
	mountPath *string `json:"mountPath,omitempty"`
	name      *string `json:"name,omitempty"`
	// Specify volume type, options: \"pvc\",\"configMap\",\"secret\",\"emptyDir\", default to emptyDir
	type_ *string `json:"type,omitempty"`
}

// NewVolumesWith instantiates a new Volumes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumesWith() *Volumes {
	this := Volumes{}
	var medium string = ""
	this.medium = &medium
	var type_ string = "emptyDir"
	this.type_ = &type_
	return &this
}

// NewVolumes instantiates a new Volumes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumes() *Volumes {
	this := Volumes{}
	var medium string = ""
	this.medium = &medium
	var type_ string = "emptyDir"
	this.type_ = &type_
	return &this
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *Volumes) GetMedium() string {
	if o == nil || utils.IsNil(o.medium) {
		var ret string
		return ret
	}
	return *o.medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volumes) GetMediumOk() (*string, bool) {
	if o == nil || utils.IsNil(o.medium) {
		return nil, false
	}
	return o.medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *Volumes) HasMedium() bool {
	if o != nil && !utils.IsNil(o.medium) {
		return true
	}

	return false
}

// Medium gets a reference to the given string and assigns it to the medium field.
// medium:
func (o *Volumes) Medium(v string) *Volumes {
	o.medium = &v
	return o
}

// GetMountPath returns the MountPath field value if set, zero value otherwise.
func (o *Volumes) GetMountPath() string {
	if o == nil || utils.IsNil(o.mountPath) {
		var ret string
		return ret
	}
	return *o.mountPath
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volumes) GetMountPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.mountPath) {
		return nil, false
	}
	return o.mountPath, true
}

// HasMountPath returns a boolean if a field has been set.
func (o *Volumes) HasMountPath() bool {
	if o != nil && !utils.IsNil(o.mountPath) {
		return true
	}

	return false
}

// MountPath gets a reference to the given string and assigns it to the mountPath field.
// mountPath:
func (o *Volumes) MountPath(v string) *Volumes {
	o.mountPath = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Volumes) GetName() string {
	if o == nil || utils.IsNil(o.name) {
		var ret string
		return ret
	}
	return *o.name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volumes) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.name) {
		return nil, false
	}
	return o.name, true
}

// HasName returns a boolean if a field has been set.
func (o *Volumes) HasName() bool {
	if o != nil && !utils.IsNil(o.name) {
		return true
	}

	return false
}

// Name gets a reference to the given string and assigns it to the name field.
// name:
func (o *Volumes) Name(v string) *Volumes {
	o.name = &v
	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Volumes) GetType() string {
	if o == nil || utils.IsNil(o.type_) {
		var ret string
		return ret
	}
	return *o.type_
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volumes) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.type_) {
		return nil, false
	}
	return o.type_, true
}

// HasType returns a boolean if a field has been set.
func (o *Volumes) HasType() bool {
	if o != nil && !utils.IsNil(o.type_) {
		return true
	}

	return false
}

// Type gets a reference to the given string and assigns it to the type_ field.
// type_:  Specify volume type, options: \"pvc\",\"configMap\",\"secret\",\"emptyDir\", default to emptyDir
func (o *Volumes) Type(v string) *Volumes {
	o.type_ = &v
	return o
}

func (o Volumes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Volumes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.medium) {
		toSerialize["medium"] = o.medium
	}
	if !utils.IsNil(o.mountPath) {
		toSerialize["mountPath"] = o.mountPath
	}
	if !utils.IsNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !utils.IsNil(o.type_) {
		toSerialize["type"] = o.type_
	}
	return toSerialize, nil
}

type NullableVolumes struct {
	value *Volumes
	isSet bool
}

func (v NullableVolumes) Get() *Volumes {
	return v.value
}

func (v *NullableVolumes) Set(val *Volumes) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumes) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumes(val *Volumes) *NullableVolumes {
	return &NullableVolumes{value: val, isSet: true}
}

func (v NullableVolumes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
