/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daemon

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the DaemonSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DaemonSpec{}

// DaemonSpec struct for DaemonSpec
type DaemonSpec struct {
	addRevisionLabel bool `json:"addRevisionLabel"`
	// Specify the annotations in the workload
	annotations *map[string]string `json:"annotations,omitempty"`
	// Commands to run in the container
	cmd []string `json:"cmd,omitempty"`
	// Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
	cpu *string `json:"cpu,omitempty"`
	// Define arguments by using environment variables
	env        []Env  `json:"env,omitempty"`
	exposeType string `json:"exposeType"`
	// Specify the hostAliases to add
	hostAliases []HostAliases `json:"hostAliases,omitempty"`
	// Which image would you like to use for your service +short=i
	image string `json:"image"`
	// Specify image pull policy for your service
	imagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	// Specify image pull secrets for your service
	imagePullSecrets []string `json:"imagePullSecrets,omitempty"`
	// Specify the labels in the workload
	labels        *map[string]string `json:"labels,omitempty"`
	livenessProbe *HealthProbe       `json:"livenessProbe,omitempty"`
	// Specifies the attributes of the memory resource required for the container.
	memory *string `json:"memory,omitempty"`
	port   *int32  `json:"port,omitempty"`
	// Which ports do you want customer traffic sent to, defaults to 80
	ports          []Ports       `json:"ports,omitempty"`
	readinessProbe *HealthProbe  `json:"readinessProbe,omitempty"`
	volumeMounts   *VolumeMounts `json:"volumeMounts,omitempty"`
	// Deprecated field, use volumeMounts instead.
	volumes []Volumes `json:"volumes,omitempty"`
}

// NewDaemonSpecWith instantiates a new DaemonSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaemonSpecWith(addRevisionLabel bool, exposeType string, image string) *DaemonSpec {
	this := DaemonSpec{}
	this.addRevisionLabel = addRevisionLabel
	this.exposeType = exposeType
	this.image = image
	return &this
}

// NewDaemonSpec instantiates a new DaemonSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaemonSpec() *DaemonSpec {
	this := DaemonSpec{}
	var addRevisionLabel bool = false
	this.addRevisionLabel = addRevisionLabel
	var exposeType string = "ClusterIP"
	this.exposeType = exposeType
	return &this
}

// GetAddRevisionLabel returns the AddRevisionLabel field value
func (o *DaemonComponent) GetAddRevisionLabel() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Properties.addRevisionLabel
}

// GetAddRevisionLabelOk returns a tuple with the AddRevisionLabel field value
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetAddRevisionLabelOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.addRevisionLabel, true
}

// AddRevisionLabel sets field value
func (o *DaemonComponent) AddRevisionLabel(v bool) *DaemonComponent {
	o.Properties.addRevisionLabel = v
	return o
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *DaemonComponent) GetAnnotations() map[string]string {
	if o == nil || utils.IsNil(o.Properties.annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Properties.annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.Properties.annotations) {
		return nil, false
	}
	return o.Properties.annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *DaemonComponent) HasAnnotations() bool {
	if o != nil && !utils.IsNil(o.Properties.annotations) {
		return true
	}

	return false
}

// Annotations gets a reference to the given map[string]string and assigns it to the annotations field.
// annotations:  Specify the annotations in the workload
func (o *DaemonComponent) Annotations(v map[string]string) *DaemonComponent {
	o.Properties.annotations = &v
	return o
}

// GetCmd returns the Cmd field value if set, zero value otherwise.
func (o *DaemonComponent) GetCmd() []string {
	if o == nil || utils.IsNil(o.Properties.cmd) {
		var ret []string
		return ret
	}
	return o.Properties.cmd
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetCmdOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.cmd) {
		return nil, false
	}
	return o.Properties.cmd, true
}

// HasCmd returns a boolean if a field has been set.
func (o *DaemonComponent) HasCmd() bool {
	if o != nil && !utils.IsNil(o.Properties.cmd) {
		return true
	}

	return false
}

// Cmd gets a reference to the given []string and assigns it to the cmd field.
// cmd:  Commands to run in the container
func (o *DaemonComponent) Cmd(v []string) *DaemonComponent {
	o.Properties.cmd = v
	return o
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *DaemonComponent) GetCpu() string {
	if o == nil || utils.IsNil(o.Properties.cpu) {
		var ret string
		return ret
	}
	return *o.Properties.cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetCpuOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.cpu) {
		return nil, false
	}
	return o.Properties.cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *DaemonComponent) HasCpu() bool {
	if o != nil && !utils.IsNil(o.Properties.cpu) {
		return true
	}

	return false
}

// Cpu gets a reference to the given string and assigns it to the cpu field.
// cpu:  Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
func (o *DaemonComponent) Cpu(v string) *DaemonComponent {
	o.Properties.cpu = &v
	return o
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *DaemonComponent) GetEnv() []Env {
	if o == nil || utils.IsNil(o.Properties.env) {
		var ret []Env
		return ret
	}
	return o.Properties.env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetEnvOk() ([]Env, bool) {
	if o == nil || utils.IsNil(o.Properties.env) {
		return nil, false
	}
	return o.Properties.env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *DaemonComponent) HasEnv() bool {
	if o != nil && !utils.IsNil(o.Properties.env) {
		return true
	}

	return false
}

// Env gets a reference to the given []Env and assigns it to the env field.
// env:  Define arguments by using environment variables
func (o *DaemonComponent) Env(v []Env) *DaemonComponent {
	o.Properties.env = v
	return o
}

// GetExposeType returns the ExposeType field value
func (o *DaemonComponent) GetExposeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.exposeType
}

// GetExposeTypeOk returns a tuple with the ExposeType field value
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetExposeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.exposeType, true
}

// ExposeType sets field value
func (o *DaemonComponent) ExposeType(v string) *DaemonComponent {
	o.Properties.exposeType = v
	return o
}

// GetHostAliases returns the HostAliases field value if set, zero value otherwise.
func (o *DaemonComponent) GetHostAliases() []HostAliases {
	if o == nil || utils.IsNil(o.Properties.hostAliases) {
		var ret []HostAliases
		return ret
	}
	return o.Properties.hostAliases
}

// GetHostAliasesOk returns a tuple with the HostAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetHostAliasesOk() ([]HostAliases, bool) {
	if o == nil || utils.IsNil(o.Properties.hostAliases) {
		return nil, false
	}
	return o.Properties.hostAliases, true
}

// HasHostAliases returns a boolean if a field has been set.
func (o *DaemonComponent) HasHostAliases() bool {
	if o != nil && !utils.IsNil(o.Properties.hostAliases) {
		return true
	}

	return false
}

// HostAliases gets a reference to the given []HostAliases and assigns it to the hostAliases field.
// hostAliases:  Specify the hostAliases to add
func (o *DaemonComponent) HostAliases(v []HostAliases) *DaemonComponent {
	o.Properties.hostAliases = v
	return o
}

// GetImage returns the Image field value
func (o *DaemonComponent) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.image, true
}

// Image sets field value
func (o *DaemonComponent) Image(v string) *DaemonComponent {
	o.Properties.image = v
	return o
}

// GetImagePullPolicy returns the ImagePullPolicy field value if set, zero value otherwise.
func (o *DaemonComponent) GetImagePullPolicy() string {
	if o == nil || utils.IsNil(o.Properties.imagePullPolicy) {
		var ret string
		return ret
	}
	return *o.Properties.imagePullPolicy
}

// GetImagePullPolicyOk returns a tuple with the ImagePullPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetImagePullPolicyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.imagePullPolicy) {
		return nil, false
	}
	return o.Properties.imagePullPolicy, true
}

// HasImagePullPolicy returns a boolean if a field has been set.
func (o *DaemonComponent) HasImagePullPolicy() bool {
	if o != nil && !utils.IsNil(o.Properties.imagePullPolicy) {
		return true
	}

	return false
}

// ImagePullPolicy gets a reference to the given string and assigns it to the imagePullPolicy field.
// imagePullPolicy:  Specify image pull policy for your service
func (o *DaemonComponent) ImagePullPolicy(v string) *DaemonComponent {
	o.Properties.imagePullPolicy = &v
	return o
}

// GetImagePullSecrets returns the ImagePullSecrets field value if set, zero value otherwise.
func (o *DaemonComponent) GetImagePullSecrets() []string {
	if o == nil || utils.IsNil(o.Properties.imagePullSecrets) {
		var ret []string
		return ret
	}
	return o.Properties.imagePullSecrets
}

// GetImagePullSecretsOk returns a tuple with the ImagePullSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetImagePullSecretsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.imagePullSecrets) {
		return nil, false
	}
	return o.Properties.imagePullSecrets, true
}

// HasImagePullSecrets returns a boolean if a field has been set.
func (o *DaemonComponent) HasImagePullSecrets() bool {
	if o != nil && !utils.IsNil(o.Properties.imagePullSecrets) {
		return true
	}

	return false
}

// ImagePullSecrets gets a reference to the given []string and assigns it to the imagePullSecrets field.
// imagePullSecrets:  Specify image pull secrets for your service
func (o *DaemonComponent) ImagePullSecrets(v []string) *DaemonComponent {
	o.Properties.imagePullSecrets = v
	return o
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *DaemonComponent) GetLabels() map[string]string {
	if o == nil || utils.IsNil(o.Properties.labels) {
		var ret map[string]string
		return ret
	}
	return *o.Properties.labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.Properties.labels) {
		return nil, false
	}
	return o.Properties.labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *DaemonComponent) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Properties.labels) {
		return true
	}

	return false
}

// Labels gets a reference to the given map[string]string and assigns it to the labels field.
// labels:  Specify the labels in the workload
func (o *DaemonComponent) Labels(v map[string]string) *DaemonComponent {
	o.Properties.labels = &v
	return o
}

// GetLivenessProbe returns the LivenessProbe field value if set, zero value otherwise.
func (o *DaemonComponent) GetLivenessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.Properties.livenessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.Properties.livenessProbe
}

// GetLivenessProbeOk returns a tuple with the LivenessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetLivenessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.Properties.livenessProbe) {
		return nil, false
	}
	return o.Properties.livenessProbe, true
}

// HasLivenessProbe returns a boolean if a field has been set.
func (o *DaemonComponent) HasLivenessProbe() bool {
	if o != nil && !utils.IsNil(o.Properties.livenessProbe) {
		return true
	}

	return false
}

// LivenessProbe gets a reference to the given HealthProbe and assigns it to the livenessProbe field.
// livenessProbe:
func (o *DaemonComponent) LivenessProbe(v HealthProbe) *DaemonComponent {
	o.Properties.livenessProbe = &v
	return o
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *DaemonComponent) GetMemory() string {
	if o == nil || utils.IsNil(o.Properties.memory) {
		var ret string
		return ret
	}
	return *o.Properties.memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetMemoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.memory) {
		return nil, false
	}
	return o.Properties.memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *DaemonComponent) HasMemory() bool {
	if o != nil && !utils.IsNil(o.Properties.memory) {
		return true
	}

	return false
}

// Memory gets a reference to the given string and assigns it to the memory field.
// memory:  Specifies the attributes of the memory resource required for the container.
func (o *DaemonComponent) Memory(v string) *DaemonComponent {
	o.Properties.memory = &v
	return o
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *DaemonComponent) GetPort() int32 {
	if o == nil || utils.IsNil(o.Properties.port) {
		var ret int32
		return ret
	}
	return *o.Properties.port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetPortOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.port) {
		return nil, false
	}
	return o.Properties.port, true
}

// HasPort returns a boolean if a field has been set.
func (o *DaemonComponent) HasPort() bool {
	if o != nil && !utils.IsNil(o.Properties.port) {
		return true
	}

	return false
}

// Port gets a reference to the given int32 and assigns it to the port field.
// port:
func (o *DaemonComponent) Port(v int32) *DaemonComponent {
	o.Properties.port = &v
	return o
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *DaemonComponent) GetPorts() []Ports {
	if o == nil || utils.IsNil(o.Properties.ports) {
		var ret []Ports
		return ret
	}
	return o.Properties.ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetPortsOk() ([]Ports, bool) {
	if o == nil || utils.IsNil(o.Properties.ports) {
		return nil, false
	}
	return o.Properties.ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *DaemonComponent) HasPorts() bool {
	if o != nil && !utils.IsNil(o.Properties.ports) {
		return true
	}

	return false
}

// Ports gets a reference to the given []Ports and assigns it to the ports field.
// ports:  Which ports do you want customer traffic sent to, defaults to 80
func (o *DaemonComponent) Ports(v []Ports) *DaemonComponent {
	o.Properties.ports = v
	return o
}

// GetReadinessProbe returns the ReadinessProbe field value if set, zero value otherwise.
func (o *DaemonComponent) GetReadinessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.Properties.readinessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.Properties.readinessProbe
}

// GetReadinessProbeOk returns a tuple with the ReadinessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetReadinessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.Properties.readinessProbe) {
		return nil, false
	}
	return o.Properties.readinessProbe, true
}

// HasReadinessProbe returns a boolean if a field has been set.
func (o *DaemonComponent) HasReadinessProbe() bool {
	if o != nil && !utils.IsNil(o.Properties.readinessProbe) {
		return true
	}

	return false
}

// ReadinessProbe gets a reference to the given HealthProbe and assigns it to the readinessProbe field.
// readinessProbe:
func (o *DaemonComponent) ReadinessProbe(v HealthProbe) *DaemonComponent {
	o.Properties.readinessProbe = &v
	return o
}

// GetVolumeMounts returns the VolumeMounts field value if set, zero value otherwise.
func (o *DaemonComponent) GetVolumeMounts() VolumeMounts {
	if o == nil || utils.IsNil(o.Properties.volumeMounts) {
		var ret VolumeMounts
		return ret
	}
	return *o.Properties.volumeMounts
}

// GetVolumeMountsOk returns a tuple with the VolumeMounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetVolumeMountsOk() (*VolumeMounts, bool) {
	if o == nil || utils.IsNil(o.Properties.volumeMounts) {
		return nil, false
	}
	return o.Properties.volumeMounts, true
}

// HasVolumeMounts returns a boolean if a field has been set.
func (o *DaemonComponent) HasVolumeMounts() bool {
	if o != nil && !utils.IsNil(o.Properties.volumeMounts) {
		return true
	}

	return false
}

// VolumeMounts gets a reference to the given VolumeMounts and assigns it to the volumeMounts field.
// volumeMounts:
func (o *DaemonComponent) VolumeMounts(v VolumeMounts) *DaemonComponent {
	o.Properties.volumeMounts = &v
	return o
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *DaemonComponent) GetVolumes() []Volumes {
	if o == nil || utils.IsNil(o.Properties.volumes) {
		var ret []Volumes
		return ret
	}
	return o.Properties.volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonComponent) GetVolumesOk() ([]Volumes, bool) {
	if o == nil || utils.IsNil(o.Properties.volumes) {
		return nil, false
	}
	return o.Properties.volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *DaemonComponent) HasVolumes() bool {
	if o != nil && !utils.IsNil(o.Properties.volumes) {
		return true
	}

	return false
}

// Volumes gets a reference to the given []Volumes and assigns it to the volumes field.
// volumes:  Deprecated field, use volumeMounts instead.
func (o *DaemonComponent) Volumes(v []Volumes) *DaemonComponent {
	o.Properties.volumes = v
	return o
}

func (o DaemonSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaemonSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addRevisionLabel"] = o.addRevisionLabel
	if !utils.IsNil(o.annotations) {
		toSerialize["annotations"] = o.annotations
	}
	if !utils.IsNil(o.cmd) {
		toSerialize["cmd"] = o.cmd
	}
	if !utils.IsNil(o.cpu) {
		toSerialize["cpu"] = o.cpu
	}
	if !utils.IsNil(o.env) {
		toSerialize["env"] = o.env
	}
	toSerialize["exposeType"] = o.exposeType
	if !utils.IsNil(o.hostAliases) {
		toSerialize["hostAliases"] = o.hostAliases
	}
	toSerialize["image"] = o.image
	if !utils.IsNil(o.imagePullPolicy) {
		toSerialize["imagePullPolicy"] = o.imagePullPolicy
	}
	if !utils.IsNil(o.imagePullSecrets) {
		toSerialize["imagePullSecrets"] = o.imagePullSecrets
	}
	if !utils.IsNil(o.labels) {
		toSerialize["labels"] = o.labels
	}
	if !utils.IsNil(o.livenessProbe) {
		toSerialize["livenessProbe"] = o.livenessProbe
	}
	if !utils.IsNil(o.memory) {
		toSerialize["memory"] = o.memory
	}
	if !utils.IsNil(o.port) {
		toSerialize["port"] = o.port
	}
	if !utils.IsNil(o.ports) {
		toSerialize["ports"] = o.ports
	}
	if !utils.IsNil(o.readinessProbe) {
		toSerialize["readinessProbe"] = o.readinessProbe
	}
	if !utils.IsNil(o.volumeMounts) {
		toSerialize["volumeMounts"] = o.volumeMounts
	}
	if !utils.IsNil(o.volumes) {
		toSerialize["volumes"] = o.volumes
	}
	return toSerialize, nil
}

type NullableDaemonSpec struct {
	value *DaemonSpec
	isSet bool
}

func (v NullableDaemonSpec) Get() *DaemonSpec {
	return v.value
}

func (v *NullableDaemonSpec) Set(val *DaemonSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDaemonSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDaemonSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaemonSpec(val *DaemonSpec) *NullableDaemonSpec {
	return &NullableDaemonSpec{value: val, isSet: true}
}

func (v NullableDaemonSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaemonSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const DaemonType = "daemon"

type DaemonComponent struct {
	Base       apis.ComponentBase
	Properties DaemonSpec
}

func Daemon(name string) *DaemonComponent {
	d := &DaemonComponent{Base: apis.ComponentBase{
		Name: name,
	}}
	return d
}

func (d *DaemonComponent) Build() common.ApplicationComponent {
	traits := make([]common.ApplicationTrait, 0)
	for _, trait := range d.Base.Traits {
		traits = append(traits, trait.Build())
	}
	res := common.ApplicationComponent{
		DependsOn:  d.Base.DependsOn,
		Inputs:     d.Base.Inputs,
		Name:       d.Base.Name,
		Outputs:    d.Base.Outputs,
		Properties: util.Object2RawExtension(d.Properties),
		Traits:     traits,
		Type:       DaemonType,
	}
	return res
}

func (d *DaemonComponent) AddTrait(traits ...apis.Trait) *DaemonComponent {
	d.Base.Traits = append(d.Base.Traits, traits...)
	return d
}

func (d *DaemonComponent) Name() string {
	return d.Base.Name
}

func (d *DaemonComponent) Type() string {
	return DaemonType
}
