/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mysql_exporter_server

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the MysqlExporterServerSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MysqlExporterServerSpec{}

// MysqlExporterServerSpec struct for MysqlExporterServerSpec
type MysqlExporterServerSpec struct {
	// Specify the CPU capacity of the Exporter collector.
	Cpu *string `json:"cpu,omitempty"`
	// Disable annotation means do not add the annotations for the exporter pod, and the Prometheus can not scrape it.
	DisableAnnotation *bool `json:"disableAnnotation,omitempty"`
	// Specify the Memory capacity of the Exporter collector.
	Memory *string `json:"memory,omitempty"`
	// Specify the host of the target Mysql server, maybe you could set the mysql component name.
	MysqlHost *string `json:"mysqlHost,omitempty"`
	// Specify the port of the target Mysql server.
	MysqlPort *int32 `json:"mysqlPort,omitempty"`
	// Specify the name of the Exporter.
	Name *string `json:"name,omitempty"`
	// Specify the password of the target Mysql server.
	Password *string `json:"password,omitempty"`
	// Specify the username of the target Mysql server.
	Username *string `json:"username,omitempty"`
	// Specify the version of the Exporter collector.
	Version *string `json:"version,omitempty"`
}

// NewMysqlExporterServerSpecWith instantiates a new MysqlExporterServerSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMysqlExporterServerSpecWith() *MysqlExporterServerSpec {
	this := MysqlExporterServerSpec{}
	var disableAnnotation bool = false
	this.DisableAnnotation = &disableAnnotation
	var mysqlHost string = "mysql-server"
	this.MysqlHost = &mysqlHost
	var mysqlPort int32 = 3306
	this.MysqlPort = &mysqlPort
	var name string = "mysql-server-exporter"
	this.Name = &name
	var version string = "v0.14.0"
	this.Version = &version
	return &this
}

// NewMysqlExporterServerSpec instantiates a new MysqlExporterServerSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlExporterServerSpec() *MysqlExporterServerSpec {
	this := MysqlExporterServerSpec{}
	var disableAnnotation bool = false
	this.DisableAnnotation = &disableAnnotation
	var mysqlHost string = "mysql-server"
	this.MysqlHost = &mysqlHost
	var mysqlPort int32 = 3306
	this.MysqlPort = &mysqlPort
	var name string = "mysql-server-exporter"
	this.Name = &name
	var version string = "v0.14.0"
	this.Version = &version
	return &this
}

// NewMysqlExporterServerSpecs converts a list MysqlExporterServerSpec pointers to objects.
// This is helpful when the SetMysqlExporterServerSpec requires a list of objects
func NewMysqlExporterServerSpecs(ps ...*MysqlExporterServerSpec) []MysqlExporterServerSpec {
	objs := []MysqlExporterServerSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *MysqlExporterServerComponent) GetCpu() string {
	if o == nil || utils.IsNil(o.Properties.Cpu) {
		var ret string
		return ret
	}
	return *o.Properties.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterServerComponent) GetCpuOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Cpu) {
		return nil, false
	}
	return o.Properties.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *MysqlExporterServerComponent) HasCpu() bool {
	if o != nil && !utils.IsNil(o.Properties.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given string and assigns it to the cpu field.
// Cpu:  Specify the CPU capacity of the Exporter collector.
func (o *MysqlExporterServerComponent) SetCpu(v string) *MysqlExporterServerComponent {
	o.Properties.Cpu = &v
	return o
}

// GetDisableAnnotation returns the DisableAnnotation field value if set, zero value otherwise.
func (o *MysqlExporterServerComponent) GetDisableAnnotation() bool {
	if o == nil || utils.IsNil(o.Properties.DisableAnnotation) {
		var ret bool
		return ret
	}
	return *o.Properties.DisableAnnotation
}

// GetDisableAnnotationOk returns a tuple with the DisableAnnotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterServerComponent) GetDisableAnnotationOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Properties.DisableAnnotation) {
		return nil, false
	}
	return o.Properties.DisableAnnotation, true
}

// HasDisableAnnotation returns a boolean if a field has been set.
func (o *MysqlExporterServerComponent) HasDisableAnnotation() bool {
	if o != nil && !utils.IsNil(o.Properties.DisableAnnotation) {
		return true
	}

	return false
}

// SetDisableAnnotation gets a reference to the given bool and assigns it to the disableAnnotation field.
// DisableAnnotation:  Disable annotation means do not add the annotations for the exporter pod, and the Prometheus can not scrape it.
func (o *MysqlExporterServerComponent) SetDisableAnnotation(v bool) *MysqlExporterServerComponent {
	o.Properties.DisableAnnotation = &v
	return o
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *MysqlExporterServerComponent) GetMemory() string {
	if o == nil || utils.IsNil(o.Properties.Memory) {
		var ret string
		return ret
	}
	return *o.Properties.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterServerComponent) GetMemoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Memory) {
		return nil, false
	}
	return o.Properties.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *MysqlExporterServerComponent) HasMemory() bool {
	if o != nil && !utils.IsNil(o.Properties.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given string and assigns it to the memory field.
// Memory:  Specify the Memory capacity of the Exporter collector.
func (o *MysqlExporterServerComponent) SetMemory(v string) *MysqlExporterServerComponent {
	o.Properties.Memory = &v
	return o
}

// GetMysqlHost returns the MysqlHost field value if set, zero value otherwise.
func (o *MysqlExporterServerComponent) GetMysqlHost() string {
	if o == nil || utils.IsNil(o.Properties.MysqlHost) {
		var ret string
		return ret
	}
	return *o.Properties.MysqlHost
}

// GetMysqlHostOk returns a tuple with the MysqlHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterServerComponent) GetMysqlHostOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.MysqlHost) {
		return nil, false
	}
	return o.Properties.MysqlHost, true
}

// HasMysqlHost returns a boolean if a field has been set.
func (o *MysqlExporterServerComponent) HasMysqlHost() bool {
	if o != nil && !utils.IsNil(o.Properties.MysqlHost) {
		return true
	}

	return false
}

// SetMysqlHost gets a reference to the given string and assigns it to the mysqlHost field.
// MysqlHost:  Specify the host of the target Mysql server, maybe you could set the mysql component name.
func (o *MysqlExporterServerComponent) SetMysqlHost(v string) *MysqlExporterServerComponent {
	o.Properties.MysqlHost = &v
	return o
}

// GetMysqlPort returns the MysqlPort field value if set, zero value otherwise.
func (o *MysqlExporterServerComponent) GetMysqlPort() int32 {
	if o == nil || utils.IsNil(o.Properties.MysqlPort) {
		var ret int32
		return ret
	}
	return *o.Properties.MysqlPort
}

// GetMysqlPortOk returns a tuple with the MysqlPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterServerComponent) GetMysqlPortOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.MysqlPort) {
		return nil, false
	}
	return o.Properties.MysqlPort, true
}

// HasMysqlPort returns a boolean if a field has been set.
func (o *MysqlExporterServerComponent) HasMysqlPort() bool {
	if o != nil && !utils.IsNil(o.Properties.MysqlPort) {
		return true
	}

	return false
}

// SetMysqlPort gets a reference to the given int32 and assigns it to the mysqlPort field.
// MysqlPort:  Specify the port of the target Mysql server.
func (o *MysqlExporterServerComponent) SetMysqlPort(v int32) *MysqlExporterServerComponent {
	o.Properties.MysqlPort = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MysqlExporterServerComponent) GetName() string {
	if o == nil || utils.IsNil(o.Properties.Name) {
		var ret string
		return ret
	}
	return *o.Properties.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterServerComponent) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Name) {
		return nil, false
	}
	return o.Properties.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MysqlExporterServerComponent) HasName() bool {
	if o != nil && !utils.IsNil(o.Properties.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the name field.
// Name:  Specify the name of the Exporter.
func (o *MysqlExporterServerComponent) SetName(v string) *MysqlExporterServerComponent {
	o.Properties.Name = &v
	return o
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *MysqlExporterServerComponent) GetPassword() string {
	if o == nil || utils.IsNil(o.Properties.Password) {
		var ret string
		return ret
	}
	return *o.Properties.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterServerComponent) GetPasswordOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Password) {
		return nil, false
	}
	return o.Properties.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *MysqlExporterServerComponent) HasPassword() bool {
	if o != nil && !utils.IsNil(o.Properties.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the password field.
// Password:  Specify the password of the target Mysql server.
func (o *MysqlExporterServerComponent) SetPassword(v string) *MysqlExporterServerComponent {
	o.Properties.Password = &v
	return o
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MysqlExporterServerComponent) GetUsername() string {
	if o == nil || utils.IsNil(o.Properties.Username) {
		var ret string
		return ret
	}
	return *o.Properties.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterServerComponent) GetUsernameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Username) {
		return nil, false
	}
	return o.Properties.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MysqlExporterServerComponent) HasUsername() bool {
	if o != nil && !utils.IsNil(o.Properties.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the username field.
// Username:  Specify the username of the target Mysql server.
func (o *MysqlExporterServerComponent) SetUsername(v string) *MysqlExporterServerComponent {
	o.Properties.Username = &v
	return o
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MysqlExporterServerComponent) GetVersion() string {
	if o == nil || utils.IsNil(o.Properties.Version) {
		var ret string
		return ret
	}
	return *o.Properties.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterServerComponent) GetVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Version) {
		return nil, false
	}
	return o.Properties.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MysqlExporterServerComponent) HasVersion() bool {
	if o != nil && !utils.IsNil(o.Properties.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the version field.
// Version:  Specify the version of the Exporter collector.
func (o *MysqlExporterServerComponent) SetVersion(v string) *MysqlExporterServerComponent {
	o.Properties.Version = &v
	return o
}

func (o MysqlExporterServerSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MysqlExporterServerSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !utils.IsNil(o.DisableAnnotation) {
		toSerialize["disableAnnotation"] = o.DisableAnnotation
	}
	if !utils.IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !utils.IsNil(o.MysqlHost) {
		toSerialize["mysqlHost"] = o.MysqlHost
	}
	if !utils.IsNil(o.MysqlPort) {
		toSerialize["mysqlPort"] = o.MysqlPort
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !utils.IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !utils.IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableMysqlExporterServerSpec struct {
	value *MysqlExporterServerSpec
	isSet bool
}

func (v NullableMysqlExporterServerSpec) Get() *MysqlExporterServerSpec {
	return v.value
}

func (v *NullableMysqlExporterServerSpec) Set(val *MysqlExporterServerSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableMysqlExporterServerSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableMysqlExporterServerSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMysqlExporterServerSpec(val *MysqlExporterServerSpec) *NullableMysqlExporterServerSpec {
	return &NullableMysqlExporterServerSpec{value: val, isSet: true}
}

func (v NullableMysqlExporterServerSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMysqlExporterServerSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const MysqlExporterServerType = "mysql-exporter-server"

func init() {
	sdkcommon.RegisterComponent(MysqlExporterServerType, FromComponent)
}

type MysqlExporterServerComponent struct {
	Base       apis.ComponentBase
	Properties MysqlExporterServerSpec
}

func MysqlExporterServer(name string) *MysqlExporterServerComponent {
	m := &MysqlExporterServerComponent{Base: apis.ComponentBase{
		Name: name,
		Type: MysqlExporterServerType,
	}}
	return m
}

func (m *MysqlExporterServerComponent) Build() common.ApplicationComponent {
	traits := make([]common.ApplicationTrait, 0)
	for _, trait := range m.Base.Traits {
		traits = append(traits, trait.Build())
	}
	res := common.ApplicationComponent{
		DependsOn:  m.Base.DependsOn,
		Inputs:     m.Base.Inputs,
		Name:       m.Base.Name,
		Outputs:    m.Base.Outputs,
		Properties: util.Object2RawExtension(m.Properties),
		Traits:     traits,
		Type:       MysqlExporterServerType,
	}
	return res
}

func (m *MysqlExporterServerComponent) FromComponent(from common.ApplicationComponent) (*MysqlExporterServerComponent, error) {
	for _, trait := range from.Traits {
		_t, err := sdkcommon.FromTrait(&trait)
		if err != nil {
			return nil, err
		}
		m.Base.Traits = append(m.Base.Traits, _t)
	}
	var properties MysqlExporterServerSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	m.Base.Name = from.Name
	m.Base.DependsOn = from.DependsOn
	m.Base.Inputs = from.Inputs
	m.Base.Outputs = from.Outputs
	m.Base.Type = MysqlExporterServerType
	m.Properties = properties
	return m, nil
}

func FromComponent(from common.ApplicationComponent) (apis.Component, error) {
	m := &MysqlExporterServerComponent{}
	return m.FromComponent(from)
}

func (m *MysqlExporterServerComponent) AddTrait(traits ...apis.Trait) *MysqlExporterServerComponent {
	m.Base.Traits = append(m.Base.Traits, traits...)
	return m
}

func (m *MysqlExporterServerComponent) GetTrait(_type string) apis.Trait {
	for _, _t := range m.Base.Traits {
		if _t.DefType() == _type {
			return _t
		}
	}
	return nil
}

func (m *MysqlExporterServerComponent) ComponentName() string {
	return m.Base.Name
}

func (m *MysqlExporterServerComponent) DefType() string {
	return MysqlExporterServerType
}

func (m *MysqlExporterServerComponent) DependsOn(dependsOn []string) *MysqlExporterServerComponent {
	m.Base.DependsOn = dependsOn
	return m
}

func (m *MysqlExporterServerComponent) Inputs(input common.StepInputs) *MysqlExporterServerComponent {
	m.Base.Inputs = input
	return m
}

func (m *MysqlExporterServerComponent) Outputs(output common.StepOutputs) *MysqlExporterServerComponent {
	m.Base.Outputs = output
	return m
}

func (m *MysqlExporterServerComponent) AddDependsOn(dependsOn string) *MysqlExporterServerComponent {
	m.Base.DependsOn = append(m.Base.DependsOn, dependsOn)
	return m
}
