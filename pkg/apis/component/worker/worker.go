/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worker

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the WorkerSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &WorkerSpec{}

// WorkerSpec struct for WorkerSpec
type WorkerSpec struct {
	// Commands to run in the container
	cmd []string `json:"cmd,omitempty"`
	// Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
	cpu *string `json:"cpu,omitempty"`
	// Define arguments by using environment variables
	env []Env `json:"env,omitempty"`
	// Which image would you like to use for your service +short=i
	image string `json:"image"`
	// Specify image pull policy for your service
	imagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	// Specify image pull secrets for your service
	imagePullSecrets []string     `json:"imagePullSecrets,omitempty"`
	livenessProbe    *HealthProbe `json:"livenessProbe,omitempty"`
	// Specifies the attributes of the memory resource required for the container.
	memory         *string       `json:"memory,omitempty"`
	readinessProbe *HealthProbe  `json:"readinessProbe,omitempty"`
	volumeMounts   *VolumeMounts `json:"volumeMounts,omitempty"`
	// Deprecated field, use volumeMounts instead.
	volumes []Volumes `json:"volumes,omitempty"`
}

// NewWorkerSpecWith instantiates a new WorkerSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkerSpecWith(image string) *WorkerSpec {
	this := WorkerSpec{}
	this.image = image
	return &this
}

// NewWorkerSpec instantiates a new WorkerSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkerSpec() *WorkerSpec {
	this := WorkerSpec{}
	return &this
}

// GetCmd returns the Cmd field value if set, zero value otherwise.
func (o *WorkerComponent) GetCmd() []string {
	if o == nil || utils.IsNil(o.Properties.cmd) {
		var ret []string
		return ret
	}
	return o.Properties.cmd
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetCmdOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.cmd) {
		return nil, false
	}
	return o.Properties.cmd, true
}

// HasCmd returns a boolean if a field has been set.
func (o *WorkerComponent) HasCmd() bool {
	if o != nil && !utils.IsNil(o.Properties.cmd) {
		return true
	}

	return false
}

// Cmd gets a reference to the given []string and assigns it to the cmd field.
// cmd:  Commands to run in the container
func (o *WorkerComponent) Cmd(v []string) *WorkerComponent {
	o.Properties.cmd = v
	return o
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *WorkerComponent) GetCpu() string {
	if o == nil || utils.IsNil(o.Properties.cpu) {
		var ret string
		return ret
	}
	return *o.Properties.cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetCpuOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.cpu) {
		return nil, false
	}
	return o.Properties.cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *WorkerComponent) HasCpu() bool {
	if o != nil && !utils.IsNil(o.Properties.cpu) {
		return true
	}

	return false
}

// Cpu gets a reference to the given string and assigns it to the cpu field.
// cpu:  Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
func (o *WorkerComponent) Cpu(v string) *WorkerComponent {
	o.Properties.cpu = &v
	return o
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *WorkerComponent) GetEnv() []Env {
	if o == nil || utils.IsNil(o.Properties.env) {
		var ret []Env
		return ret
	}
	return o.Properties.env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetEnvOk() ([]Env, bool) {
	if o == nil || utils.IsNil(o.Properties.env) {
		return nil, false
	}
	return o.Properties.env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *WorkerComponent) HasEnv() bool {
	if o != nil && !utils.IsNil(o.Properties.env) {
		return true
	}

	return false
}

// Env gets a reference to the given []Env and assigns it to the env field.
// env:  Define arguments by using environment variables
func (o *WorkerComponent) Env(v []Env) *WorkerComponent {
	o.Properties.env = v
	return o
}

// GetImage returns the Image field value
func (o *WorkerComponent) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.image, true
}

// Image sets field value
func (o *WorkerComponent) Image(v string) *WorkerComponent {
	o.Properties.image = v
	return o
}

// GetImagePullPolicy returns the ImagePullPolicy field value if set, zero value otherwise.
func (o *WorkerComponent) GetImagePullPolicy() string {
	if o == nil || utils.IsNil(o.Properties.imagePullPolicy) {
		var ret string
		return ret
	}
	return *o.Properties.imagePullPolicy
}

// GetImagePullPolicyOk returns a tuple with the ImagePullPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetImagePullPolicyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.imagePullPolicy) {
		return nil, false
	}
	return o.Properties.imagePullPolicy, true
}

// HasImagePullPolicy returns a boolean if a field has been set.
func (o *WorkerComponent) HasImagePullPolicy() bool {
	if o != nil && !utils.IsNil(o.Properties.imagePullPolicy) {
		return true
	}

	return false
}

// ImagePullPolicy gets a reference to the given string and assigns it to the imagePullPolicy field.
// imagePullPolicy:  Specify image pull policy for your service
func (o *WorkerComponent) ImagePullPolicy(v string) *WorkerComponent {
	o.Properties.imagePullPolicy = &v
	return o
}

// GetImagePullSecrets returns the ImagePullSecrets field value if set, zero value otherwise.
func (o *WorkerComponent) GetImagePullSecrets() []string {
	if o == nil || utils.IsNil(o.Properties.imagePullSecrets) {
		var ret []string
		return ret
	}
	return o.Properties.imagePullSecrets
}

// GetImagePullSecretsOk returns a tuple with the ImagePullSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetImagePullSecretsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.imagePullSecrets) {
		return nil, false
	}
	return o.Properties.imagePullSecrets, true
}

// HasImagePullSecrets returns a boolean if a field has been set.
func (o *WorkerComponent) HasImagePullSecrets() bool {
	if o != nil && !utils.IsNil(o.Properties.imagePullSecrets) {
		return true
	}

	return false
}

// ImagePullSecrets gets a reference to the given []string and assigns it to the imagePullSecrets field.
// imagePullSecrets:  Specify image pull secrets for your service
func (o *WorkerComponent) ImagePullSecrets(v []string) *WorkerComponent {
	o.Properties.imagePullSecrets = v
	return o
}

// GetLivenessProbe returns the LivenessProbe field value if set, zero value otherwise.
func (o *WorkerComponent) GetLivenessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.Properties.livenessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.Properties.livenessProbe
}

// GetLivenessProbeOk returns a tuple with the LivenessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetLivenessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.Properties.livenessProbe) {
		return nil, false
	}
	return o.Properties.livenessProbe, true
}

// HasLivenessProbe returns a boolean if a field has been set.
func (o *WorkerComponent) HasLivenessProbe() bool {
	if o != nil && !utils.IsNil(o.Properties.livenessProbe) {
		return true
	}

	return false
}

// LivenessProbe gets a reference to the given HealthProbe and assigns it to the livenessProbe field.
// livenessProbe:
func (o *WorkerComponent) LivenessProbe(v HealthProbe) *WorkerComponent {
	o.Properties.livenessProbe = &v
	return o
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *WorkerComponent) GetMemory() string {
	if o == nil || utils.IsNil(o.Properties.memory) {
		var ret string
		return ret
	}
	return *o.Properties.memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetMemoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.memory) {
		return nil, false
	}
	return o.Properties.memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *WorkerComponent) HasMemory() bool {
	if o != nil && !utils.IsNil(o.Properties.memory) {
		return true
	}

	return false
}

// Memory gets a reference to the given string and assigns it to the memory field.
// memory:  Specifies the attributes of the memory resource required for the container.
func (o *WorkerComponent) Memory(v string) *WorkerComponent {
	o.Properties.memory = &v
	return o
}

// GetReadinessProbe returns the ReadinessProbe field value if set, zero value otherwise.
func (o *WorkerComponent) GetReadinessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.Properties.readinessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.Properties.readinessProbe
}

// GetReadinessProbeOk returns a tuple with the ReadinessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetReadinessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.Properties.readinessProbe) {
		return nil, false
	}
	return o.Properties.readinessProbe, true
}

// HasReadinessProbe returns a boolean if a field has been set.
func (o *WorkerComponent) HasReadinessProbe() bool {
	if o != nil && !utils.IsNil(o.Properties.readinessProbe) {
		return true
	}

	return false
}

// ReadinessProbe gets a reference to the given HealthProbe and assigns it to the readinessProbe field.
// readinessProbe:
func (o *WorkerComponent) ReadinessProbe(v HealthProbe) *WorkerComponent {
	o.Properties.readinessProbe = &v
	return o
}

// GetVolumeMounts returns the VolumeMounts field value if set, zero value otherwise.
func (o *WorkerComponent) GetVolumeMounts() VolumeMounts {
	if o == nil || utils.IsNil(o.Properties.volumeMounts) {
		var ret VolumeMounts
		return ret
	}
	return *o.Properties.volumeMounts
}

// GetVolumeMountsOk returns a tuple with the VolumeMounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetVolumeMountsOk() (*VolumeMounts, bool) {
	if o == nil || utils.IsNil(o.Properties.volumeMounts) {
		return nil, false
	}
	return o.Properties.volumeMounts, true
}

// HasVolumeMounts returns a boolean if a field has been set.
func (o *WorkerComponent) HasVolumeMounts() bool {
	if o != nil && !utils.IsNil(o.Properties.volumeMounts) {
		return true
	}

	return false
}

// VolumeMounts gets a reference to the given VolumeMounts and assigns it to the volumeMounts field.
// volumeMounts:
func (o *WorkerComponent) VolumeMounts(v VolumeMounts) *WorkerComponent {
	o.Properties.volumeMounts = &v
	return o
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *WorkerComponent) GetVolumes() []Volumes {
	if o == nil || utils.IsNil(o.Properties.volumes) {
		var ret []Volumes
		return ret
	}
	return o.Properties.volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerComponent) GetVolumesOk() ([]Volumes, bool) {
	if o == nil || utils.IsNil(o.Properties.volumes) {
		return nil, false
	}
	return o.Properties.volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *WorkerComponent) HasVolumes() bool {
	if o != nil && !utils.IsNil(o.Properties.volumes) {
		return true
	}

	return false
}

// Volumes gets a reference to the given []Volumes and assigns it to the volumes field.
// volumes:  Deprecated field, use volumeMounts instead.
func (o *WorkerComponent) Volumes(v []Volumes) *WorkerComponent {
	o.Properties.volumes = v
	return o
}

func (o WorkerSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkerSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.cmd) {
		toSerialize["cmd"] = o.cmd
	}
	if !utils.IsNil(o.cpu) {
		toSerialize["cpu"] = o.cpu
	}
	if !utils.IsNil(o.env) {
		toSerialize["env"] = o.env
	}
	toSerialize["image"] = o.image
	if !utils.IsNil(o.imagePullPolicy) {
		toSerialize["imagePullPolicy"] = o.imagePullPolicy
	}
	if !utils.IsNil(o.imagePullSecrets) {
		toSerialize["imagePullSecrets"] = o.imagePullSecrets
	}
	if !utils.IsNil(o.livenessProbe) {
		toSerialize["livenessProbe"] = o.livenessProbe
	}
	if !utils.IsNil(o.memory) {
		toSerialize["memory"] = o.memory
	}
	if !utils.IsNil(o.readinessProbe) {
		toSerialize["readinessProbe"] = o.readinessProbe
	}
	if !utils.IsNil(o.volumeMounts) {
		toSerialize["volumeMounts"] = o.volumeMounts
	}
	if !utils.IsNil(o.volumes) {
		toSerialize["volumes"] = o.volumes
	}
	return toSerialize, nil
}

type NullableWorkerSpec struct {
	value *WorkerSpec
	isSet bool
}

func (v NullableWorkerSpec) Get() *WorkerSpec {
	return v.value
}

func (v *NullableWorkerSpec) Set(val *WorkerSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerSpec(val *WorkerSpec) *NullableWorkerSpec {
	return &NullableWorkerSpec{value: val, isSet: true}
}

func (v NullableWorkerSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const WorkerType = "worker"

func init() {
	sdkcommon.RegisterComponent(WorkerType, FromComponent)
}

type WorkerComponent struct {
	Base       apis.ComponentBase
	Properties WorkerSpec
}

func Worker(name string) *WorkerComponent {
	w := &WorkerComponent{Base: apis.ComponentBase{
		Name: name,
	}}
	return w
}

func (w *WorkerComponent) Build() common.ApplicationComponent {
	traits := make([]common.ApplicationTrait, 0)
	for _, trait := range w.Base.Traits {
		traits = append(traits, trait.Build())
	}
	res := common.ApplicationComponent{
		DependsOn:  w.Base.DependsOn,
		Inputs:     w.Base.Inputs,
		Name:       w.Base.Name,
		Outputs:    w.Base.Outputs,
		Properties: util.Object2RawExtension(w.Properties),
		Traits:     traits,
		Type:       WorkerType,
	}
	return res
}

func (w *WorkerComponent) FromComponent(from common.ApplicationComponent) (*WorkerComponent, error) {
	for _, trait := range from.Traits {
		_t, err := sdkcommon.FromTrait(&trait)
		if err != nil {
			return nil, err
		}
		w.Base.Traits = append(w.Base.Traits, _t)
	}
	var properties WorkerSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	w.Base.Name = from.Name
	w.Base.DependsOn = from.DependsOn
	w.Base.Inputs = from.Inputs
	w.Base.Outputs = from.Outputs
	w.Properties = properties
	return w, nil
}

func FromComponent(from common.ApplicationComponent) (apis.Component, error) {
	w := &WorkerComponent{}
	return w.FromComponent(from)
}

func (w *WorkerComponent) AddTrait(traits ...apis.Trait) *WorkerComponent {
	w.Base.Traits = append(w.Base.Traits, traits...)
	return w
}

func (w *WorkerComponent) DefName() string {
	return w.Base.Name
}

func (w *WorkerComponent) DefType() string {
	return WorkerType
}
