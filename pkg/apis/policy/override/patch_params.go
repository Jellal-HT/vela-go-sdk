/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package override

import (
	"encoding/json"

	"vela-go-sdk/pkg/apis/utils"
)

// checks if the PatchParams type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PatchParams{}

// PatchParams struct for PatchParams
type PatchParams struct {
	// Specify the name of the patch component, if empty, all components will be merged
	name *string `json:"name,omitempty"`
	// Specify the properties to override.
	properties map[string]interface{} `json:"properties,omitempty"`
	// Specify the traits to override.
	traits []Traits `json:"traits,omitempty"`
	// Specify the type of the patch component.
	type_ *string `json:"type,omitempty"`
}

// NewPatchParamsWith instantiates a new PatchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchParamsWith() *PatchParams {
	this := PatchParams{}
	return &this
}

// NewPatchParams instantiates a new PatchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchParams() *PatchParams {
	this := PatchParams{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchParams) GetName() string {
	if o == nil || utils.IsNil(o.name) {
		var ret string
		return ret
	}
	return *o.name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.name) {
		return nil, false
	}
	return o.name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchParams) HasName() bool {
	if o != nil && !utils.IsNil(o.name) {
		return true
	}

	return false
}

// Name gets a reference to the given string and assigns it to the name field.
// name:  Specify the name of the patch component, if empty, all components will be merged
func (o *PatchParams) Name(v string) *PatchParams {
	o.name = &v
	return o
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *PatchParams) GetProperties() map[string]interface{} {
	if o == nil || utils.IsNil(o.properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.properties) {
		return map[string]interface{}{}, false
	}
	return o.properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *PatchParams) HasProperties() bool {
	if o != nil && !utils.IsNil(o.properties) {
		return true
	}

	return false
}

// Properties gets a reference to the given map[string]interface{} and assigns it to the properties field.
// properties:  Specify the properties to override.
func (o *PatchParams) Properties(v map[string]interface{}) *PatchParams {
	o.properties = v
	return o
}

// GetTraits returns the Traits field value if set, zero value otherwise.
func (o *PatchParams) GetTraits() []Traits {
	if o == nil || utils.IsNil(o.traits) {
		var ret []Traits
		return ret
	}
	return o.traits
}

// GetTraitsOk returns a tuple with the Traits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetTraitsOk() ([]Traits, bool) {
	if o == nil || utils.IsNil(o.traits) {
		return nil, false
	}
	return o.traits, true
}

// HasTraits returns a boolean if a field has been set.
func (o *PatchParams) HasTraits() bool {
	if o != nil && !utils.IsNil(o.traits) {
		return true
	}

	return false
}

// Traits gets a reference to the given []Traits and assigns it to the traits field.
// traits:  Specify the traits to override.
func (o *PatchParams) Traits(v []Traits) *PatchParams {
	o.traits = v
	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PatchParams) GetType() string {
	if o == nil || utils.IsNil(o.type_) {
		var ret string
		return ret
	}
	return *o.type_
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.type_) {
		return nil, false
	}
	return o.type_, true
}

// HasType returns a boolean if a field has been set.
func (o *PatchParams) HasType() bool {
	if o != nil && !utils.IsNil(o.type_) {
		return true
	}

	return false
}

// Type gets a reference to the given string and assigns it to the type_ field.
// type_:  Specify the type of the patch component.
func (o *PatchParams) Type(v string) *PatchParams {
	o.type_ = &v
	return o
}

func (o PatchParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !utils.IsNil(o.properties) {
		toSerialize["properties"] = o.properties
	}
	if !utils.IsNil(o.traits) {
		toSerialize["traits"] = o.traits
	}
	if !utils.IsNil(o.type_) {
		toSerialize["type"] = o.type_
	}
	return toSerialize, nil
}

type NullablePatchParams struct {
	value *PatchParams
	isSet bool
}

func (v NullablePatchParams) Get() *PatchParams {
	return v.value
}

func (v *NullablePatchParams) Set(val *PatchParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchParams(val *PatchParams) *NullablePatchParams {
	return &NullablePatchParams{value: val, isSet: true}
}

func (v NullablePatchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
