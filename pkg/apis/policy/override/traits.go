/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package override

import (
	"encoding/json"

	"vela-go-sdk/pkg/apis/utils"
)

// checks if the Traits type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Traits{}

// Traits struct for Traits
type Traits struct {
	// Specify if the trait should be remove, default false
	disable bool `json:"disable"`
	// Specify the properties to override.
	properties map[string]interface{} `json:"properties,omitempty"`
	// Specify the type of the trait to be patched.
	type_ string `json:"type"`
}

// NewTraitsWith instantiates a new Traits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraitsWith(disable bool, type_ string) *Traits {
	this := Traits{}
	this.disable = disable
	this.type_ = type_
	return &this
}

// NewTraits instantiates a new Traits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraits() *Traits {
	this := Traits{}
	var disable bool = false
	this.disable = disable
	return &this
}

// GetDisable returns the Disable field value
func (o *Traits) GetDisable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.disable
}

// GetDisableOk returns a tuple with the Disable field value
// and a boolean to check if the value has been set.
func (o *Traits) GetDisableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.disable, true
}

// Disable sets field value
func (o *Traits) Disable(v bool) *Traits {
	o.disable = v
	return o
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Traits) GetProperties() map[string]interface{} {
	if o == nil || utils.IsNil(o.properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Traits) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.properties) {
		return map[string]interface{}{}, false
	}
	return o.properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Traits) HasProperties() bool {
	if o != nil && !utils.IsNil(o.properties) {
		return true
	}

	return false
}

// Properties gets a reference to the given map[string]interface{} and assigns it to the properties field.
// properties:  Specify the properties to override.
func (o *Traits) Properties(v map[string]interface{}) *Traits {
	o.properties = v
	return o
}

// GetType returns the Type field value
func (o *Traits) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.type_
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Traits) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.type_, true
}

// Type sets field value
func (o *Traits) Type(v string) *Traits {
	o.type_ = v
	return o
}

func (o Traits) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Traits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disable"] = o.disable
	if !utils.IsNil(o.properties) {
		toSerialize["properties"] = o.properties
	}
	toSerialize["type"] = o.type_
	return toSerialize, nil
}

type NullableTraits struct {
	value *Traits
	isSet bool
}

func (v NullableTraits) Get() *Traits {
	return v.value
}

func (v *NullableTraits) Set(val *Traits) {
	v.value = val
	v.isSet = true
}

func (v NullableTraits) IsSet() bool {
	return v.isSet
}

func (v *NullableTraits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraits(val *Traits) *NullableTraits {
	return &NullableTraits{value: val, isSet: true}
}

func (v NullableTraits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
