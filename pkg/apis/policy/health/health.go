/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package health

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the HealthSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &HealthSpec{}

// HealthSpec struct for HealthSpec
type HealthSpec struct {
	// Specify health checking interval(seconds), default 30s
	probeInterval int32 `json:"probeInterval"`
	// Specify health checking timeout(seconds), default 10s
	probeTimeout int32 `json:"probeTimeout"`
}

// NewHealthSpecWith instantiates a new HealthSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthSpecWith(probeInterval int32, probeTimeout int32) *HealthSpec {
	this := HealthSpec{}
	this.probeInterval = probeInterval
	this.probeTimeout = probeTimeout
	return &this
}

// NewHealthSpec instantiates a new HealthSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthSpec() *HealthSpec {
	this := HealthSpec{}
	var probeInterval int32 = 30
	this.probeInterval = probeInterval
	var probeTimeout int32 = 10
	this.probeTimeout = probeTimeout
	return &this
}

// GetProbeInterval returns the ProbeInterval field value
func (o *HealthPolicy) GetProbeInterval() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Properties.probeInterval
}

// GetProbeIntervalOk returns a tuple with the ProbeInterval field value
// and a boolean to check if the value has been set.
func (o *HealthPolicy) GetProbeIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.probeInterval, true
}

// ProbeInterval sets field value
func (o *HealthPolicy) ProbeInterval(v int32) *HealthPolicy {
	o.Properties.probeInterval = v
	return o
}

// GetProbeTimeout returns the ProbeTimeout field value
func (o *HealthPolicy) GetProbeTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Properties.probeTimeout
}

// GetProbeTimeoutOk returns a tuple with the ProbeTimeout field value
// and a boolean to check if the value has been set.
func (o *HealthPolicy) GetProbeTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.probeTimeout, true
}

// ProbeTimeout sets field value
func (o *HealthPolicy) ProbeTimeout(v int32) *HealthPolicy {
	o.Properties.probeTimeout = v
	return o
}

func (o HealthSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["probeInterval"] = o.probeInterval
	toSerialize["probeTimeout"] = o.probeTimeout
	return toSerialize, nil
}

type NullableHealthSpec struct {
	value *HealthSpec
	isSet bool
}

func (v NullableHealthSpec) Get() *HealthSpec {
	return v.value
}

func (v *NullableHealthSpec) Set(val *HealthSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthSpec(val *HealthSpec) *NullableHealthSpec {
	return &NullableHealthSpec{value: val, isSet: true}
}

func (v NullableHealthSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const HealthType = "health"

func init() {
	sdkcommon.RegisterPolicy(HealthType, FromPolicy)
}

type HealthPolicy struct {
	Base       apis.PolicyBase
	Properties HealthSpec
}

func Health(name string) *HealthPolicy {
	h := &HealthPolicy{Base: apis.PolicyBase{
		Name: name,
		Type: HealthType,
	}}
	return h
}

func (h *HealthPolicy) Build() v1beta1.AppPolicy {
	res := v1beta1.AppPolicy{
		Name:       h.Base.Name,
		Properties: util.Object2RawExtension(h.Properties),
		Type:       HealthType,
	}
	return res
}

func (h *HealthPolicy) FromPolicy(from v1beta1.AppPolicy) (*HealthPolicy, error) {
	var properties HealthSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	h.Base.Name = from.Name
	h.Properties = properties
	return h, nil
}

func FromPolicy(from v1beta1.AppPolicy) (apis.Policy, error) {
	h := &HealthPolicy{}
	return h.FromPolicy(from)
}

func (h *HealthPolicy) DefType() string {
	return HealthType
}
