/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nocalhost

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the NocalhostSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NocalhostSpec{}

// NocalhostSpec struct for NocalhostSpec
type NocalhostSpec struct {
	command              Command                `json:"command"`
	debug                *Debug                 `json:"debug,omitempty"`
	env                  []Env                  `json:"env,omitempty"`
	gitUrl               *string                `json:"gitUrl,omitempty"`
	hotReload            bool                   `json:"hotReload"`
	image                Image                  `json:"image"`
	persistentVolumeDirs []PersistentVolumeDirs `json:"persistentVolumeDirs,omitempty"`
	port                 int32                  `json:"port"`
	portForward          []string               `json:"portForward,omitempty"`
	resources            Resources              `json:"resources"`
	serviceType          string                 `json:"serviceType"`
	shell                string                 `json:"shell"`
	storageClass         *string                `json:"storageClass,omitempty"`
	sync                 Sync                   `json:"sync"`
	workDir              string                 `json:"workDir"`
}

// NewNocalhostSpecWith instantiates a new NocalhostSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNocalhostSpecWith(command Command, hotReload bool, image Image, port int32, resources Resources, serviceType string, shell string, sync Sync, workDir string) *NocalhostSpec {
	this := NocalhostSpec{}
	this.command = command
	this.hotReload = hotReload
	this.image = image
	this.port = port
	this.resources = resources
	this.serviceType = serviceType
	this.shell = shell
	this.sync = sync
	this.workDir = workDir
	return &this
}

// NewNocalhostSpec instantiates a new NocalhostSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNocalhostSpec() *NocalhostSpec {
	this := NocalhostSpec{}
	var hotReload bool = true
	this.hotReload = hotReload
	var serviceType string = "deployment"
	this.serviceType = serviceType
	var shell string = "bash"
	this.shell = shell
	var workDir string = "/home/nocalhost-dev"
	this.workDir = workDir
	return &this
}

// GetCommand returns the Command field value
func (o *NocalhostTrait) GetCommand() Command {
	if o == nil {
		var ret Command
		return ret
	}

	return o.Properties.command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetCommandOk() (*Command, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.command, true
}

// Command sets field value
func (o *NocalhostTrait) Command(v Command) *NocalhostTrait {
	o.Properties.command = v
	return o
}

// GetDebug returns the Debug field value if set, zero value otherwise.
func (o *NocalhostTrait) GetDebug() Debug {
	if o == nil || utils.IsNil(o.Properties.debug) {
		var ret Debug
		return ret
	}
	return *o.Properties.debug
}

// GetDebugOk returns a tuple with the Debug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetDebugOk() (*Debug, bool) {
	if o == nil || utils.IsNil(o.Properties.debug) {
		return nil, false
	}
	return o.Properties.debug, true
}

// HasDebug returns a boolean if a field has been set.
func (o *NocalhostTrait) HasDebug() bool {
	if o != nil && !utils.IsNil(o.Properties.debug) {
		return true
	}

	return false
}

// Debug gets a reference to the given Debug and assigns it to the debug field.
// debug:
func (o *NocalhostTrait) Debug(v Debug) *NocalhostTrait {
	o.Properties.debug = &v
	return o
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *NocalhostTrait) GetEnv() []Env {
	if o == nil || utils.IsNil(o.Properties.env) {
		var ret []Env
		return ret
	}
	return o.Properties.env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetEnvOk() ([]Env, bool) {
	if o == nil || utils.IsNil(o.Properties.env) {
		return nil, false
	}
	return o.Properties.env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *NocalhostTrait) HasEnv() bool {
	if o != nil && !utils.IsNil(o.Properties.env) {
		return true
	}

	return false
}

// Env gets a reference to the given []Env and assigns it to the env field.
// env:
func (o *NocalhostTrait) Env(v []Env) *NocalhostTrait {
	o.Properties.env = v
	return o
}

// GetGitUrl returns the GitUrl field value if set, zero value otherwise.
func (o *NocalhostTrait) GetGitUrl() string {
	if o == nil || utils.IsNil(o.Properties.gitUrl) {
		var ret string
		return ret
	}
	return *o.Properties.gitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetGitUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.gitUrl) {
		return nil, false
	}
	return o.Properties.gitUrl, true
}

// HasGitUrl returns a boolean if a field has been set.
func (o *NocalhostTrait) HasGitUrl() bool {
	if o != nil && !utils.IsNil(o.Properties.gitUrl) {
		return true
	}

	return false
}

// GitUrl gets a reference to the given string and assigns it to the gitUrl field.
// gitUrl:
func (o *NocalhostTrait) GitUrl(v string) *NocalhostTrait {
	o.Properties.gitUrl = &v
	return o
}

// GetHotReload returns the HotReload field value
func (o *NocalhostTrait) GetHotReload() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Properties.hotReload
}

// GetHotReloadOk returns a tuple with the HotReload field value
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetHotReloadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.hotReload, true
}

// HotReload sets field value
func (o *NocalhostTrait) HotReload(v bool) *NocalhostTrait {
	o.Properties.hotReload = v
	return o
}

// GetImage returns the Image field value
func (o *NocalhostTrait) GetImage() Image {
	if o == nil {
		var ret Image
		return ret
	}

	return o.Properties.image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetImageOk() (*Image, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.image, true
}

// Image sets field value
func (o *NocalhostTrait) Image(v Image) *NocalhostTrait {
	o.Properties.image = v
	return o
}

// GetPersistentVolumeDirs returns the PersistentVolumeDirs field value if set, zero value otherwise.
func (o *NocalhostTrait) GetPersistentVolumeDirs() []PersistentVolumeDirs {
	if o == nil || utils.IsNil(o.Properties.persistentVolumeDirs) {
		var ret []PersistentVolumeDirs
		return ret
	}
	return o.Properties.persistentVolumeDirs
}

// GetPersistentVolumeDirsOk returns a tuple with the PersistentVolumeDirs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetPersistentVolumeDirsOk() ([]PersistentVolumeDirs, bool) {
	if o == nil || utils.IsNil(o.Properties.persistentVolumeDirs) {
		return nil, false
	}
	return o.Properties.persistentVolumeDirs, true
}

// HasPersistentVolumeDirs returns a boolean if a field has been set.
func (o *NocalhostTrait) HasPersistentVolumeDirs() bool {
	if o != nil && !utils.IsNil(o.Properties.persistentVolumeDirs) {
		return true
	}

	return false
}

// PersistentVolumeDirs gets a reference to the given []PersistentVolumeDirs and assigns it to the persistentVolumeDirs field.
// persistentVolumeDirs:
func (o *NocalhostTrait) PersistentVolumeDirs(v []PersistentVolumeDirs) *NocalhostTrait {
	o.Properties.persistentVolumeDirs = v
	return o
}

// GetPort returns the Port field value
func (o *NocalhostTrait) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Properties.port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.port, true
}

// Port sets field value
func (o *NocalhostTrait) Port(v int32) *NocalhostTrait {
	o.Properties.port = v
	return o
}

// GetPortForward returns the PortForward field value if set, zero value otherwise.
func (o *NocalhostTrait) GetPortForward() []string {
	if o == nil || utils.IsNil(o.Properties.portForward) {
		var ret []string
		return ret
	}
	return o.Properties.portForward
}

// GetPortForwardOk returns a tuple with the PortForward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetPortForwardOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.portForward) {
		return nil, false
	}
	return o.Properties.portForward, true
}

// HasPortForward returns a boolean if a field has been set.
func (o *NocalhostTrait) HasPortForward() bool {
	if o != nil && !utils.IsNil(o.Properties.portForward) {
		return true
	}

	return false
}

// PortForward gets a reference to the given []string and assigns it to the portForward field.
// portForward:
func (o *NocalhostTrait) PortForward(v []string) *NocalhostTrait {
	o.Properties.portForward = v
	return o
}

// GetResources returns the Resources field value
func (o *NocalhostTrait) GetResources() Resources {
	if o == nil {
		var ret Resources
		return ret
	}

	return o.Properties.resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetResourcesOk() (*Resources, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.resources, true
}

// Resources sets field value
func (o *NocalhostTrait) Resources(v Resources) *NocalhostTrait {
	o.Properties.resources = v
	return o
}

// GetServiceType returns the ServiceType field value
func (o *NocalhostTrait) GetServiceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.serviceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetServiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.serviceType, true
}

// ServiceType sets field value
func (o *NocalhostTrait) ServiceType(v string) *NocalhostTrait {
	o.Properties.serviceType = v
	return o
}

// GetShell returns the Shell field value
func (o *NocalhostTrait) GetShell() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.shell
}

// GetShellOk returns a tuple with the Shell field value
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetShellOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.shell, true
}

// Shell sets field value
func (o *NocalhostTrait) Shell(v string) *NocalhostTrait {
	o.Properties.shell = v
	return o
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *NocalhostTrait) GetStorageClass() string {
	if o == nil || utils.IsNil(o.Properties.storageClass) {
		var ret string
		return ret
	}
	return *o.Properties.storageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetStorageClassOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.storageClass) {
		return nil, false
	}
	return o.Properties.storageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *NocalhostTrait) HasStorageClass() bool {
	if o != nil && !utils.IsNil(o.Properties.storageClass) {
		return true
	}

	return false
}

// StorageClass gets a reference to the given string and assigns it to the storageClass field.
// storageClass:
func (o *NocalhostTrait) StorageClass(v string) *NocalhostTrait {
	o.Properties.storageClass = &v
	return o
}

// GetSync returns the Sync field value
func (o *NocalhostTrait) GetSync() Sync {
	if o == nil {
		var ret Sync
		return ret
	}

	return o.Properties.sync
}

// GetSyncOk returns a tuple with the Sync field value
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetSyncOk() (*Sync, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.sync, true
}

// Sync sets field value
func (o *NocalhostTrait) Sync(v Sync) *NocalhostTrait {
	o.Properties.sync = v
	return o
}

// GetWorkDir returns the WorkDir field value
func (o *NocalhostTrait) GetWorkDir() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.workDir
}

// GetWorkDirOk returns a tuple with the WorkDir field value
// and a boolean to check if the value has been set.
func (o *NocalhostTrait) GetWorkDirOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.workDir, true
}

// WorkDir sets field value
func (o *NocalhostTrait) WorkDir(v string) *NocalhostTrait {
	o.Properties.workDir = v
	return o
}

func (o NocalhostSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NocalhostSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["command"] = o.command
	if !utils.IsNil(o.debug) {
		toSerialize["debug"] = o.debug
	}
	if !utils.IsNil(o.env) {
		toSerialize["env"] = o.env
	}
	if !utils.IsNil(o.gitUrl) {
		toSerialize["gitUrl"] = o.gitUrl
	}
	toSerialize["hotReload"] = o.hotReload
	toSerialize["image"] = o.image
	if !utils.IsNil(o.persistentVolumeDirs) {
		toSerialize["persistentVolumeDirs"] = o.persistentVolumeDirs
	}
	toSerialize["port"] = o.port
	if !utils.IsNil(o.portForward) {
		toSerialize["portForward"] = o.portForward
	}
	toSerialize["resources"] = o.resources
	toSerialize["serviceType"] = o.serviceType
	toSerialize["shell"] = o.shell
	if !utils.IsNil(o.storageClass) {
		toSerialize["storageClass"] = o.storageClass
	}
	toSerialize["sync"] = o.sync
	toSerialize["workDir"] = o.workDir
	return toSerialize, nil
}

type NullableNocalhostSpec struct {
	value *NocalhostSpec
	isSet bool
}

func (v NullableNocalhostSpec) Get() *NocalhostSpec {
	return v.value
}

func (v *NullableNocalhostSpec) Set(val *NocalhostSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNocalhostSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNocalhostSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNocalhostSpec(val *NocalhostSpec) *NullableNocalhostSpec {
	return &NullableNocalhostSpec{value: val, isSet: true}
}

func (v NullableNocalhostSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNocalhostSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const NocalhostType = "nocalhost"

type NocalhostTrait struct {
	Base       apis.TraitBase
	Properties NocalhostSpec
}

func Nocalhost() *NocalhostTrait {
	n := &NocalhostTrait{Base: apis.TraitBase{}}
	return n
}

func (n *NocalhostTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(n.Properties),
		Type:       NocalhostType,
	}
	return res
}

func (n *NocalhostTrait) Type() string {
	return NocalhostType
}
