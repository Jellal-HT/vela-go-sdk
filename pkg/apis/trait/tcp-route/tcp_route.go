/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tcp_route

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the TcpRouteSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TcpRouteSpec{}

// TcpRouteSpec struct for TcpRouteSpec
type TcpRouteSpec struct {
	// Specify the TCP matchers
	Rules []Rules `json:"rules,omitempty"`
}

// NewTcpRouteSpecWith instantiates a new TcpRouteSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTcpRouteSpecWith() *TcpRouteSpec {
	this := TcpRouteSpec{}
	return &this
}

// NewTcpRouteSpec instantiates a new TcpRouteSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTcpRouteSpec() *TcpRouteSpec {
	this := TcpRouteSpec{}
	return &this
}

// NewTcpRouteSpecs converts a list TcpRouteSpec pointers to objects.
// This is helpful when the SetTcpRouteSpec requires a list of objects
func NewTcpRouteSpecs(ps ...*TcpRouteSpec) []TcpRouteSpec {
	objs := []TcpRouteSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *TCPRouteTrait) GetRules() []Rules {
	if o == nil || utils.IsNil(o.Properties.Rules) {
		var ret []Rules
		return ret
	}
	return o.Properties.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TCPRouteTrait) GetRulesOk() ([]Rules, bool) {
	if o == nil || utils.IsNil(o.Properties.Rules) {
		return nil, false
	}
	return o.Properties.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *TCPRouteTrait) HasRules() bool {
	if o != nil && !utils.IsNil(o.Properties.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []Rules and assigns it to the rules field.
// Rules:  Specify the TCP matchers
func (o *TCPRouteTrait) SetRules(v []Rules) *TCPRouteTrait {
	o.Properties.Rules = v
	return o
}

func (o TcpRouteSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TcpRouteSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableTcpRouteSpec struct {
	value *TcpRouteSpec
	isSet bool
}

func (v NullableTcpRouteSpec) Get() *TcpRouteSpec {
	return v.value
}

func (v *NullableTcpRouteSpec) Set(val *TcpRouteSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTcpRouteSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTcpRouteSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTcpRouteSpec(val *TcpRouteSpec) *NullableTcpRouteSpec {
	return &NullableTcpRouteSpec{value: val, isSet: true}
}

func (v NullableTcpRouteSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTcpRouteSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const TcpRouteType = "tcp-route"

func init() {
	sdkcommon.RegisterTrait(TcpRouteType, FromTrait)
}

type TCPRouteTrait struct {
	Base       apis.TraitBase
	Properties TcpRouteSpec
}

func TcpRoute() *TCPRouteTrait {
	t := &TCPRouteTrait{Base: apis.TraitBase{}}
	return t
}

func (t *TCPRouteTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(t.Properties),
		Type:       TcpRouteType,
	}
	return res
}

func (t *TCPRouteTrait) FromTrait(from common.ApplicationTrait) (*TCPRouteTrait, error) {
	var properties TcpRouteSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	t.Base.Type = TcpRouteType
	t.Properties = properties
	return t, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	t := &TCPRouteTrait{}
	return t.FromTrait(from)
}

func (t *TCPRouteTrait) DefType() string {
	return TcpRouteType
}
