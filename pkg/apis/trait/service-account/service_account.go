/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package service_account

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the ServiceAccountSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ServiceAccountSpec{}

// ServiceAccountSpec struct for ServiceAccountSpec
type ServiceAccountSpec struct {
	// Specify whether to create new ServiceAccount or not
	create *bool `json:"create,omitempty"`
	// Specify the name of ServiceAccount
	name *string `json:"name,omitempty"`
	// Specify the privileges of the ServiceAccount, if not empty, RoleBindings(ClusterRoleBindings) will be created
	privileges []Privileges `json:"privileges,omitempty"`
}

// NewServiceAccountSpecWith instantiates a new ServiceAccountSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceAccountSpecWith() *ServiceAccountSpec {
	this := ServiceAccountSpec{}
	var create bool = false
	this.create = &create
	return &this
}

// NewServiceAccountSpec instantiates a new ServiceAccountSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceAccountSpec() *ServiceAccountSpec {
	this := ServiceAccountSpec{}
	var create bool = false
	this.create = &create
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *ServiceAccountTrait) GetCreate() bool {
	if o == nil || utils.IsNil(o.Properties.create) {
		var ret bool
		return ret
	}
	return *o.Properties.create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAccountTrait) GetCreateOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Properties.create) {
		return nil, false
	}
	return o.Properties.create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *ServiceAccountTrait) HasCreate() bool {
	if o != nil && !utils.IsNil(o.Properties.create) {
		return true
	}

	return false
}

// Create gets a reference to the given bool and assigns it to the create field.
// create:  Specify whether to create new ServiceAccount or not
func (o *ServiceAccountTrait) Create(v bool) *ServiceAccountTrait {
	o.Properties.create = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServiceAccountTrait) GetName() string {
	if o == nil || utils.IsNil(o.Properties.name) {
		var ret string
		return ret
	}
	return *o.Properties.name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAccountTrait) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.name) {
		return nil, false
	}
	return o.Properties.name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServiceAccountTrait) HasName() bool {
	if o != nil && !utils.IsNil(o.Properties.name) {
		return true
	}

	return false
}

// Name gets a reference to the given string and assigns it to the name field.
// name:  Specify the name of ServiceAccount
func (o *ServiceAccountTrait) Name(v string) *ServiceAccountTrait {
	o.Properties.name = &v
	return o
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise.
func (o *ServiceAccountTrait) GetPrivileges() []Privileges {
	if o == nil || utils.IsNil(o.Properties.privileges) {
		var ret []Privileges
		return ret
	}
	return o.Properties.privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAccountTrait) GetPrivilegesOk() ([]Privileges, bool) {
	if o == nil || utils.IsNil(o.Properties.privileges) {
		return nil, false
	}
	return o.Properties.privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *ServiceAccountTrait) HasPrivileges() bool {
	if o != nil && !utils.IsNil(o.Properties.privileges) {
		return true
	}

	return false
}

// Privileges gets a reference to the given []Privileges and assigns it to the privileges field.
// privileges:  Specify the privileges of the ServiceAccount, if not empty, RoleBindings(ClusterRoleBindings) will be created
func (o *ServiceAccountTrait) Privileges(v []Privileges) *ServiceAccountTrait {
	o.Properties.privileges = v
	return o
}

func (o ServiceAccountSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceAccountSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.create) {
		toSerialize["create"] = o.create
	}
	if !utils.IsNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !utils.IsNil(o.privileges) {
		toSerialize["privileges"] = o.privileges
	}
	return toSerialize, nil
}

type NullableServiceAccountSpec struct {
	value *ServiceAccountSpec
	isSet bool
}

func (v NullableServiceAccountSpec) Get() *ServiceAccountSpec {
	return v.value
}

func (v *NullableServiceAccountSpec) Set(val *ServiceAccountSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceAccountSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceAccountSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceAccountSpec(val *ServiceAccountSpec) *NullableServiceAccountSpec {
	return &NullableServiceAccountSpec{value: val, isSet: true}
}

func (v NullableServiceAccountSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceAccountSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const ServiceAccountType = "service-account"

func init() {
	sdkcommon.RegisterTrait(ServiceAccountType, FromTrait)
}

type ServiceAccountTrait struct {
	Base       apis.TraitBase
	Properties ServiceAccountSpec
}

func ServiceAccount() *ServiceAccountTrait {
	s := &ServiceAccountTrait{Base: apis.TraitBase{}}
	return s
}

func (s *ServiceAccountTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(s.Properties),
		Type:       ServiceAccountType,
	}
	return res
}

func (s *ServiceAccountTrait) FromTrait(from common.ApplicationTrait) (*ServiceAccountTrait, error) {
	var properties ServiceAccountSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	s.Properties = properties
	return s, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	s := &ServiceAccountTrait{}
	return s.FromTrait(from)
}

func (s *ServiceAccountTrait) DefType() string {
	return ServiceAccountType
}
