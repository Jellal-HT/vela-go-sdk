/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package helm_labels

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the HelmLabelsSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &HelmLabelsSpec{}

// HelmLabelsSpec struct for HelmLabelsSpec
type HelmLabelsSpec struct {
	ApiVersion *string            `json:"apiVersion,omitempty"`
	Kind       *string            `json:"kind,omitempty"`
	Labels     *map[string]string `json:"labels,omitempty"`
	Name       *string            `json:"name,omitempty"`
	Namespace  *string            `json:"namespace,omitempty"`
}

// NewHelmLabelsSpecWith instantiates a new HelmLabelsSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmLabelsSpecWith() *HelmLabelsSpec {
	this := HelmLabelsSpec{}
	var apiVersion string = "apps/v1"
	this.ApiVersion = &apiVersion
	var kind string = "Deployment"
	this.Kind = &kind
	return &this
}

// NewHelmLabelsSpec instantiates a new HelmLabelsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmLabelsSpec() *HelmLabelsSpec {
	this := HelmLabelsSpec{}
	var apiVersion string = "apps/v1"
	this.ApiVersion = &apiVersion
	var kind string = "Deployment"
	this.Kind = &kind
	return &this
}

// NewHelmLabelsSpecs converts a list HelmLabelsSpec pointers to objects.
// This is helpful when the SetHelmLabelsSpec requires a list of objects
func NewHelmLabelsSpecs(ps ...*HelmLabelsSpec) []HelmLabelsSpec {
	objs := []HelmLabelsSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *HelmLabelsTrait) GetApiVersion() string {
	if o == nil || utils.IsNil(o.Properties.ApiVersion) {
		var ret string
		return ret
	}
	return *o.Properties.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmLabelsTrait) GetApiVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.ApiVersion) {
		return nil, false
	}
	return o.Properties.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *HelmLabelsTrait) HasApiVersion() bool {
	if o != nil && !utils.IsNil(o.Properties.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the apiVersion field.
// ApiVersion:
func (o *HelmLabelsTrait) SetApiVersion(v string) *HelmLabelsTrait {
	o.Properties.ApiVersion = &v
	return o
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *HelmLabelsTrait) GetKind() string {
	if o == nil || utils.IsNil(o.Properties.Kind) {
		var ret string
		return ret
	}
	return *o.Properties.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmLabelsTrait) GetKindOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Kind) {
		return nil, false
	}
	return o.Properties.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *HelmLabelsTrait) HasKind() bool {
	if o != nil && !utils.IsNil(o.Properties.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the kind field.
// Kind:
func (o *HelmLabelsTrait) SetKind(v string) *HelmLabelsTrait {
	o.Properties.Kind = &v
	return o
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *HelmLabelsTrait) GetLabels() map[string]string {
	if o == nil || utils.IsNil(o.Properties.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Properties.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmLabelsTrait) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.Properties.Labels) {
		return nil, false
	}
	return o.Properties.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *HelmLabelsTrait) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Properties.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the labels field.
// Labels:
func (o *HelmLabelsTrait) SetLabels(v map[string]string) *HelmLabelsTrait {
	o.Properties.Labels = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HelmLabelsTrait) GetName() string {
	if o == nil || utils.IsNil(o.Properties.Name) {
		var ret string
		return ret
	}
	return *o.Properties.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmLabelsTrait) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Name) {
		return nil, false
	}
	return o.Properties.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HelmLabelsTrait) HasName() bool {
	if o != nil && !utils.IsNil(o.Properties.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the name field.
// Name:
func (o *HelmLabelsTrait) SetName(v string) *HelmLabelsTrait {
	o.Properties.Name = &v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *HelmLabelsTrait) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.Namespace) {
		var ret string
		return ret
	}
	return *o.Properties.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmLabelsTrait) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Namespace) {
		return nil, false
	}
	return o.Properties.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *HelmLabelsTrait) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// Namespace:
func (o *HelmLabelsTrait) SetNamespace(v string) *HelmLabelsTrait {
	o.Properties.Namespace = &v
	return o
}

func (o HelmLabelsSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmLabelsSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !utils.IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !utils.IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullableHelmLabelsSpec struct {
	value *HelmLabelsSpec
	isSet bool
}

func (v NullableHelmLabelsSpec) Get() *HelmLabelsSpec {
	return v.value
}

func (v *NullableHelmLabelsSpec) Set(val *HelmLabelsSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmLabelsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmLabelsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmLabelsSpec(val *HelmLabelsSpec) *NullableHelmLabelsSpec {
	return &NullableHelmLabelsSpec{value: val, isSet: true}
}

func (v NullableHelmLabelsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmLabelsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const HelmLabelsType = "helm-labels"

func init() {
	sdkcommon.RegisterTrait(HelmLabelsType, FromTrait)
}

type HelmLabelsTrait struct {
	Base       apis.TraitBase
	Properties HelmLabelsSpec
}

func HelmLabels() *HelmLabelsTrait {
	h := &HelmLabelsTrait{Base: apis.TraitBase{}}
	return h
}

func (h *HelmLabelsTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(h.Properties),
		Type:       HelmLabelsType,
	}
	return res
}

func (h *HelmLabelsTrait) FromTrait(from common.ApplicationTrait) (*HelmLabelsTrait, error) {
	var properties HelmLabelsSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	h.Base.Type = HelmLabelsType
	h.Properties = properties
	return h, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	h := &HelmLabelsTrait{}
	return h.FromTrait(from)
}

func (h *HelmLabelsTrait) DefType() string {
	return HelmLabelsType
}
