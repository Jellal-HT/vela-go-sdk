/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package prometheus_scrape

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the PrometheusScrapeSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PrometheusScrapeSpec{}

// PrometheusScrapeSpec struct for PrometheusScrapeSpec
type PrometheusScrapeSpec struct {
	// Specify the path to be scraped
	Path *string `json:"path,omitempty"`
	// Specify the port to be scraped
	Port *int32 `json:"port,omitempty"`
	// Specify the selector of the service. In most cases, you don't need to set it.
	Selector *map[string]string `json:"selector,omitempty"`
	// Specify the service type.
	Type *string `json:"type,omitempty"`
}

// NewPrometheusScrapeSpecWith instantiates a new PrometheusScrapeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrometheusScrapeSpecWith() *PrometheusScrapeSpec {
	this := PrometheusScrapeSpec{}
	var path string = "/metrics"
	this.Path = &path
	var port int32 = 8080
	this.Port = &port
	var type_ string = "ClusterIP"
	this.Type = &type_
	return &this
}

// NewPrometheusScrapeSpec instantiates a new PrometheusScrapeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrometheusScrapeSpec() *PrometheusScrapeSpec {
	this := PrometheusScrapeSpec{}
	var path string = "/metrics"
	this.Path = &path
	var port int32 = 8080
	this.Port = &port
	var type_ string = "ClusterIP"
	this.Type = &type_
	return &this
}

// NewPrometheusScrapeSpecs converts a list PrometheusScrapeSpec pointers to objects.
// This is helpful when the SetPrometheusScrapeSpec requires a list of objects
func NewPrometheusScrapeSpecs(ps ...*PrometheusScrapeSpec) []PrometheusScrapeSpec {
	objs := []PrometheusScrapeSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PrometheusScrapeTrait) GetPath() string {
	if o == nil || utils.IsNil(o.Properties.Path) {
		var ret string
		return ret
	}
	return *o.Properties.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusScrapeTrait) GetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Path) {
		return nil, false
	}
	return o.Properties.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PrometheusScrapeTrait) HasPath() bool {
	if o != nil && !utils.IsNil(o.Properties.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the path field.
// Path:  Specify the path to be scraped
func (o *PrometheusScrapeTrait) SetPath(v string) *PrometheusScrapeTrait {
	o.Properties.Path = &v
	return o
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *PrometheusScrapeTrait) GetPort() int32 {
	if o == nil || utils.IsNil(o.Properties.Port) {
		var ret int32
		return ret
	}
	return *o.Properties.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusScrapeTrait) GetPortOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.Port) {
		return nil, false
	}
	return o.Properties.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *PrometheusScrapeTrait) HasPort() bool {
	if o != nil && !utils.IsNil(o.Properties.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the port field.
// Port:  Specify the port to be scraped
func (o *PrometheusScrapeTrait) SetPort(v int32) *PrometheusScrapeTrait {
	o.Properties.Port = &v
	return o
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *PrometheusScrapeTrait) GetSelector() map[string]string {
	if o == nil || utils.IsNil(o.Properties.Selector) {
		var ret map[string]string
		return ret
	}
	return *o.Properties.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusScrapeTrait) GetSelectorOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.Properties.Selector) {
		return nil, false
	}
	return o.Properties.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *PrometheusScrapeTrait) HasSelector() bool {
	if o != nil && !utils.IsNil(o.Properties.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given map[string]string and assigns it to the selector field.
// Selector:  Specify the selector of the service. In most cases, you don't need to set it.
func (o *PrometheusScrapeTrait) SetSelector(v map[string]string) *PrometheusScrapeTrait {
	o.Properties.Selector = &v
	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PrometheusScrapeTrait) GetType() string {
	if o == nil || utils.IsNil(o.Properties.Type) {
		var ret string
		return ret
	}
	return *o.Properties.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrometheusScrapeTrait) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Type) {
		return nil, false
	}
	return o.Properties.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PrometheusScrapeTrait) HasType() bool {
	if o != nil && !utils.IsNil(o.Properties.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the type_ field.
// Type:  Specify the service type.
func (o *PrometheusScrapeTrait) SetType(v string) *PrometheusScrapeTrait {
	o.Properties.Type = &v
	return o
}

func (o PrometheusScrapeSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrometheusScrapeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !utils.IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !utils.IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePrometheusScrapeSpec struct {
	value *PrometheusScrapeSpec
	isSet bool
}

func (v NullablePrometheusScrapeSpec) Get() *PrometheusScrapeSpec {
	return v.value
}

func (v *NullablePrometheusScrapeSpec) Set(val *PrometheusScrapeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePrometheusScrapeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePrometheusScrapeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrometheusScrapeSpec(val *PrometheusScrapeSpec) *NullablePrometheusScrapeSpec {
	return &NullablePrometheusScrapeSpec{value: val, isSet: true}
}

func (v NullablePrometheusScrapeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrometheusScrapeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const PrometheusScrapeType = "prometheus-scrape"

func init() {
	sdkcommon.RegisterTrait(PrometheusScrapeType, FromTrait)
}

type PrometheusScrapeTrait struct {
	Base       apis.TraitBase
	Properties PrometheusScrapeSpec
}

func PrometheusScrape() *PrometheusScrapeTrait {
	p := &PrometheusScrapeTrait{Base: apis.TraitBase{}}
	return p
}

func (p *PrometheusScrapeTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(p.Properties),
		Type:       PrometheusScrapeType,
	}
	return res
}

func (p *PrometheusScrapeTrait) FromTrait(from common.ApplicationTrait) (*PrometheusScrapeTrait, error) {
	var properties PrometheusScrapeSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	p.Base.Type = PrometheusScrapeType
	p.Properties = properties
	return p, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	p := &PrometheusScrapeTrait{}
	return p.FromTrait(from)
}

func (p *PrometheusScrapeTrait) DefType() string {
	return PrometheusScrapeType
}
