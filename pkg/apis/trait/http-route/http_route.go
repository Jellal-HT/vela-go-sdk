/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package http_route

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the HttpRouteSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &HttpRouteSpec{}

// HttpRouteSpec struct for HttpRouteSpec
type HttpRouteSpec struct {
	// Specify some domains, the domain may be prefixed with a wildcard label (*.)
	Domains []string `json:"domains,omitempty"`
	// Specify the gateway name
	GatewayName *string `json:"gatewayName,omitempty"`
	// Specify the listner name of the gateway
	ListenerName *string `json:"listenerName,omitempty"`
	// Specify some HTTP matchers, filters and actions.
	Rules []Rules `json:"rules,omitempty"`
}

// NewHttpRouteSpecWith instantiates a new HttpRouteSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpRouteSpecWith() *HttpRouteSpec {
	this := HttpRouteSpec{}
	var gatewayName string = "traefik-gateway"
	this.GatewayName = &gatewayName
	var listenerName string = "web"
	this.ListenerName = &listenerName
	return &this
}

// NewHttpRouteSpec instantiates a new HttpRouteSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpRouteSpec() *HttpRouteSpec {
	this := HttpRouteSpec{}
	var gatewayName string = "traefik-gateway"
	this.GatewayName = &gatewayName
	var listenerName string = "web"
	this.ListenerName = &listenerName
	return &this
}

// NewHttpRouteSpecs converts a list HttpRouteSpec pointers to objects.
// This is helpful when the SetHttpRouteSpec requires a list of objects
func NewHttpRouteSpecs(ps ...*HttpRouteSpec) []HttpRouteSpec {
	objs := []HttpRouteSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *HTTPRouteTrait) GetDomains() []string {
	if o == nil || utils.IsNil(o.Properties.Domains) {
		var ret []string
		return ret
	}
	return o.Properties.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPRouteTrait) GetDomainsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.Domains) {
		return nil, false
	}
	return o.Properties.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *HTTPRouteTrait) HasDomains() bool {
	if o != nil && !utils.IsNil(o.Properties.Domains) {
		return true
	}

	return false
}

// SetDomains gets a reference to the given []string and assigns it to the domains field.
// Domains:  Specify some domains, the domain may be prefixed with a wildcard label (*.)
func (o *HTTPRouteTrait) SetDomains(v []string) *HTTPRouteTrait {
	o.Properties.Domains = v
	return o
}

// GetGatewayName returns the GatewayName field value if set, zero value otherwise.
func (o *HTTPRouteTrait) GetGatewayName() string {
	if o == nil || utils.IsNil(o.Properties.GatewayName) {
		var ret string
		return ret
	}
	return *o.Properties.GatewayName
}

// GetGatewayNameOk returns a tuple with the GatewayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPRouteTrait) GetGatewayNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.GatewayName) {
		return nil, false
	}
	return o.Properties.GatewayName, true
}

// HasGatewayName returns a boolean if a field has been set.
func (o *HTTPRouteTrait) HasGatewayName() bool {
	if o != nil && !utils.IsNil(o.Properties.GatewayName) {
		return true
	}

	return false
}

// SetGatewayName gets a reference to the given string and assigns it to the gatewayName field.
// GatewayName:  Specify the gateway name
func (o *HTTPRouteTrait) SetGatewayName(v string) *HTTPRouteTrait {
	o.Properties.GatewayName = &v
	return o
}

// GetListenerName returns the ListenerName field value if set, zero value otherwise.
func (o *HTTPRouteTrait) GetListenerName() string {
	if o == nil || utils.IsNil(o.Properties.ListenerName) {
		var ret string
		return ret
	}
	return *o.Properties.ListenerName
}

// GetListenerNameOk returns a tuple with the ListenerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPRouteTrait) GetListenerNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.ListenerName) {
		return nil, false
	}
	return o.Properties.ListenerName, true
}

// HasListenerName returns a boolean if a field has been set.
func (o *HTTPRouteTrait) HasListenerName() bool {
	if o != nil && !utils.IsNil(o.Properties.ListenerName) {
		return true
	}

	return false
}

// SetListenerName gets a reference to the given string and assigns it to the listenerName field.
// ListenerName:  Specify the listner name of the gateway
func (o *HTTPRouteTrait) SetListenerName(v string) *HTTPRouteTrait {
	o.Properties.ListenerName = &v
	return o
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *HTTPRouteTrait) GetRules() []Rules {
	if o == nil || utils.IsNil(o.Properties.Rules) {
		var ret []Rules
		return ret
	}
	return o.Properties.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPRouteTrait) GetRulesOk() ([]Rules, bool) {
	if o == nil || utils.IsNil(o.Properties.Rules) {
		return nil, false
	}
	return o.Properties.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *HTTPRouteTrait) HasRules() bool {
	if o != nil && !utils.IsNil(o.Properties.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []Rules and assigns it to the rules field.
// Rules:  Specify some HTTP matchers, filters and actions.
func (o *HTTPRouteTrait) SetRules(v []Rules) *HTTPRouteTrait {
	o.Properties.Rules = v
	return o
}

func (o HttpRouteSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpRouteSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Domains) {
		toSerialize["domains"] = o.Domains
	}
	if !utils.IsNil(o.GatewayName) {
		toSerialize["gatewayName"] = o.GatewayName
	}
	if !utils.IsNil(o.ListenerName) {
		toSerialize["listenerName"] = o.ListenerName
	}
	if !utils.IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableHttpRouteSpec struct {
	value *HttpRouteSpec
	isSet bool
}

func (v NullableHttpRouteSpec) Get() *HttpRouteSpec {
	return v.value
}

func (v *NullableHttpRouteSpec) Set(val *HttpRouteSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpRouteSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpRouteSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpRouteSpec(val *HttpRouteSpec) *NullableHttpRouteSpec {
	return &NullableHttpRouteSpec{value: val, isSet: true}
}

func (v NullableHttpRouteSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpRouteSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const HttpRouteType = "http-route"

func init() {
	sdkcommon.RegisterTrait(HttpRouteType, FromTrait)
}

type HTTPRouteTrait struct {
	Base       apis.TraitBase
	Properties HttpRouteSpec
}

func HttpRoute() *HTTPRouteTrait {
	h := &HTTPRouteTrait{Base: apis.TraitBase{}}
	return h
}

func (h *HTTPRouteTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(h.Properties),
		Type:       HttpRouteType,
	}
	return res
}

func (h *HTTPRouteTrait) FromTrait(from common.ApplicationTrait) (*HTTPRouteTrait, error) {
	var properties HttpRouteSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	h.Base.Type = HttpRouteType
	h.Properties = properties
	return h, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	h := &HTTPRouteTrait{}
	return h.FromTrait(from)
}

func (h *HTTPRouteTrait) DefType() string {
	return HttpRouteType
}
