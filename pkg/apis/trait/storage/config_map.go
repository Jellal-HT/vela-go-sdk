/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the ConfigMap type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ConfigMap{}

// ConfigMap struct for ConfigMap
type ConfigMap struct {
	data        map[string]interface{} `json:"data,omitempty"`
	defaultMode int32                  `json:"defaultMode"`
	items       []Items                `json:"items,omitempty"`
	mountOnly   bool                   `json:"mountOnly"`
	mountPath   *string                `json:"mountPath,omitempty"`
	mountToEnv  *MountToEnv            `json:"mountToEnv,omitempty"`
	mountToEnvs []MountToEnvs          `json:"mountToEnvs,omitempty"`
	name        string                 `json:"name"`
	readOnly    bool                   `json:"readOnly"`
	subPath     *string                `json:"subPath,omitempty"`
}

// NewConfigMapWith instantiates a new ConfigMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigMapWith(defaultMode int32, mountOnly bool, name string, readOnly bool) *ConfigMap {
	this := ConfigMap{}
	this.defaultMode = defaultMode
	this.mountOnly = mountOnly
	this.name = name
	this.readOnly = readOnly
	return &this
}

// NewConfigMap instantiates a new ConfigMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigMap() *ConfigMap {
	this := ConfigMap{}
	var defaultMode int32 = 420
	this.defaultMode = defaultMode
	var mountOnly bool = false
	this.mountOnly = mountOnly
	var readOnly bool = false
	this.readOnly = readOnly
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConfigMap) GetData() map[string]interface{} {
	if o == nil || utils.IsNil(o.data) {
		var ret map[string]interface{}
		return ret
	}
	return o.data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.data) {
		return map[string]interface{}{}, false
	}
	return o.data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConfigMap) HasData() bool {
	if o != nil && !utils.IsNil(o.data) {
		return true
	}

	return false
}

// Data gets a reference to the given map[string]interface{} and assigns it to the data field.
// data:
func (o *ConfigMap) Data(v map[string]interface{}) *ConfigMap {
	o.data = v
	return o
}

// GetDefaultMode returns the DefaultMode field value
func (o *ConfigMap) GetDefaultMode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.defaultMode
}

// GetDefaultModeOk returns a tuple with the DefaultMode field value
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetDefaultModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.defaultMode, true
}

// DefaultMode sets field value
func (o *ConfigMap) DefaultMode(v int32) *ConfigMap {
	o.defaultMode = v
	return o
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ConfigMap) GetItems() []Items {
	if o == nil || utils.IsNil(o.items) {
		var ret []Items
		return ret
	}
	return o.items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetItemsOk() ([]Items, bool) {
	if o == nil || utils.IsNil(o.items) {
		return nil, false
	}
	return o.items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ConfigMap) HasItems() bool {
	if o != nil && !utils.IsNil(o.items) {
		return true
	}

	return false
}

// Items gets a reference to the given []Items and assigns it to the items field.
// items:
func (o *ConfigMap) Items(v []Items) *ConfigMap {
	o.items = v
	return o
}

// GetMountOnly returns the MountOnly field value
func (o *ConfigMap) GetMountOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.mountOnly
}

// GetMountOnlyOk returns a tuple with the MountOnly field value
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetMountOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.mountOnly, true
}

// MountOnly sets field value
func (o *ConfigMap) MountOnly(v bool) *ConfigMap {
	o.mountOnly = v
	return o
}

// GetMountPath returns the MountPath field value if set, zero value otherwise.
func (o *ConfigMap) GetMountPath() string {
	if o == nil || utils.IsNil(o.mountPath) {
		var ret string
		return ret
	}
	return *o.mountPath
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetMountPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.mountPath) {
		return nil, false
	}
	return o.mountPath, true
}

// HasMountPath returns a boolean if a field has been set.
func (o *ConfigMap) HasMountPath() bool {
	if o != nil && !utils.IsNil(o.mountPath) {
		return true
	}

	return false
}

// MountPath gets a reference to the given string and assigns it to the mountPath field.
// mountPath:
func (o *ConfigMap) MountPath(v string) *ConfigMap {
	o.mountPath = &v
	return o
}

// GetMountToEnv returns the MountToEnv field value if set, zero value otherwise.
func (o *ConfigMap) GetMountToEnv() MountToEnv {
	if o == nil || utils.IsNil(o.mountToEnv) {
		var ret MountToEnv
		return ret
	}
	return *o.mountToEnv
}

// GetMountToEnvOk returns a tuple with the MountToEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetMountToEnvOk() (*MountToEnv, bool) {
	if o == nil || utils.IsNil(o.mountToEnv) {
		return nil, false
	}
	return o.mountToEnv, true
}

// HasMountToEnv returns a boolean if a field has been set.
func (o *ConfigMap) HasMountToEnv() bool {
	if o != nil && !utils.IsNil(o.mountToEnv) {
		return true
	}

	return false
}

// MountToEnv gets a reference to the given MountToEnv and assigns it to the mountToEnv field.
// mountToEnv:
func (o *ConfigMap) MountToEnv(v MountToEnv) *ConfigMap {
	o.mountToEnv = &v
	return o
}

// GetMountToEnvs returns the MountToEnvs field value if set, zero value otherwise.
func (o *ConfigMap) GetMountToEnvs() []MountToEnvs {
	if o == nil || utils.IsNil(o.mountToEnvs) {
		var ret []MountToEnvs
		return ret
	}
	return o.mountToEnvs
}

// GetMountToEnvsOk returns a tuple with the MountToEnvs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetMountToEnvsOk() ([]MountToEnvs, bool) {
	if o == nil || utils.IsNil(o.mountToEnvs) {
		return nil, false
	}
	return o.mountToEnvs, true
}

// HasMountToEnvs returns a boolean if a field has been set.
func (o *ConfigMap) HasMountToEnvs() bool {
	if o != nil && !utils.IsNil(o.mountToEnvs) {
		return true
	}

	return false
}

// MountToEnvs gets a reference to the given []MountToEnvs and assigns it to the mountToEnvs field.
// mountToEnvs:
func (o *ConfigMap) MountToEnvs(v []MountToEnvs) *ConfigMap {
	o.mountToEnvs = v
	return o
}

// GetName returns the Name field value
func (o *ConfigMap) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.name, true
}

// Name sets field value
func (o *ConfigMap) Name(v string) *ConfigMap {
	o.name = v
	return o
}

// GetReadOnly returns the ReadOnly field value
func (o *ConfigMap) GetReadOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.readOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.readOnly, true
}

// ReadOnly sets field value
func (o *ConfigMap) ReadOnly(v bool) *ConfigMap {
	o.readOnly = v
	return o
}

// GetSubPath returns the SubPath field value if set, zero value otherwise.
func (o *ConfigMap) GetSubPath() string {
	if o == nil || utils.IsNil(o.subPath) {
		var ret string
		return ret
	}
	return *o.subPath
}

// GetSubPathOk returns a tuple with the SubPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetSubPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.subPath) {
		return nil, false
	}
	return o.subPath, true
}

// HasSubPath returns a boolean if a field has been set.
func (o *ConfigMap) HasSubPath() bool {
	if o != nil && !utils.IsNil(o.subPath) {
		return true
	}

	return false
}

// SubPath gets a reference to the given string and assigns it to the subPath field.
// subPath:
func (o *ConfigMap) SubPath(v string) *ConfigMap {
	o.subPath = &v
	return o
}

func (o ConfigMap) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.data) {
		toSerialize["data"] = o.data
	}
	toSerialize["defaultMode"] = o.defaultMode
	if !utils.IsNil(o.items) {
		toSerialize["items"] = o.items
	}
	toSerialize["mountOnly"] = o.mountOnly
	if !utils.IsNil(o.mountPath) {
		toSerialize["mountPath"] = o.mountPath
	}
	if !utils.IsNil(o.mountToEnv) {
		toSerialize["mountToEnv"] = o.mountToEnv
	}
	if !utils.IsNil(o.mountToEnvs) {
		toSerialize["mountToEnvs"] = o.mountToEnvs
	}
	toSerialize["name"] = o.name
	toSerialize["readOnly"] = o.readOnly
	if !utils.IsNil(o.subPath) {
		toSerialize["subPath"] = o.subPath
	}
	return toSerialize, nil
}

type NullableConfigMap struct {
	value *ConfigMap
	isSet bool
}

func (v NullableConfigMap) Get() *ConfigMap {
	return v.value
}

func (v *NullableConfigMap) Set(val *ConfigMap) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigMap) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigMap(val *ConfigMap) *NullableConfigMap {
	return &NullableConfigMap{value: val, isSet: true}
}

func (v NullableConfigMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
