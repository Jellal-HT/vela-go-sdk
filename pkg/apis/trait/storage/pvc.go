/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"vela-go-sdk/pkg/apis/utils"
)

// checks if the Pvc type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Pvc{}

// Pvc struct for Pvc
type Pvc struct {
	accessModes      []string       `json:"accessModes"`
	dataSource       *DataSource    `json:"dataSource,omitempty"`
	dataSourceRef    *DataSourceRef `json:"dataSourceRef,omitempty"`
	mountOnly        bool           `json:"mountOnly"`
	mountPath        string         `json:"mountPath"`
	name             string         `json:"name"`
	resources        *Resources     `json:"resources,omitempty"`
	selector         *Selector      `json:"selector,omitempty"`
	storageClassName *string        `json:"storageClassName,omitempty"`
	subPath          *string        `json:"subPath,omitempty"`
	volumeMode       string         `json:"volumeMode"`
	volumeName       *string        `json:"volumeName,omitempty"`
}

// NewPvcWith instantiates a new Pvc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPvcWith(accessModes []string, mountOnly bool, mountPath string, name string, volumeMode string) *Pvc {
	this := Pvc{}
	this.accessModes = accessModes
	this.mountOnly = mountOnly
	this.mountPath = mountPath
	this.name = name
	this.volumeMode = volumeMode
	return &this
}

// NewPvc instantiates a new Pvc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPvc() *Pvc {
	this := Pvc{}
	var mountOnly bool = false
	this.mountOnly = mountOnly
	var volumeMode string = "Filesystem"
	this.volumeMode = volumeMode
	return &this
}

// GetAccessModes returns the AccessModes field value
func (o *Pvc) GetAccessModes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.accessModes
}

// GetAccessModesOk returns a tuple with the AccessModes field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetAccessModesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.accessModes, true
}

// AccessModes sets field value
func (o *Pvc) AccessModes(v []string) *Pvc {
	o.accessModes = v
	return o
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *Pvc) GetDataSource() DataSource {
	if o == nil || utils.IsNil(o.dataSource) {
		var ret DataSource
		return ret
	}
	return *o.dataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetDataSourceOk() (*DataSource, bool) {
	if o == nil || utils.IsNil(o.dataSource) {
		return nil, false
	}
	return o.dataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *Pvc) HasDataSource() bool {
	if o != nil && !utils.IsNil(o.dataSource) {
		return true
	}

	return false
}

// DataSource gets a reference to the given DataSource and assigns it to the dataSource field.
// dataSource:
func (o *Pvc) DataSource(v DataSource) *Pvc {
	o.dataSource = &v
	return o
}

// GetDataSourceRef returns the DataSourceRef field value if set, zero value otherwise.
func (o *Pvc) GetDataSourceRef() DataSourceRef {
	if o == nil || utils.IsNil(o.dataSourceRef) {
		var ret DataSourceRef
		return ret
	}
	return *o.dataSourceRef
}

// GetDataSourceRefOk returns a tuple with the DataSourceRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetDataSourceRefOk() (*DataSourceRef, bool) {
	if o == nil || utils.IsNil(o.dataSourceRef) {
		return nil, false
	}
	return o.dataSourceRef, true
}

// HasDataSourceRef returns a boolean if a field has been set.
func (o *Pvc) HasDataSourceRef() bool {
	if o != nil && !utils.IsNil(o.dataSourceRef) {
		return true
	}

	return false
}

// DataSourceRef gets a reference to the given DataSourceRef and assigns it to the dataSourceRef field.
// dataSourceRef:
func (o *Pvc) DataSourceRef(v DataSourceRef) *Pvc {
	o.dataSourceRef = &v
	return o
}

// GetMountOnly returns the MountOnly field value
func (o *Pvc) GetMountOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.mountOnly
}

// GetMountOnlyOk returns a tuple with the MountOnly field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetMountOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.mountOnly, true
}

// MountOnly sets field value
func (o *Pvc) MountOnly(v bool) *Pvc {
	o.mountOnly = v
	return o
}

// GetMountPath returns the MountPath field value
func (o *Pvc) GetMountPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.mountPath
}

// GetMountPathOk returns a tuple with the MountPath field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetMountPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.mountPath, true
}

// MountPath sets field value
func (o *Pvc) MountPath(v string) *Pvc {
	o.mountPath = v
	return o
}

// GetName returns the Name field value
func (o *Pvc) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.name, true
}

// Name sets field value
func (o *Pvc) Name(v string) *Pvc {
	o.name = v
	return o
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *Pvc) GetResources() Resources {
	if o == nil || utils.IsNil(o.resources) {
		var ret Resources
		return ret
	}
	return *o.resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetResourcesOk() (*Resources, bool) {
	if o == nil || utils.IsNil(o.resources) {
		return nil, false
	}
	return o.resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *Pvc) HasResources() bool {
	if o != nil && !utils.IsNil(o.resources) {
		return true
	}

	return false
}

// Resources gets a reference to the given Resources and assigns it to the resources field.
// resources:
func (o *Pvc) Resources(v Resources) *Pvc {
	o.resources = &v
	return o
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *Pvc) GetSelector() Selector {
	if o == nil || utils.IsNil(o.selector) {
		var ret Selector
		return ret
	}
	return *o.selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetSelectorOk() (*Selector, bool) {
	if o == nil || utils.IsNil(o.selector) {
		return nil, false
	}
	return o.selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *Pvc) HasSelector() bool {
	if o != nil && !utils.IsNil(o.selector) {
		return true
	}

	return false
}

// Selector gets a reference to the given Selector and assigns it to the selector field.
// selector:
func (o *Pvc) Selector(v Selector) *Pvc {
	o.selector = &v
	return o
}

// GetStorageClassName returns the StorageClassName field value if set, zero value otherwise.
func (o *Pvc) GetStorageClassName() string {
	if o == nil || utils.IsNil(o.storageClassName) {
		var ret string
		return ret
	}
	return *o.storageClassName
}

// GetStorageClassNameOk returns a tuple with the StorageClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetStorageClassNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.storageClassName) {
		return nil, false
	}
	return o.storageClassName, true
}

// HasStorageClassName returns a boolean if a field has been set.
func (o *Pvc) HasStorageClassName() bool {
	if o != nil && !utils.IsNil(o.storageClassName) {
		return true
	}

	return false
}

// StorageClassName gets a reference to the given string and assigns it to the storageClassName field.
// storageClassName:
func (o *Pvc) StorageClassName(v string) *Pvc {
	o.storageClassName = &v
	return o
}

// GetSubPath returns the SubPath field value if set, zero value otherwise.
func (o *Pvc) GetSubPath() string {
	if o == nil || utils.IsNil(o.subPath) {
		var ret string
		return ret
	}
	return *o.subPath
}

// GetSubPathOk returns a tuple with the SubPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetSubPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.subPath) {
		return nil, false
	}
	return o.subPath, true
}

// HasSubPath returns a boolean if a field has been set.
func (o *Pvc) HasSubPath() bool {
	if o != nil && !utils.IsNil(o.subPath) {
		return true
	}

	return false
}

// SubPath gets a reference to the given string and assigns it to the subPath field.
// subPath:
func (o *Pvc) SubPath(v string) *Pvc {
	o.subPath = &v
	return o
}

// GetVolumeMode returns the VolumeMode field value
func (o *Pvc) GetVolumeMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.volumeMode
}

// GetVolumeModeOk returns a tuple with the VolumeMode field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetVolumeModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.volumeMode, true
}

// VolumeMode sets field value
func (o *Pvc) VolumeMode(v string) *Pvc {
	o.volumeMode = v
	return o
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *Pvc) GetVolumeName() string {
	if o == nil || utils.IsNil(o.volumeName) {
		var ret string
		return ret
	}
	return *o.volumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetVolumeNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.volumeName) {
		return nil, false
	}
	return o.volumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *Pvc) HasVolumeName() bool {
	if o != nil && !utils.IsNil(o.volumeName) {
		return true
	}

	return false
}

// VolumeName gets a reference to the given string and assigns it to the volumeName field.
// volumeName:
func (o *Pvc) VolumeName(v string) *Pvc {
	o.volumeName = &v
	return o
}

func (o Pvc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pvc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessModes"] = o.accessModes
	if !utils.IsNil(o.dataSource) {
		toSerialize["dataSource"] = o.dataSource
	}
	if !utils.IsNil(o.dataSourceRef) {
		toSerialize["dataSourceRef"] = o.dataSourceRef
	}
	toSerialize["mountOnly"] = o.mountOnly
	toSerialize["mountPath"] = o.mountPath
	toSerialize["name"] = o.name
	if !utils.IsNil(o.resources) {
		toSerialize["resources"] = o.resources
	}
	if !utils.IsNil(o.selector) {
		toSerialize["selector"] = o.selector
	}
	if !utils.IsNil(o.storageClassName) {
		toSerialize["storageClassName"] = o.storageClassName
	}
	if !utils.IsNil(o.subPath) {
		toSerialize["subPath"] = o.subPath
	}
	toSerialize["volumeMode"] = o.volumeMode
	if !utils.IsNil(o.volumeName) {
		toSerialize["volumeName"] = o.volumeName
	}
	return toSerialize, nil
}

type NullablePvc struct {
	value *Pvc
	isSet bool
}

func (v NullablePvc) Get() *Pvc {
	return v.value
}

func (v *NullablePvc) Set(val *Pvc) {
	v.value = val
	v.isSet = true
}

func (v NullablePvc) IsSet() bool {
	return v.isSet
}

func (v *NullablePvc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePvc(val *Pvc) *NullablePvc {
	return &NullablePvc{value: val, isSet: true}
}

func (v NullablePvc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePvc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
