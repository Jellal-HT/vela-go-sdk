/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the Secret type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Secret{}

// Secret struct for Secret
type Secret struct {
	data        map[string]interface{} `json:"data,omitempty"`
	defaultMode *int32                 `json:"defaultMode,omitempty"`
	items       []Items                `json:"items,omitempty"`
	mountOnly   *bool                  `json:"mountOnly,omitempty"`
	mountPath   *string                `json:"mountPath,omitempty"`
	mountToEnv  *MountToEnv1           `json:"mountToEnv,omitempty"`
	mountToEnvs []MountToEnvs1         `json:"mountToEnvs,omitempty"`
	name        *string                `json:"name,omitempty"`
	readOnly    *bool                  `json:"readOnly,omitempty"`
	stringData  map[string]interface{} `json:"stringData,omitempty"`
	subPath     *string                `json:"subPath,omitempty"`
}

// NewSecretWith instantiates a new Secret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretWith() *Secret {
	this := Secret{}
	var defaultMode int32 = 420
	this.defaultMode = &defaultMode
	var mountOnly bool = false
	this.mountOnly = &mountOnly
	var readOnly bool = false
	this.readOnly = &readOnly
	return &this
}

// NewSecret instantiates a new Secret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecret() *Secret {
	this := Secret{}
	var defaultMode int32 = 420
	this.defaultMode = &defaultMode
	var mountOnly bool = false
	this.mountOnly = &mountOnly
	var readOnly bool = false
	this.readOnly = &readOnly
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Secret) GetData() map[string]interface{} {
	if o == nil || utils.IsNil(o.data) {
		var ret map[string]interface{}
		return ret
	}
	return o.data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.data) {
		return map[string]interface{}{}, false
	}
	return o.data, true
}

// HasData returns a boolean if a field has been set.
func (o *Secret) HasData() bool {
	if o != nil && !utils.IsNil(o.data) {
		return true
	}

	return false
}

// Data gets a reference to the given map[string]interface{} and assigns it to the data field.
// data:
func (o *Secret) Data(v map[string]interface{}) *Secret {
	o.data = v
	return o
}

// GetDefaultMode returns the DefaultMode field value if set, zero value otherwise.
func (o *Secret) GetDefaultMode() int32 {
	if o == nil || utils.IsNil(o.defaultMode) {
		var ret int32
		return ret
	}
	return *o.defaultMode
}

// GetDefaultModeOk returns a tuple with the DefaultMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetDefaultModeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.defaultMode) {
		return nil, false
	}
	return o.defaultMode, true
}

// HasDefaultMode returns a boolean if a field has been set.
func (o *Secret) HasDefaultMode() bool {
	if o != nil && !utils.IsNil(o.defaultMode) {
		return true
	}

	return false
}

// DefaultMode gets a reference to the given int32 and assigns it to the defaultMode field.
// defaultMode:
func (o *Secret) DefaultMode(v int32) *Secret {
	o.defaultMode = &v
	return o
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Secret) GetItems() []Items {
	if o == nil || utils.IsNil(o.items) {
		var ret []Items
		return ret
	}
	return o.items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetItemsOk() ([]Items, bool) {
	if o == nil || utils.IsNil(o.items) {
		return nil, false
	}
	return o.items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Secret) HasItems() bool {
	if o != nil && !utils.IsNil(o.items) {
		return true
	}

	return false
}

// Items gets a reference to the given []Items and assigns it to the items field.
// items:
func (o *Secret) Items(v []Items) *Secret {
	o.items = v
	return o
}

// GetMountOnly returns the MountOnly field value if set, zero value otherwise.
func (o *Secret) GetMountOnly() bool {
	if o == nil || utils.IsNil(o.mountOnly) {
		var ret bool
		return ret
	}
	return *o.mountOnly
}

// GetMountOnlyOk returns a tuple with the MountOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetMountOnlyOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.mountOnly) {
		return nil, false
	}
	return o.mountOnly, true
}

// HasMountOnly returns a boolean if a field has been set.
func (o *Secret) HasMountOnly() bool {
	if o != nil && !utils.IsNil(o.mountOnly) {
		return true
	}

	return false
}

// MountOnly gets a reference to the given bool and assigns it to the mountOnly field.
// mountOnly:
func (o *Secret) MountOnly(v bool) *Secret {
	o.mountOnly = &v
	return o
}

// GetMountPath returns the MountPath field value if set, zero value otherwise.
func (o *Secret) GetMountPath() string {
	if o == nil || utils.IsNil(o.mountPath) {
		var ret string
		return ret
	}
	return *o.mountPath
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetMountPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.mountPath) {
		return nil, false
	}
	return o.mountPath, true
}

// HasMountPath returns a boolean if a field has been set.
func (o *Secret) HasMountPath() bool {
	if o != nil && !utils.IsNil(o.mountPath) {
		return true
	}

	return false
}

// MountPath gets a reference to the given string and assigns it to the mountPath field.
// mountPath:
func (o *Secret) MountPath(v string) *Secret {
	o.mountPath = &v
	return o
}

// GetMountToEnv returns the MountToEnv field value if set, zero value otherwise.
func (o *Secret) GetMountToEnv() MountToEnv1 {
	if o == nil || utils.IsNil(o.mountToEnv) {
		var ret MountToEnv1
		return ret
	}
	return *o.mountToEnv
}

// GetMountToEnvOk returns a tuple with the MountToEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetMountToEnvOk() (*MountToEnv1, bool) {
	if o == nil || utils.IsNil(o.mountToEnv) {
		return nil, false
	}
	return o.mountToEnv, true
}

// HasMountToEnv returns a boolean if a field has been set.
func (o *Secret) HasMountToEnv() bool {
	if o != nil && !utils.IsNil(o.mountToEnv) {
		return true
	}

	return false
}

// MountToEnv gets a reference to the given MountToEnv1 and assigns it to the mountToEnv field.
// mountToEnv:
func (o *Secret) MountToEnv(v MountToEnv1) *Secret {
	o.mountToEnv = &v
	return o
}

// GetMountToEnvs returns the MountToEnvs field value if set, zero value otherwise.
func (o *Secret) GetMountToEnvs() []MountToEnvs1 {
	if o == nil || utils.IsNil(o.mountToEnvs) {
		var ret []MountToEnvs1
		return ret
	}
	return o.mountToEnvs
}

// GetMountToEnvsOk returns a tuple with the MountToEnvs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetMountToEnvsOk() ([]MountToEnvs1, bool) {
	if o == nil || utils.IsNil(o.mountToEnvs) {
		return nil, false
	}
	return o.mountToEnvs, true
}

// HasMountToEnvs returns a boolean if a field has been set.
func (o *Secret) HasMountToEnvs() bool {
	if o != nil && !utils.IsNil(o.mountToEnvs) {
		return true
	}

	return false
}

// MountToEnvs gets a reference to the given []MountToEnvs1 and assigns it to the mountToEnvs field.
// mountToEnvs:
func (o *Secret) MountToEnvs(v []MountToEnvs1) *Secret {
	o.mountToEnvs = v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Secret) GetName() string {
	if o == nil || utils.IsNil(o.name) {
		var ret string
		return ret
	}
	return *o.name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.name) {
		return nil, false
	}
	return o.name, true
}

// HasName returns a boolean if a field has been set.
func (o *Secret) HasName() bool {
	if o != nil && !utils.IsNil(o.name) {
		return true
	}

	return false
}

// Name gets a reference to the given string and assigns it to the name field.
// name:
func (o *Secret) Name(v string) *Secret {
	o.name = &v
	return o
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *Secret) GetReadOnly() bool {
	if o == nil || utils.IsNil(o.readOnly) {
		var ret bool
		return ret
	}
	return *o.readOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetReadOnlyOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.readOnly) {
		return nil, false
	}
	return o.readOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *Secret) HasReadOnly() bool {
	if o != nil && !utils.IsNil(o.readOnly) {
		return true
	}

	return false
}

// ReadOnly gets a reference to the given bool and assigns it to the readOnly field.
// readOnly:
func (o *Secret) ReadOnly(v bool) *Secret {
	o.readOnly = &v
	return o
}

// GetStringData returns the StringData field value if set, zero value otherwise.
func (o *Secret) GetStringData() map[string]interface{} {
	if o == nil || utils.IsNil(o.stringData) {
		var ret map[string]interface{}
		return ret
	}
	return o.stringData
}

// GetStringDataOk returns a tuple with the StringData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetStringDataOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.stringData) {
		return map[string]interface{}{}, false
	}
	return o.stringData, true
}

// HasStringData returns a boolean if a field has been set.
func (o *Secret) HasStringData() bool {
	if o != nil && !utils.IsNil(o.stringData) {
		return true
	}

	return false
}

// StringData gets a reference to the given map[string]interface{} and assigns it to the stringData field.
// stringData:
func (o *Secret) StringData(v map[string]interface{}) *Secret {
	o.stringData = v
	return o
}

// GetSubPath returns the SubPath field value if set, zero value otherwise.
func (o *Secret) GetSubPath() string {
	if o == nil || utils.IsNil(o.subPath) {
		var ret string
		return ret
	}
	return *o.subPath
}

// GetSubPathOk returns a tuple with the SubPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetSubPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.subPath) {
		return nil, false
	}
	return o.subPath, true
}

// HasSubPath returns a boolean if a field has been set.
func (o *Secret) HasSubPath() bool {
	if o != nil && !utils.IsNil(o.subPath) {
		return true
	}

	return false
}

// SubPath gets a reference to the given string and assigns it to the subPath field.
// subPath:
func (o *Secret) SubPath(v string) *Secret {
	o.subPath = &v
	return o
}

func (o Secret) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Secret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.data) {
		toSerialize["data"] = o.data
	}
	if !utils.IsNil(o.defaultMode) {
		toSerialize["defaultMode"] = o.defaultMode
	}
	if !utils.IsNil(o.items) {
		toSerialize["items"] = o.items
	}
	if !utils.IsNil(o.mountOnly) {
		toSerialize["mountOnly"] = o.mountOnly
	}
	if !utils.IsNil(o.mountPath) {
		toSerialize["mountPath"] = o.mountPath
	}
	if !utils.IsNil(o.mountToEnv) {
		toSerialize["mountToEnv"] = o.mountToEnv
	}
	if !utils.IsNil(o.mountToEnvs) {
		toSerialize["mountToEnvs"] = o.mountToEnvs
	}
	if !utils.IsNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !utils.IsNil(o.readOnly) {
		toSerialize["readOnly"] = o.readOnly
	}
	if !utils.IsNil(o.stringData) {
		toSerialize["stringData"] = o.stringData
	}
	if !utils.IsNil(o.subPath) {
		toSerialize["subPath"] = o.subPath
	}
	return toSerialize, nil
}

type NullableSecret struct {
	value *Secret
	isSet bool
}

func (v NullableSecret) Get() *Secret {
	return v.value
}

func (v *NullableSecret) Set(val *Secret) {
	v.value = val
	v.isSet = true
}

func (v NullableSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecret(val *Secret) *NullableSecret {
	return &NullableSecret{value: val, isSet: true}
}

func (v NullableSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
