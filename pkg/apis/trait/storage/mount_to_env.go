/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"

	"vela-go-sdk/pkg/apis/utils"
)

// checks if the MountToEnv type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MountToEnv{}

// MountToEnv struct for MountToEnv
type MountToEnv struct {
	configMapKey string `json:"configMapKey"`
	envName      string `json:"envName"`
}

// NewMountToEnvWith instantiates a new MountToEnv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountToEnvWith(configMapKey string, envName string) *MountToEnv {
	this := MountToEnv{}
	this.configMapKey = configMapKey
	this.envName = envName
	return &this
}

// NewMountToEnv instantiates a new MountToEnv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountToEnv() *MountToEnv {
	this := MountToEnv{}
	return &this
}

// GetConfigMapKey returns the ConfigMapKey field value
func (o *MountToEnv) GetConfigMapKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.configMapKey
}

// GetConfigMapKeyOk returns a tuple with the ConfigMapKey field value
// and a boolean to check if the value has been set.
func (o *MountToEnv) GetConfigMapKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.configMapKey, true
}

// ConfigMapKey sets field value
func (o *MountToEnv) ConfigMapKey(v string) *MountToEnv {
	o.configMapKey = v
	return o
}

// GetEnvName returns the EnvName field value
func (o *MountToEnv) GetEnvName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.envName
}

// GetEnvNameOk returns a tuple with the EnvName field value
// and a boolean to check if the value has been set.
func (o *MountToEnv) GetEnvNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.envName, true
}

// EnvName sets field value
func (o *MountToEnv) EnvName(v string) *MountToEnv {
	o.envName = v
	return o
}

func (o MountToEnv) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MountToEnv) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configMapKey"] = o.configMapKey
	toSerialize["envName"] = o.envName
	return toSerialize, nil
}

type NullableMountToEnv struct {
	value *MountToEnv
	isSet bool
}

func (v NullableMountToEnv) Get() *MountToEnv {
	return v.value
}

func (v *NullableMountToEnv) Set(val *MountToEnv) {
	v.value = val
	v.isSet = true
}

func (v NullableMountToEnv) IsSet() bool {
	return v.isSet
}

func (v *NullableMountToEnv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountToEnv(val *MountToEnv) *NullableMountToEnv {
	return &NullableMountToEnv{value: val, isSet: true}
}

func (v NullableMountToEnv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountToEnv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
