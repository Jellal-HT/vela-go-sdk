/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sidecar

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the Volumes type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Volumes{}

// Volumes struct for Volumes
type Volumes struct {
	name *string `json:"name,omitempty"`
	path *string `json:"path,omitempty"`
}

// NewVolumesWith instantiates a new Volumes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumesWith() *Volumes {
	this := Volumes{}
	return &this
}

// NewVolumes instantiates a new Volumes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumes() *Volumes {
	this := Volumes{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Volumes) GetName() string {
	if o == nil || utils.IsNil(o.name) {
		var ret string
		return ret
	}
	return *o.name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volumes) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.name) {
		return nil, false
	}
	return o.name, true
}

// HasName returns a boolean if a field has been set.
func (o *Volumes) HasName() bool {
	if o != nil && !utils.IsNil(o.name) {
		return true
	}

	return false
}

// Name gets a reference to the given string and assigns it to the name field.
// name:
func (o *Volumes) Name(v string) *Volumes {
	o.name = &v
	return o
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Volumes) GetPath() string {
	if o == nil || utils.IsNil(o.path) {
		var ret string
		return ret
	}
	return *o.path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volumes) GetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.path) {
		return nil, false
	}
	return o.path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Volumes) HasPath() bool {
	if o != nil && !utils.IsNil(o.path) {
		return true
	}

	return false
}

// Path gets a reference to the given string and assigns it to the path field.
// path:
func (o *Volumes) Path(v string) *Volumes {
	o.path = &v
	return o
}

func (o Volumes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Volumes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !utils.IsNil(o.path) {
		toSerialize["path"] = o.path
	}
	return toSerialize, nil
}

type NullableVolumes struct {
	value *Volumes
	isSet bool
}

func (v NullableVolumes) Get() *Volumes {
	return v.value
}

func (v *NullableVolumes) Set(val *Volumes) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumes) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumes(val *Volumes) *NullableVolumes {
	return &NullableVolumes{value: val, isSet: true}
}

func (v NullableVolumes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
