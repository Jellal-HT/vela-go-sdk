/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_image

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the PatchParams type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PatchParams{}

// PatchParams struct for PatchParams
type PatchParams struct {
	// Specify the name of the target container, if not set, use the component name
	containerName string `json:"containerName"`
	// Specify the image of the container
	image string `json:"image"`
	// Specify the image pull policy of the container
	imagePullPolicy string `json:"imagePullPolicy"`
}

// NewPatchParamsWith instantiates a new PatchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchParamsWith(containerName string, image string, imagePullPolicy string) *PatchParams {
	this := PatchParams{}
	this.containerName = containerName
	this.image = image
	this.imagePullPolicy = imagePullPolicy
	return &this
}

// NewPatchParams instantiates a new PatchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchParams() *PatchParams {
	this := PatchParams{}
	var containerName string = ""
	this.containerName = containerName
	var imagePullPolicy string = ""
	this.imagePullPolicy = imagePullPolicy
	return &this
}

// GetContainerName returns the ContainerName field value
func (o *PatchParams) GetContainerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.containerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.containerName, true
}

// ContainerName sets field value
func (o *PatchParams) ContainerName(v string) *PatchParams {
	o.containerName = v
	return o
}

// GetImage returns the Image field value
func (o *PatchParams) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.image, true
}

// Image sets field value
func (o *PatchParams) Image(v string) *PatchParams {
	o.image = v
	return o
}

// GetImagePullPolicy returns the ImagePullPolicy field value
func (o *PatchParams) GetImagePullPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.imagePullPolicy
}

// GetImagePullPolicyOk returns a tuple with the ImagePullPolicy field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetImagePullPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.imagePullPolicy, true
}

// ImagePullPolicy sets field value
func (o *PatchParams) ImagePullPolicy(v string) *PatchParams {
	o.imagePullPolicy = v
	return o
}

func (o PatchParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["containerName"] = o.containerName
	toSerialize["image"] = o.image
	toSerialize["imagePullPolicy"] = o.imagePullPolicy
	return toSerialize, nil
}

type NullablePatchParams struct {
	value *PatchParams
	isSet bool
}

func (v NullablePatchParams) Get() *PatchParams {
	return v.value
}

func (v *NullablePatchParams) Set(val *PatchParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchParams(val *PatchParams) *NullablePatchParams {
	return &NullablePatchParams{value: val, isSet: true}
}

func (v NullablePatchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
