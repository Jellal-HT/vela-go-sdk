/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package https_route

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the Rules type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Rules{}

// Rules struct for Rules
type Rules struct {
	// Conditions to select a HTTP route by matching HTTP request headers.
	Headers []Headers `json:"headers,omitempty"`
	Path    *Path     `json:"path,omitempty"`
	// Specify the service port of component.
	Port *int32 `json:"port,omitempty"`
	// Specify the service name of component, the default is component name.
	ServiceName *string `json:"serviceName,omitempty"`
}

// NewRulesWith instantiates a new Rules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRulesWith() *Rules {
	this := Rules{}
	return &this
}

// NewRules instantiates a new Rules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRules() *Rules {
	this := Rules{}
	return &this
}

// NewRuless converts a list Rules pointers to objects.
// This is helpful when the SetRules requires a list of objects
func NewRuless(ps ...*Rules) []Rules {
	objs := []Rules{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *Rules) GetHeaders() []Headers {
	if o == nil || utils.IsNil(o.Headers) {
		var ret []Headers
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rules) GetHeadersOk() ([]Headers, bool) {
	if o == nil || utils.IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *Rules) HasHeaders() bool {
	if o != nil && !utils.IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []Headers and assigns it to the headers field.
// Headers:  Conditions to select a HTTP route by matching HTTP request headers.
func (o *Rules) SetHeaders(v []Headers) *Rules {
	o.Headers = v
	return o
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Rules) GetPath() Path {
	if o == nil || utils.IsNil(o.Path) {
		var ret Path
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rules) GetPathOk() (*Path, bool) {
	if o == nil || utils.IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Rules) HasPath() bool {
	if o != nil && !utils.IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given Path and assigns it to the path field.
// Path:
func (o *Rules) SetPath(v Path) *Rules {
	o.Path = &v
	return o
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Rules) GetPort() int32 {
	if o == nil || utils.IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rules) GetPortOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *Rules) HasPort() bool {
	if o != nil && !utils.IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the port field.
// Port:  Specify the service port of component.
func (o *Rules) SetPort(v int32) *Rules {
	o.Port = &v
	return o
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *Rules) GetServiceName() string {
	if o == nil || utils.IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rules) GetServiceNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *Rules) HasServiceName() bool {
	if o != nil && !utils.IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the serviceName field.
// ServiceName:  Specify the service name of component, the default is component name.
func (o *Rules) SetServiceName(v string) *Rules {
	o.ServiceName = &v
	return o
}

func (o Rules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !utils.IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !utils.IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !utils.IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	return toSerialize, nil
}

type NullableRules struct {
	value *Rules
	isSet bool
}

func (v NullableRules) Get() *Rules {
	return v.value
}

func (v *NullableRules) Set(val *Rules) {
	v.value = val
	v.isSet = true
}

func (v NullableRules) IsSet() bool {
	return v.isSet
}

func (v *NullableRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRules(val *Rules) *NullableRules {
	return &NullableRules{value: val, isSet: true}
}

func (v NullableRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
