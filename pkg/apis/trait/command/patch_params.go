/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"

	"vela-go-sdk/pkg/apis/utils"
)

// checks if the PatchParams type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PatchParams{}

// PatchParams struct for PatchParams
type PatchParams struct {
	// Specify the args to add in the target container, existing args will be kept, cannot be used with `args`
	addArgs []string `json:"addArgs"`
	// Specify the args to use in the target container, if set, it will override existing args
	args []string `json:"args"`
	// Specify the command to use in the target container, if not set, it will not be changed
	command []string `json:"command"`
	// Specify the name of the target container, if not set, use the component name
	containerName string `json:"containerName"`
	// Specify the existing args to delete in the target container, cannot be used with `args`
	delArgs []string `json:"delArgs"`
}

// NewPatchParamsWith instantiates a new PatchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchParamsWith(addArgs []string, args []string, command []string, containerName string, delArgs []string) *PatchParams {
	this := PatchParams{}
	this.addArgs = addArgs
	this.args = args
	this.command = command
	this.containerName = containerName
	this.delArgs = delArgs
	return &this
}

// NewPatchParams instantiates a new PatchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchParams() *PatchParams {
	this := PatchParams{}
	var containerName string = ""
	this.containerName = containerName
	return &this
}

// GetAddArgs returns the AddArgs field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *PatchParams) GetAddArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.addArgs
}

// GetAddArgsOk returns a tuple with the AddArgs field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchParams) GetAddArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.addArgs) {
		return nil, false
	}
	return o.addArgs, true
}

// AddArgs sets field value
func (o *PatchParams) AddArgs(v []string) *PatchParams {
	o.addArgs = v
	return o
}

// GetArgs returns the Args field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *PatchParams) GetArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.args
}

// GetArgsOk returns a tuple with the Args field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchParams) GetArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.args) {
		return nil, false
	}
	return o.args, true
}

// Args sets field value
func (o *PatchParams) Args(v []string) *PatchParams {
	o.args = v
	return o
}

// GetCommand returns the Command field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *PatchParams) GetCommand() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchParams) GetCommandOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.command) {
		return nil, false
	}
	return o.command, true
}

// Command sets field value
func (o *PatchParams) Command(v []string) *PatchParams {
	o.command = v
	return o
}

// GetContainerName returns the ContainerName field value
func (o *PatchParams) GetContainerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.containerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.containerName, true
}

// ContainerName sets field value
func (o *PatchParams) ContainerName(v string) *PatchParams {
	o.containerName = v
	return o
}

// GetDelArgs returns the DelArgs field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *PatchParams) GetDelArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.delArgs
}

// GetDelArgsOk returns a tuple with the DelArgs field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchParams) GetDelArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.delArgs) {
		return nil, false
	}
	return o.delArgs, true
}

// DelArgs sets field value
func (o *PatchParams) DelArgs(v []string) *PatchParams {
	o.delArgs = v
	return o
}

func (o PatchParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.addArgs != nil {
		toSerialize["addArgs"] = o.addArgs
	}
	if o.args != nil {
		toSerialize["args"] = o.args
	}
	if o.command != nil {
		toSerialize["command"] = o.command
	}
	toSerialize["containerName"] = o.containerName
	if o.delArgs != nil {
		toSerialize["delArgs"] = o.delArgs
	}
	return toSerialize, nil
}

type NullablePatchParams struct {
	value *PatchParams
	isSet bool
}

func (v NullablePatchParams) Get() *PatchParams {
	return v.value
}

func (v *NullablePatchParams) Set(val *PatchParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchParams(val *PatchParams) *NullablePatchParams {
	return &NullablePatchParams{value: val, isSet: true}
}

func (v NullablePatchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
