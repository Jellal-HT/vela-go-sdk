/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keda_auto_scaler

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the KedaAutoScalerSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &KedaAutoScalerSpec{}

// KedaAutoScalerSpec struct for KedaAutoScalerSpec
type KedaAutoScalerSpec struct {
	// Specify the cool down period that prevents the scaler from scaling down after each trigger activation. Default: 60 seconds
	CooldownPeriod *int32    `json:"cooldownPeriod,omitempty"`
	Fallback       *Fallback `json:"fallback,omitempty"`
	// Specify the idle period that the scaler to scale to zero.Properties. Default: ignored, must be less than minReplicaCount.
	IdleReplicaCount *int32 `json:"idleReplicaCount,omitempty"`
	// Specify the maximal replica count. Default: 100.
	MaxReplicaCount *int32 `json:"maxReplicaCount,omitempty"`
	// Specify the minimal replica count. Default: 0.
	MinReplicaCount *int32 `json:"minReplicaCount,omitempty"`
	// specify the polling interval of metrics,  Default: 30 seconds
	PollingInterval *int32          `json:"pollingInterval,omitempty"`
	ScaleTargetRef  *ScaleTargetRef `json:"scaleTargetRef,omitempty"`
	Triggers        []Trigger       `json:"triggers,omitempty"`
}

// NewKedaAutoScalerSpecWith instantiates a new KedaAutoScalerSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKedaAutoScalerSpecWith() *KedaAutoScalerSpec {
	this := KedaAutoScalerSpec{}
	var cooldownPeriod int32 = 60
	this.CooldownPeriod = &cooldownPeriod
	var idleReplicaCount int32 = 0
	this.IdleReplicaCount = &idleReplicaCount
	var maxReplicaCount int32 = 100
	this.MaxReplicaCount = &maxReplicaCount
	var minReplicaCount int32 = 1
	this.MinReplicaCount = &minReplicaCount
	var pollingInterval int32 = 30
	this.PollingInterval = &pollingInterval
	return &this
}

// NewKedaAutoScalerSpec instantiates a new KedaAutoScalerSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKedaAutoScalerSpec() *KedaAutoScalerSpec {
	this := KedaAutoScalerSpec{}
	var cooldownPeriod int32 = 60
	this.CooldownPeriod = &cooldownPeriod
	var idleReplicaCount int32 = 0
	this.IdleReplicaCount = &idleReplicaCount
	var maxReplicaCount int32 = 100
	this.MaxReplicaCount = &maxReplicaCount
	var minReplicaCount int32 = 1
	this.MinReplicaCount = &minReplicaCount
	var pollingInterval int32 = 30
	this.PollingInterval = &pollingInterval
	return &this
}

// NewKedaAutoScalerSpecs converts a list KedaAutoScalerSpec pointers to objects.
// This is helpful when the SetKedaAutoScalerSpec requires a list of objects
func NewKedaAutoScalerSpecs(ps ...*KedaAutoScalerSpec) []KedaAutoScalerSpec {
	objs := []KedaAutoScalerSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetCooldownPeriod returns the CooldownPeriod field value if set, zero value otherwise.
func (o *KedaAutoScalerTrait) GetCooldownPeriod() int32 {
	if o == nil || utils.IsNil(o.Properties.CooldownPeriod) {
		var ret int32
		return ret
	}
	return *o.Properties.CooldownPeriod
}

// GetCooldownPeriodOk returns a tuple with the CooldownPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KedaAutoScalerTrait) GetCooldownPeriodOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.CooldownPeriod) {
		return nil, false
	}
	return o.Properties.CooldownPeriod, true
}

// HasCooldownPeriod returns a boolean if a field has been set.
func (o *KedaAutoScalerTrait) HasCooldownPeriod() bool {
	if o != nil && !utils.IsNil(o.Properties.CooldownPeriod) {
		return true
	}

	return false
}

// SetCooldownPeriod gets a reference to the given int32 and assigns it to the cooldownPeriod field.
// CooldownPeriod:  Specify the cool down period that prevents the scaler from scaling down after each trigger activation. Default: 60 seconds
func (o *KedaAutoScalerTrait) SetCooldownPeriod(v int32) *KedaAutoScalerTrait {
	o.Properties.CooldownPeriod = &v
	return o
}

// GetFallback returns the Fallback field value if set, zero value otherwise.
func (o *KedaAutoScalerTrait) GetFallback() Fallback {
	if o == nil || utils.IsNil(o.Properties.Fallback) {
		var ret Fallback
		return ret
	}
	return *o.Properties.Fallback
}

// GetFallbackOk returns a tuple with the Fallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KedaAutoScalerTrait) GetFallbackOk() (*Fallback, bool) {
	if o == nil || utils.IsNil(o.Properties.Fallback) {
		return nil, false
	}
	return o.Properties.Fallback, true
}

// HasFallback returns a boolean if a field has been set.
func (o *KedaAutoScalerTrait) HasFallback() bool {
	if o != nil && !utils.IsNil(o.Properties.Fallback) {
		return true
	}

	return false
}

// SetFallback gets a reference to the given Fallback and assigns it to the fallback field.
// Fallback:
func (o *KedaAutoScalerTrait) SetFallback(v Fallback) *KedaAutoScalerTrait {
	o.Properties.Fallback = &v
	return o
}

// GetIdleReplicaCount returns the IdleReplicaCount field value if set, zero value otherwise.
func (o *KedaAutoScalerTrait) GetIdleReplicaCount() int32 {
	if o == nil || utils.IsNil(o.Properties.IdleReplicaCount) {
		var ret int32
		return ret
	}
	return *o.Properties.IdleReplicaCount
}

// GetIdleReplicaCountOk returns a tuple with the IdleReplicaCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KedaAutoScalerTrait) GetIdleReplicaCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.IdleReplicaCount) {
		return nil, false
	}
	return o.Properties.IdleReplicaCount, true
}

// HasIdleReplicaCount returns a boolean if a field has been set.
func (o *KedaAutoScalerTrait) HasIdleReplicaCount() bool {
	if o != nil && !utils.IsNil(o.Properties.IdleReplicaCount) {
		return true
	}

	return false
}

// SetIdleReplicaCount gets a reference to the given int32 and assigns it to the idleReplicaCount field.
// IdleReplicaCount:  Specify the idle period that the scaler to scale to zero.Properties. Default: ignored, must be less than minReplicaCount.
func (o *KedaAutoScalerTrait) SetIdleReplicaCount(v int32) *KedaAutoScalerTrait {
	o.Properties.IdleReplicaCount = &v
	return o
}

// GetMaxReplicaCount returns the MaxReplicaCount field value if set, zero value otherwise.
func (o *KedaAutoScalerTrait) GetMaxReplicaCount() int32 {
	if o == nil || utils.IsNil(o.Properties.MaxReplicaCount) {
		var ret int32
		return ret
	}
	return *o.Properties.MaxReplicaCount
}

// GetMaxReplicaCountOk returns a tuple with the MaxReplicaCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KedaAutoScalerTrait) GetMaxReplicaCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.MaxReplicaCount) {
		return nil, false
	}
	return o.Properties.MaxReplicaCount, true
}

// HasMaxReplicaCount returns a boolean if a field has been set.
func (o *KedaAutoScalerTrait) HasMaxReplicaCount() bool {
	if o != nil && !utils.IsNil(o.Properties.MaxReplicaCount) {
		return true
	}

	return false
}

// SetMaxReplicaCount gets a reference to the given int32 and assigns it to the maxReplicaCount field.
// MaxReplicaCount:  Specify the maximal replica count. Default: 100.
func (o *KedaAutoScalerTrait) SetMaxReplicaCount(v int32) *KedaAutoScalerTrait {
	o.Properties.MaxReplicaCount = &v
	return o
}

// GetMinReplicaCount returns the MinReplicaCount field value if set, zero value otherwise.
func (o *KedaAutoScalerTrait) GetMinReplicaCount() int32 {
	if o == nil || utils.IsNil(o.Properties.MinReplicaCount) {
		var ret int32
		return ret
	}
	return *o.Properties.MinReplicaCount
}

// GetMinReplicaCountOk returns a tuple with the MinReplicaCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KedaAutoScalerTrait) GetMinReplicaCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.MinReplicaCount) {
		return nil, false
	}
	return o.Properties.MinReplicaCount, true
}

// HasMinReplicaCount returns a boolean if a field has been set.
func (o *KedaAutoScalerTrait) HasMinReplicaCount() bool {
	if o != nil && !utils.IsNil(o.Properties.MinReplicaCount) {
		return true
	}

	return false
}

// SetMinReplicaCount gets a reference to the given int32 and assigns it to the minReplicaCount field.
// MinReplicaCount:  Specify the minimal replica count. Default: 0.
func (o *KedaAutoScalerTrait) SetMinReplicaCount(v int32) *KedaAutoScalerTrait {
	o.Properties.MinReplicaCount = &v
	return o
}

// GetPollingInterval returns the PollingInterval field value if set, zero value otherwise.
func (o *KedaAutoScalerTrait) GetPollingInterval() int32 {
	if o == nil || utils.IsNil(o.Properties.PollingInterval) {
		var ret int32
		return ret
	}
	return *o.Properties.PollingInterval
}

// GetPollingIntervalOk returns a tuple with the PollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KedaAutoScalerTrait) GetPollingIntervalOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.PollingInterval) {
		return nil, false
	}
	return o.Properties.PollingInterval, true
}

// HasPollingInterval returns a boolean if a field has been set.
func (o *KedaAutoScalerTrait) HasPollingInterval() bool {
	if o != nil && !utils.IsNil(o.Properties.PollingInterval) {
		return true
	}

	return false
}

// SetPollingInterval gets a reference to the given int32 and assigns it to the pollingInterval field.
// PollingInterval:  specify the polling interval of metrics,  Default: 30 seconds
func (o *KedaAutoScalerTrait) SetPollingInterval(v int32) *KedaAutoScalerTrait {
	o.Properties.PollingInterval = &v
	return o
}

// GetScaleTargetRef returns the ScaleTargetRef field value if set, zero value otherwise.
func (o *KedaAutoScalerTrait) GetScaleTargetRef() ScaleTargetRef {
	if o == nil || utils.IsNil(o.Properties.ScaleTargetRef) {
		var ret ScaleTargetRef
		return ret
	}
	return *o.Properties.ScaleTargetRef
}

// GetScaleTargetRefOk returns a tuple with the ScaleTargetRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KedaAutoScalerTrait) GetScaleTargetRefOk() (*ScaleTargetRef, bool) {
	if o == nil || utils.IsNil(o.Properties.ScaleTargetRef) {
		return nil, false
	}
	return o.Properties.ScaleTargetRef, true
}

// HasScaleTargetRef returns a boolean if a field has been set.
func (o *KedaAutoScalerTrait) HasScaleTargetRef() bool {
	if o != nil && !utils.IsNil(o.Properties.ScaleTargetRef) {
		return true
	}

	return false
}

// SetScaleTargetRef gets a reference to the given ScaleTargetRef and assigns it to the scaleTargetRef field.
// ScaleTargetRef:
func (o *KedaAutoScalerTrait) SetScaleTargetRef(v ScaleTargetRef) *KedaAutoScalerTrait {
	o.Properties.ScaleTargetRef = &v
	return o
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *KedaAutoScalerTrait) GetTriggers() []Trigger {
	if o == nil || utils.IsNil(o.Properties.Triggers) {
		var ret []Trigger
		return ret
	}
	return o.Properties.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KedaAutoScalerTrait) GetTriggersOk() ([]Trigger, bool) {
	if o == nil || utils.IsNil(o.Properties.Triggers) {
		return nil, false
	}
	return o.Properties.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *KedaAutoScalerTrait) HasTriggers() bool {
	if o != nil && !utils.IsNil(o.Properties.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []Trigger and assigns it to the triggers field.
// Triggers:
func (o *KedaAutoScalerTrait) SetTriggers(v []Trigger) *KedaAutoScalerTrait {
	o.Properties.Triggers = v
	return o
}

func (o KedaAutoScalerSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KedaAutoScalerSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CooldownPeriod) {
		toSerialize["cooldownPeriod"] = o.CooldownPeriod
	}
	if !utils.IsNil(o.Fallback) {
		toSerialize["fallback"] = o.Fallback
	}
	if !utils.IsNil(o.IdleReplicaCount) {
		toSerialize["idleReplicaCount"] = o.IdleReplicaCount
	}
	if !utils.IsNil(o.MaxReplicaCount) {
		toSerialize["maxReplicaCount"] = o.MaxReplicaCount
	}
	if !utils.IsNil(o.MinReplicaCount) {
		toSerialize["minReplicaCount"] = o.MinReplicaCount
	}
	if !utils.IsNil(o.PollingInterval) {
		toSerialize["pollingInterval"] = o.PollingInterval
	}
	if !utils.IsNil(o.ScaleTargetRef) {
		toSerialize["scaleTargetRef"] = o.ScaleTargetRef
	}
	if !utils.IsNil(o.Triggers) {
		toSerialize["triggers"] = o.Triggers
	}
	return toSerialize, nil
}

type NullableKedaAutoScalerSpec struct {
	value *KedaAutoScalerSpec
	isSet bool
}

func (v NullableKedaAutoScalerSpec) Get() *KedaAutoScalerSpec {
	return v.value
}

func (v *NullableKedaAutoScalerSpec) Set(val *KedaAutoScalerSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableKedaAutoScalerSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableKedaAutoScalerSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKedaAutoScalerSpec(val *KedaAutoScalerSpec) *NullableKedaAutoScalerSpec {
	return &NullableKedaAutoScalerSpec{value: val, isSet: true}
}

func (v NullableKedaAutoScalerSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKedaAutoScalerSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const KedaAutoScalerType = "keda-auto-scaler"

func init() {
	sdkcommon.RegisterTrait(KedaAutoScalerType, FromTrait)
}

type KedaAutoScalerTrait struct {
	Base       apis.TraitBase
	Properties KedaAutoScalerSpec
}

func KedaAutoScaler() *KedaAutoScalerTrait {
	k := &KedaAutoScalerTrait{Base: apis.TraitBase{}}
	return k
}

func (k *KedaAutoScalerTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(k.Properties),
		Type:       KedaAutoScalerType,
	}
	return res
}

func (k *KedaAutoScalerTrait) FromTrait(from common.ApplicationTrait) (*KedaAutoScalerTrait, error) {
	var properties KedaAutoScalerSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	k.Base.Type = KedaAutoScalerType
	k.Properties = properties
	return k, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	k := &KedaAutoScalerTrait{}
	return k.FromTrait(from)
}

func (k *KedaAutoScalerTrait) DefType() string {
	return KedaAutoScalerType
}
