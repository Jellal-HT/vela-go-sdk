/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keda_auto_scaler

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the ScaleTargetRef type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ScaleTargetRef{}

// ScaleTargetRef struct for ScaleTargetRef
type ScaleTargetRef struct {
	// Specify apiVersion for target workload
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Specify containerName, default to find this path \".spec.template.spec.containers[0]\"
	EnvSourceContainerName *string `json:"envSourceContainerName,omitempty"`
	// Specify kind for target workload
	Kind *string `json:"kind,omitempty"`
	// Specify the instance name for target workload
	Name *string `json:"name,omitempty"`
}

// NewScaleTargetRefWith instantiates a new ScaleTargetRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScaleTargetRefWith() *ScaleTargetRef {
	this := ScaleTargetRef{}
	var apiVersion string = "apps/v1"
	this.ApiVersion = &apiVersion
	var envSourceContainerName string = ""
	this.EnvSourceContainerName = &envSourceContainerName
	var kind string = "Deployment"
	this.Kind = &kind
	return &this
}

// NewScaleTargetRef instantiates a new ScaleTargetRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScaleTargetRef() *ScaleTargetRef {
	this := ScaleTargetRef{}
	var apiVersion string = "apps/v1"
	this.ApiVersion = &apiVersion
	var envSourceContainerName string = ""
	this.EnvSourceContainerName = &envSourceContainerName
	var kind string = "Deployment"
	this.Kind = &kind
	return &this
}

// NewScaleTargetRefs converts a list ScaleTargetRef pointers to objects.
// This is helpful when the SetScaleTargetRef requires a list of objects
func NewScaleTargetRefs(ps ...*ScaleTargetRef) []ScaleTargetRef {
	objs := []ScaleTargetRef{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *ScaleTargetRef) GetApiVersion() string {
	if o == nil || utils.IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScaleTargetRef) GetApiVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *ScaleTargetRef) HasApiVersion() bool {
	if o != nil && !utils.IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the apiVersion field.
// ApiVersion:  Specify apiVersion for target workload
func (o *ScaleTargetRef) SetApiVersion(v string) *ScaleTargetRef {
	o.ApiVersion = &v
	return o
}

// GetEnvSourceContainerName returns the EnvSourceContainerName field value if set, zero value otherwise.
func (o *ScaleTargetRef) GetEnvSourceContainerName() string {
	if o == nil || utils.IsNil(o.EnvSourceContainerName) {
		var ret string
		return ret
	}
	return *o.EnvSourceContainerName
}

// GetEnvSourceContainerNameOk returns a tuple with the EnvSourceContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScaleTargetRef) GetEnvSourceContainerNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.EnvSourceContainerName) {
		return nil, false
	}
	return o.EnvSourceContainerName, true
}

// HasEnvSourceContainerName returns a boolean if a field has been set.
func (o *ScaleTargetRef) HasEnvSourceContainerName() bool {
	if o != nil && !utils.IsNil(o.EnvSourceContainerName) {
		return true
	}

	return false
}

// SetEnvSourceContainerName gets a reference to the given string and assigns it to the envSourceContainerName field.
// EnvSourceContainerName:  Specify containerName, default to find this path \".spec.template.spec.containers[0]\"
func (o *ScaleTargetRef) SetEnvSourceContainerName(v string) *ScaleTargetRef {
	o.EnvSourceContainerName = &v
	return o
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ScaleTargetRef) GetKind() string {
	if o == nil || utils.IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScaleTargetRef) GetKindOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ScaleTargetRef) HasKind() bool {
	if o != nil && !utils.IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the kind field.
// Kind:  Specify kind for target workload
func (o *ScaleTargetRef) SetKind(v string) *ScaleTargetRef {
	o.Kind = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ScaleTargetRef) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScaleTargetRef) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ScaleTargetRef) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the name field.
// Name:  Specify the instance name for target workload
func (o *ScaleTargetRef) SetName(v string) *ScaleTargetRef {
	o.Name = &v
	return o
}

func (o ScaleTargetRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScaleTargetRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !utils.IsNil(o.EnvSourceContainerName) {
		toSerialize["envSourceContainerName"] = o.EnvSourceContainerName
	}
	if !utils.IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableScaleTargetRef struct {
	value *ScaleTargetRef
	isSet bool
}

func (v NullableScaleTargetRef) Get() *ScaleTargetRef {
	return v.value
}

func (v *NullableScaleTargetRef) Set(val *ScaleTargetRef) {
	v.value = val
	v.isSet = true
}

func (v NullableScaleTargetRef) IsSet() bool {
	return v.isSet
}

func (v *NullableScaleTargetRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScaleTargetRef(val *ScaleTargetRef) *NullableScaleTargetRef {
	return &NullableScaleTargetRef{value: val, isSet: true}
}

func (v NullableScaleTargetRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScaleTargetRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
