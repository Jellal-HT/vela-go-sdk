/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kruise_rollout

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the WorkloadType type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &WorkloadType{}

// WorkloadType struct for WorkloadType
type WorkloadType struct {
	ApiVersion *string `json:"apiVersion,omitempty"`
	Kind       *string `json:"kind,omitempty"`
}

// NewWorkloadTypeWith instantiates a new WorkloadType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadTypeWith() *WorkloadType {
	this := WorkloadType{}
	return &this
}

// NewWorkloadType instantiates a new WorkloadType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadType() *WorkloadType {
	this := WorkloadType{}
	return &this
}

// NewWorkloadTypes converts a list WorkloadType pointers to objects.
// This is helpful when the SetWorkloadType requires a list of objects
func NewWorkloadTypes(ps ...*WorkloadType) []WorkloadType {
	objs := []WorkloadType{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *WorkloadType) GetApiVersion() string {
	if o == nil || utils.IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadType) GetApiVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *WorkloadType) HasApiVersion() bool {
	if o != nil && !utils.IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the apiVersion field.
// ApiVersion:
func (o *WorkloadType) SetApiVersion(v string) *WorkloadType {
	o.ApiVersion = &v
	return o
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *WorkloadType) GetKind() string {
	if o == nil || utils.IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadType) GetKindOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *WorkloadType) HasKind() bool {
	if o != nil && !utils.IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the kind field.
// Kind:
func (o *WorkloadType) SetKind(v string) *WorkloadType {
	o.Kind = &v
	return o
}

func (o WorkloadType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !utils.IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	return toSerialize, nil
}

type NullableWorkloadType struct {
	value *WorkloadType
	isSet bool
}

func (v NullableWorkloadType) Get() *WorkloadType {
	return v.value
}

func (v *NullableWorkloadType) Set(val *WorkloadType) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadType) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadType(val *WorkloadType) *NullableWorkloadType {
	return &NullableWorkloadType{value: val, isSet: true}
}

func (v NullableWorkloadType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
