/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lifecycle

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the LifeCycleHandler type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &LifeCycleHandler{}

// LifeCycleHandler struct for LifeCycleHandler
type LifeCycleHandler struct {
	exec      *Exec      `json:"exec,omitempty"`
	httpGet   *HttpGet   `json:"httpGet,omitempty"`
	tcpSocket *TcpSocket `json:"tcpSocket,omitempty"`
}

// NewLifeCycleHandlerWith instantiates a new LifeCycleHandler object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifeCycleHandlerWith() *LifeCycleHandler {
	this := LifeCycleHandler{}
	return &this
}

// NewLifeCycleHandler instantiates a new LifeCycleHandler object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifeCycleHandler() *LifeCycleHandler {
	this := LifeCycleHandler{}
	return &this
}

// GetExec returns the Exec field value if set, zero value otherwise.
func (o *LifeCycleHandler) GetExec() Exec {
	if o == nil || utils.IsNil(o.exec) {
		var ret Exec
		return ret
	}
	return *o.exec
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifeCycleHandler) GetExecOk() (*Exec, bool) {
	if o == nil || utils.IsNil(o.exec) {
		return nil, false
	}
	return o.exec, true
}

// HasExec returns a boolean if a field has been set.
func (o *LifeCycleHandler) HasExec() bool {
	if o != nil && !utils.IsNil(o.exec) {
		return true
	}

	return false
}

// Exec gets a reference to the given Exec and assigns it to the exec field.
// exec:
func (o *LifeCycleHandler) Exec(v Exec) *LifeCycleHandler {
	o.exec = &v
	return o
}

// GetHttpGet returns the HttpGet field value if set, zero value otherwise.
func (o *LifeCycleHandler) GetHttpGet() HttpGet {
	if o == nil || utils.IsNil(o.httpGet) {
		var ret HttpGet
		return ret
	}
	return *o.httpGet
}

// GetHttpGetOk returns a tuple with the HttpGet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifeCycleHandler) GetHttpGetOk() (*HttpGet, bool) {
	if o == nil || utils.IsNil(o.httpGet) {
		return nil, false
	}
	return o.httpGet, true
}

// HasHttpGet returns a boolean if a field has been set.
func (o *LifeCycleHandler) HasHttpGet() bool {
	if o != nil && !utils.IsNil(o.httpGet) {
		return true
	}

	return false
}

// HttpGet gets a reference to the given HttpGet and assigns it to the httpGet field.
// httpGet:
func (o *LifeCycleHandler) HttpGet(v HttpGet) *LifeCycleHandler {
	o.httpGet = &v
	return o
}

// GetTcpSocket returns the TcpSocket field value if set, zero value otherwise.
func (o *LifeCycleHandler) GetTcpSocket() TcpSocket {
	if o == nil || utils.IsNil(o.tcpSocket) {
		var ret TcpSocket
		return ret
	}
	return *o.tcpSocket
}

// GetTcpSocketOk returns a tuple with the TcpSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifeCycleHandler) GetTcpSocketOk() (*TcpSocket, bool) {
	if o == nil || utils.IsNil(o.tcpSocket) {
		return nil, false
	}
	return o.tcpSocket, true
}

// HasTcpSocket returns a boolean if a field has been set.
func (o *LifeCycleHandler) HasTcpSocket() bool {
	if o != nil && !utils.IsNil(o.tcpSocket) {
		return true
	}

	return false
}

// TcpSocket gets a reference to the given TcpSocket and assigns it to the tcpSocket field.
// tcpSocket:
func (o *LifeCycleHandler) TcpSocket(v TcpSocket) *LifeCycleHandler {
	o.tcpSocket = &v
	return o
}

func (o LifeCycleHandler) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LifeCycleHandler) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.exec) {
		toSerialize["exec"] = o.exec
	}
	if !utils.IsNil(o.httpGet) {
		toSerialize["httpGet"] = o.httpGet
	}
	if !utils.IsNil(o.tcpSocket) {
		toSerialize["tcpSocket"] = o.tcpSocket
	}
	return toSerialize, nil
}

type NullableLifeCycleHandler struct {
	value *LifeCycleHandler
	isSet bool
}

func (v NullableLifeCycleHandler) Get() *LifeCycleHandler {
	return v.value
}

func (v *NullableLifeCycleHandler) Set(val *LifeCycleHandler) {
	v.value = val
	v.isSet = true
}

func (v NullableLifeCycleHandler) IsSet() bool {
	return v.isSet
}

func (v *NullableLifeCycleHandler) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifeCycleHandler(val *LifeCycleHandler) *NullableLifeCycleHandler {
	return &NullableLifeCycleHandler{value: val, isSet: true}
}

func (v NullableLifeCycleHandler) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifeCycleHandler) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
