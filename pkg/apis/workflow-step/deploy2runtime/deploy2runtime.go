/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deploy2runtime

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the Deploy2runtimeSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Deploy2runtimeSpec{}

// Deploy2runtimeSpec struct for Deploy2runtimeSpec
type Deploy2runtimeSpec struct {
	// Declare the runtime clusters to apply, if empty, all runtime clusters will be used
	Clusters []string `json:"clusters,omitempty"`
}

// NewDeploy2runtimeSpecWith instantiates a new Deploy2runtimeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploy2runtimeSpecWith() *Deploy2runtimeSpec {
	this := Deploy2runtimeSpec{}
	return &this
}

// NewDeploy2runtimeSpec instantiates a new Deploy2runtimeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploy2runtimeSpec() *Deploy2runtimeSpec {
	this := Deploy2runtimeSpec{}
	return &this
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *Deploy2runtimeWorkflowStep) GetClusters() []string {
	if o == nil || utils.IsNil(o.Properties.Clusters) {
		var ret []string
		return ret
	}
	return o.Properties.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deploy2runtimeWorkflowStep) GetClustersOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.Clusters) {
		return nil, false
	}
	return o.Properties.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *Deploy2runtimeWorkflowStep) HasClusters() bool {
	if o != nil && !utils.IsNil(o.Properties.Clusters) {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []string and assigns it to the clusters field.
// Clusters:  Declare the runtime clusters to apply, if empty, all runtime clusters will be used
func (o *Deploy2runtimeWorkflowStep) SetClusters(v []string) *Deploy2runtimeWorkflowStep {
	o.Properties.Clusters = v
	return o
}

func (o Deploy2runtimeSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Deploy2runtimeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Clusters) {
		toSerialize["clusters"] = o.Clusters
	}
	return toSerialize, nil
}

type NullableDeploy2runtimeSpec struct {
	value *Deploy2runtimeSpec
	isSet bool
}

func (v NullableDeploy2runtimeSpec) Get() *Deploy2runtimeSpec {
	return v.value
}

func (v *NullableDeploy2runtimeSpec) Set(val *Deploy2runtimeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploy2runtimeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploy2runtimeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploy2runtimeSpec(val *Deploy2runtimeSpec) *NullableDeploy2runtimeSpec {
	return &NullableDeploy2runtimeSpec{value: val, isSet: true}
}

func (v NullableDeploy2runtimeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploy2runtimeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const Deploy2runtimeType = "deploy2runtime"

func init() {
	sdkcommon.RegisterWorkflowStep(Deploy2runtimeType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(Deploy2runtimeType, FromWorkflowSubStep)
}

type Deploy2runtimeWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties Deploy2runtimeSpec
}

func Deploy2runtime(name string) *Deploy2runtimeWorkflowStep {
	d := &Deploy2runtimeWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: Deploy2runtimeType,
	}}
	return d
}

func (d *Deploy2runtimeWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range d.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  d.Base.DependsOn,
		If:         d.Base.If,
		Inputs:     d.Base.Inputs,
		Meta:       d.Base.Meta,
		Name:       d.Base.Name,
		Outputs:    d.Base.Outputs,
		Properties: util.Object2RawExtension(d.Properties),
		SubSteps:   subSteps,
		Timeout:    d.Base.Timeout,
		Type:       Deploy2runtimeType,
	}
	return res
}

func (d *Deploy2runtimeWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*Deploy2runtimeWorkflowStep, error) {
	var properties Deploy2runtimeSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := d.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	d.Base.Name = from.Name
	d.Base.DependsOn = from.DependsOn
	d.Base.Inputs = from.Inputs
	d.Base.Outputs = from.Outputs
	d.Base.If = from.If
	d.Base.Timeout = from.Timeout
	d.Base.Meta = from.Meta
	d.Base.Type = Deploy2runtimeType
	d.Properties = properties
	d.Base.SubSteps = subSteps
	return d, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	d := &Deploy2runtimeWorkflowStep{}
	return d.FromWorkflowStep(from)
}

func (d *Deploy2runtimeWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*Deploy2runtimeWorkflowStep, error) {
	var properties Deploy2runtimeSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	d.Base.Name = from.Name
	d.Base.DependsOn = from.DependsOn
	d.Base.Inputs = from.Inputs
	d.Base.Outputs = from.Outputs
	d.Base.If = from.If
	d.Base.Timeout = from.Timeout
	d.Base.Meta = from.Meta
	d.Base.Type = Deploy2runtimeType
	d.Properties = properties
	return d, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	d := &Deploy2runtimeWorkflowStep{}
	return d.FromWorkflowSubStep(from)
}

func (d *Deploy2runtimeWorkflowStep) WorkflowStepName() string {
	return d.Base.Name
}

func (d *Deploy2runtimeWorkflowStep) DefType() string {
	return Deploy2runtimeType
}

func (d *Deploy2runtimeWorkflowStep) If(_if string) *Deploy2runtimeWorkflowStep {
	d.Base.If = _if
	return d
}

func (d *Deploy2runtimeWorkflowStep) Alias(alias string) *Deploy2runtimeWorkflowStep {
	d.Base.Meta.Alias = alias
	return d
}

func (d *Deploy2runtimeWorkflowStep) Timeout(timeout string) *Deploy2runtimeWorkflowStep {
	d.Base.Timeout = timeout
	return d
}

func (d *Deploy2runtimeWorkflowStep) DependsOn(dependsOn []string) *Deploy2runtimeWorkflowStep {
	d.Base.DependsOn = dependsOn
	return d
}

func (d *Deploy2runtimeWorkflowStep) Inputs(input common.StepInputs) *Deploy2runtimeWorkflowStep {
	d.Base.Inputs = input
	return d
}

func (d *Deploy2runtimeWorkflowStep) Outputs(output common.StepOutputs) *Deploy2runtimeWorkflowStep {
	d.Base.Outputs = output
	return d
}
