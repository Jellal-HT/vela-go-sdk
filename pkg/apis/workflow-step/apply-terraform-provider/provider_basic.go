/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_terraform_provider

import (
	"encoding/json"
	"vela-go-sdk/pkg/apis/utils"
)

// checks if the ProviderBasic type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ProviderBasic{}

// ProviderBasic struct for ProviderBasic
type ProviderBasic struct {
	accessKey string `json:"accessKey"`
	region    string `json:"region"`
	secretKey string `json:"secretKey"`
}

// NewProviderBasicWith instantiates a new ProviderBasic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderBasicWith(accessKey string, region string, secretKey string) *ProviderBasic {
	this := ProviderBasic{}
	this.accessKey = accessKey
	this.region = region
	this.secretKey = secretKey
	return &this
}

// NewProviderBasic instantiates a new ProviderBasic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderBasic() *ProviderBasic {
	this := ProviderBasic{}
	return &this
}

// GetAccessKey returns the AccessKey field value
func (o *ProviderBasic) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.accessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *ProviderBasic) GetAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.accessKey, true
}

// AccessKey sets field value
func (o *ProviderBasic) AccessKey(v string) *ProviderBasic {
	o.accessKey = v
	return o
}

// GetRegion returns the Region field value
func (o *ProviderBasic) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *ProviderBasic) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.region, true
}

// Region sets field value
func (o *ProviderBasic) Region(v string) *ProviderBasic {
	o.region = v
	return o
}

// GetSecretKey returns the SecretKey field value
func (o *ProviderBasic) GetSecretKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.secretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value
// and a boolean to check if the value has been set.
func (o *ProviderBasic) GetSecretKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.secretKey, true
}

// SecretKey sets field value
func (o *ProviderBasic) SecretKey(v string) *ProviderBasic {
	o.secretKey = v
	return o
}

func (o ProviderBasic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderBasic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessKey"] = o.accessKey
	toSerialize["region"] = o.region
	toSerialize["secretKey"] = o.secretKey
	return toSerialize, nil
}

type NullableProviderBasic struct {
	value *ProviderBasic
	isSet bool
}

func (v NullableProviderBasic) Get() *ProviderBasic {
	return v.value
}

func (v *NullableProviderBasic) Set(val *ProviderBasic) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderBasic) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderBasic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderBasic(val *ProviderBasic) *NullableProviderBasic {
	return &NullableProviderBasic{value: val, isSet: true}
}

func (v NullableProviderBasic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderBasic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
