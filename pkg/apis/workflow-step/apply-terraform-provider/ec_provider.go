/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_terraform_provider

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the ECProvider type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ECProvider{}

// ECProvider struct for ECProvider
type ECProvider struct {
	apiKey *string `json:"apiKey,omitempty"`
	name   *string `json:"name,omitempty"`
	type_  *string `json:"type,omitempty"`
}

// NewECProviderWith instantiates a new ECProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECProviderWith() *ECProvider {
	this := ECProvider{}
	var apiKey string = ""
	this.apiKey = &apiKey
	var name string = "ec-provider"
	this.name = &name
	return &this
}

// NewECProvider instantiates a new ECProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECProvider() *ECProvider {
	this := ECProvider{}
	var apiKey string = ""
	this.apiKey = &apiKey
	var name string = "ec-provider"
	this.name = &name
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *ECProvider) GetApiKey() string {
	if o == nil || utils.IsNil(o.apiKey) {
		var ret string
		return ret
	}
	return *o.apiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECProvider) GetApiKeyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.apiKey) {
		return nil, false
	}
	return o.apiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *ECProvider) HasApiKey() bool {
	if o != nil && !utils.IsNil(o.apiKey) {
		return true
	}

	return false
}

// ApiKey gets a reference to the given string and assigns it to the apiKey field.
// apiKey:
func (o *ECProvider) ApiKey(v string) *ECProvider {
	o.apiKey = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ECProvider) GetName() string {
	if o == nil || utils.IsNil(o.name) {
		var ret string
		return ret
	}
	return *o.name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECProvider) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.name) {
		return nil, false
	}
	return o.name, true
}

// HasName returns a boolean if a field has been set.
func (o *ECProvider) HasName() bool {
	if o != nil && !utils.IsNil(o.name) {
		return true
	}

	return false
}

// Name gets a reference to the given string and assigns it to the name field.
// name:
func (o *ECProvider) Name(v string) *ECProvider {
	o.name = &v
	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ECProvider) GetType() string {
	if o == nil || utils.IsNil(o.type_) {
		var ret string
		return ret
	}
	return *o.type_
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECProvider) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.type_) {
		return nil, false
	}
	return o.type_, true
}

// HasType returns a boolean if a field has been set.
func (o *ECProvider) HasType() bool {
	if o != nil && !utils.IsNil(o.type_) {
		return true
	}

	return false
}

// Type gets a reference to the given string and assigns it to the type_ field.
// type_:
func (o *ECProvider) Type(v string) *ECProvider {
	o.type_ = &v
	return o
}

func (o ECProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.apiKey) {
		toSerialize["apiKey"] = o.apiKey
	}
	if !utils.IsNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !utils.IsNil(o.type_) {
		toSerialize["type"] = o.type_
	}
	return toSerialize, nil
}

type NullableECProvider struct {
	value *ECProvider
	isSet bool
}

func (v NullableECProvider) Get() *ECProvider {
	return v.value
}

func (v *NullableECProvider) Set(val *ECProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableECProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableECProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECProvider(val *ECProvider) *NullableECProvider {
	return &NullableECProvider{value: val, isSet: true}
}

func (v NullableECProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
