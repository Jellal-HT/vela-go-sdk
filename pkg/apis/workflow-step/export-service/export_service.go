/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export_service

import (
	"encoding/json"
	"vela-go-sdk/pkg/apis"
	"vela-go-sdk/pkg/apis/utils"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)

// checks if the ExportServiceSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ExportServiceSpec{}

// ExportServiceSpec struct for ExportServiceSpec
type ExportServiceSpec struct {
	// Specify the ip to be export
	ip string `json:"ip"`
	// Specify the name of the export destination
	name *string `json:"name,omitempty"`
	// Specify the namespace of the export destination
	namespace *string `json:"namespace,omitempty"`
	// Specify the port to be used in service
	port int32 `json:"port"`
	// Specify the port to be export
	targetPort int32 `json:"targetPort"`
	// Specify the topology to export
	topology *string `json:"topology,omitempty"`
}

// NewExportServiceSpecWith instantiates a new ExportServiceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportServiceSpecWith(ip string, port int32, targetPort int32) *ExportServiceSpec {
	this := ExportServiceSpec{}
	this.ip = ip
	this.port = port
	this.targetPort = targetPort
	return &this
}

// NewExportServiceSpec instantiates a new ExportServiceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportServiceSpec() *ExportServiceSpec {
	this := ExportServiceSpec{}
	return &this
}

// GetIp returns the Ip field value
func (o *ExportServiceWorkflowStep) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *ExportServiceWorkflowStep) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.ip, true
}

// Ip sets field value
func (o *ExportServiceWorkflowStep) Ip(v string) *ExportServiceWorkflowStep {
	o.Properties.ip = v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExportServiceWorkflowStep) GetName() string {
	if o == nil || utils.IsNil(o.Properties.name) {
		var ret string
		return ret
	}
	return *o.Properties.name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportServiceWorkflowStep) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.name) {
		return nil, false
	}
	return o.Properties.name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExportServiceWorkflowStep) HasName() bool {
	if o != nil && !utils.IsNil(o.Properties.name) {
		return true
	}

	return false
}

// Name gets a reference to the given string and assigns it to the name field.
// name:  Specify the name of the export destination
func (o *ExportServiceWorkflowStep) Name(v string) *ExportServiceWorkflowStep {
	o.Properties.name = &v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ExportServiceWorkflowStep) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		var ret string
		return ret
	}
	return *o.Properties.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportServiceWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		return nil, false
	}
	return o.Properties.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ExportServiceWorkflowStep) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.namespace) {
		return true
	}

	return false
}

// Namespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the namespace of the export destination
func (o *ExportServiceWorkflowStep) Namespace(v string) *ExportServiceWorkflowStep {
	o.Properties.namespace = &v
	return o
}

// GetPort returns the Port field value
func (o *ExportServiceWorkflowStep) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Properties.port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *ExportServiceWorkflowStep) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.port, true
}

// Port sets field value
func (o *ExportServiceWorkflowStep) Port(v int32) *ExportServiceWorkflowStep {
	o.Properties.port = v
	return o
}

// GetTargetPort returns the TargetPort field value
func (o *ExportServiceWorkflowStep) GetTargetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Properties.targetPort
}

// GetTargetPortOk returns a tuple with the TargetPort field value
// and a boolean to check if the value has been set.
func (o *ExportServiceWorkflowStep) GetTargetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.targetPort, true
}

// TargetPort sets field value
func (o *ExportServiceWorkflowStep) TargetPort(v int32) *ExportServiceWorkflowStep {
	o.Properties.targetPort = v
	return o
}

// GetTopology returns the Topology field value if set, zero value otherwise.
func (o *ExportServiceWorkflowStep) GetTopology() string {
	if o == nil || utils.IsNil(o.Properties.topology) {
		var ret string
		return ret
	}
	return *o.Properties.topology
}

// GetTopologyOk returns a tuple with the Topology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportServiceWorkflowStep) GetTopologyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.topology) {
		return nil, false
	}
	return o.Properties.topology, true
}

// HasTopology returns a boolean if a field has been set.
func (o *ExportServiceWorkflowStep) HasTopology() bool {
	if o != nil && !utils.IsNil(o.Properties.topology) {
		return true
	}

	return false
}

// Topology gets a reference to the given string and assigns it to the topology field.
// topology:  Specify the topology to export
func (o *ExportServiceWorkflowStep) Topology(v string) *ExportServiceWorkflowStep {
	o.Properties.topology = &v
	return o
}

func (o ExportServiceSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportServiceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.ip
	if !utils.IsNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	toSerialize["port"] = o.port
	toSerialize["targetPort"] = o.targetPort
	if !utils.IsNil(o.topology) {
		toSerialize["topology"] = o.topology
	}
	return toSerialize, nil
}

type NullableExportServiceSpec struct {
	value *ExportServiceSpec
	isSet bool
}

func (v NullableExportServiceSpec) Get() *ExportServiceSpec {
	return v.value
}

func (v *NullableExportServiceSpec) Set(val *ExportServiceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableExportServiceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableExportServiceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportServiceSpec(val *ExportServiceSpec) *NullableExportServiceSpec {
	return &NullableExportServiceSpec{value: val, isSet: true}
}

func (v NullableExportServiceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportServiceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const ExportServiceType = "export-service"

type ExportServiceWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties ExportServiceSpec
}

func ExportService(name string) *ExportServiceWorkflowStep {
	e := &ExportServiceWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
	}}
	return e
}

func (e *ExportServiceWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range e.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  e.Base.DependsOn,
		If:         e.Base.If,
		Inputs:     e.Base.Inputs,
		Meta:       e.Base.Meta,
		Name:       e.Base.Name,
		Outputs:    e.Base.Outputs,
		Properties: util.Object2RawExtension(e.Properties),
		SubSteps:   subSteps,
		Timeout:    e.Base.Timeout,
		Type:       ExportServiceType,
	}
	return res
}

func (e *ExportServiceWorkflowStep) If(_if string) *ExportServiceWorkflowStep {
	e.Base.If = _if
	return e
}

func (e *ExportServiceWorkflowStep) Alias(alias string) *ExportServiceWorkflowStep {
	e.Base.Meta.Alias = alias
	return e
}

func (e *ExportServiceWorkflowStep) Timeout(timeout string) *ExportServiceWorkflowStep {
	e.Base.Timeout = timeout
	return e
}

func (e *ExportServiceWorkflowStep) DependsOn(dependsOn []string) *ExportServiceWorkflowStep {
	e.Base.DependsOn = dependsOn
	return e
}

func (e *ExportServiceWorkflowStep) Inputs(input common.StepInputs) *ExportServiceWorkflowStep {
	e.Base.Inputs = input
	return e
}

func (e *ExportServiceWorkflowStep) Outputs(output common.StepOutputs) *ExportServiceWorkflowStep {
	e.Base.Outputs = output
	return e
}
