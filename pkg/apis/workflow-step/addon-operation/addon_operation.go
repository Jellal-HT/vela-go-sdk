/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package addon_operation

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the AddonOperationSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AddonOperationSpec{}

// AddonOperationSpec struct for AddonOperationSpec
type AddonOperationSpec struct {
	// Specify the name of the addon.
	AddonName *string `json:"addonName,omitempty"`
	// Specify addon enable args.
	Args []string `json:"args,omitempty"`
	// Specify the image
	Image *string `json:"image,omitempty"`
	// operation for the addon
	Operation *string `json:"operation,omitempty"`
	// specify serviceAccountName want to use
	ServiceAccountName *string `json:"serviceAccountName,omitempty"`
}

// NewAddonOperationSpecWith instantiates a new AddonOperationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonOperationSpecWith() *AddonOperationSpec {
	this := AddonOperationSpec{}
	var image string = "oamdev/vela-cli:v1.6.4"
	this.Image = &image
	var operation string = "enable"
	this.Operation = &operation
	var serviceAccountName string = "kubevela-vela-core"
	this.ServiceAccountName = &serviceAccountName
	return &this
}

// NewAddonOperationSpec instantiates a new AddonOperationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonOperationSpec() *AddonOperationSpec {
	this := AddonOperationSpec{}
	var image string = "oamdev/vela-cli:v1.6.4"
	this.Image = &image
	var operation string = "enable"
	this.Operation = &operation
	var serviceAccountName string = "kubevela-vela-core"
	this.ServiceAccountName = &serviceAccountName
	return &this
}

// NewAddonOperationSpecs converts a list AddonOperationSpec pointers to objects.
// This is helpful when the SetAddonOperationSpec requires a list of objects
func NewAddonOperationSpecs(ps ...*AddonOperationSpec) []AddonOperationSpec {
	objs := []AddonOperationSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetAddonName returns the AddonName field value if set, zero value otherwise.
func (o *AddonOperationWorkflowStep) GetAddonName() string {
	if o == nil || utils.IsNil(o.Properties.AddonName) {
		var ret string
		return ret
	}
	return *o.Properties.AddonName
}

// GetAddonNameOk returns a tuple with the AddonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonOperationWorkflowStep) GetAddonNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.AddonName) {
		return nil, false
	}
	return o.Properties.AddonName, true
}

// HasAddonName returns a boolean if a field has been set.
func (o *AddonOperationWorkflowStep) HasAddonName() bool {
	if o != nil && !utils.IsNil(o.Properties.AddonName) {
		return true
	}

	return false
}

// SetAddonName gets a reference to the given string and assigns it to the addonName field.
// AddonName:  Specify the name of the addon.
func (o *AddonOperationWorkflowStep) SetAddonName(v string) *AddonOperationWorkflowStep {
	o.Properties.AddonName = &v
	return o
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *AddonOperationWorkflowStep) GetArgs() []string {
	if o == nil || utils.IsNil(o.Properties.Args) {
		var ret []string
		return ret
	}
	return o.Properties.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonOperationWorkflowStep) GetArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.Args) {
		return nil, false
	}
	return o.Properties.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *AddonOperationWorkflowStep) HasArgs() bool {
	if o != nil && !utils.IsNil(o.Properties.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the args field.
// Args:  Specify addon enable args.
func (o *AddonOperationWorkflowStep) SetArgs(v []string) *AddonOperationWorkflowStep {
	o.Properties.Args = v
	return o
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *AddonOperationWorkflowStep) GetImage() string {
	if o == nil || utils.IsNil(o.Properties.Image) {
		var ret string
		return ret
	}
	return *o.Properties.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonOperationWorkflowStep) GetImageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Image) {
		return nil, false
	}
	return o.Properties.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *AddonOperationWorkflowStep) HasImage() bool {
	if o != nil && !utils.IsNil(o.Properties.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the image field.
// Image:  Specify the image
func (o *AddonOperationWorkflowStep) SetImage(v string) *AddonOperationWorkflowStep {
	o.Properties.Image = &v
	return o
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *AddonOperationWorkflowStep) GetOperation() string {
	if o == nil || utils.IsNil(o.Properties.Operation) {
		var ret string
		return ret
	}
	return *o.Properties.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonOperationWorkflowStep) GetOperationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Operation) {
		return nil, false
	}
	return o.Properties.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *AddonOperationWorkflowStep) HasOperation() bool {
	if o != nil && !utils.IsNil(o.Properties.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the operation field.
// Operation:  operation for the addon
func (o *AddonOperationWorkflowStep) SetOperation(v string) *AddonOperationWorkflowStep {
	o.Properties.Operation = &v
	return o
}

// GetServiceAccountName returns the ServiceAccountName field value if set, zero value otherwise.
func (o *AddonOperationWorkflowStep) GetServiceAccountName() string {
	if o == nil || utils.IsNil(o.Properties.ServiceAccountName) {
		var ret string
		return ret
	}
	return *o.Properties.ServiceAccountName
}

// GetServiceAccountNameOk returns a tuple with the ServiceAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonOperationWorkflowStep) GetServiceAccountNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.ServiceAccountName) {
		return nil, false
	}
	return o.Properties.ServiceAccountName, true
}

// HasServiceAccountName returns a boolean if a field has been set.
func (o *AddonOperationWorkflowStep) HasServiceAccountName() bool {
	if o != nil && !utils.IsNil(o.Properties.ServiceAccountName) {
		return true
	}

	return false
}

// SetServiceAccountName gets a reference to the given string and assigns it to the serviceAccountName field.
// ServiceAccountName:  specify serviceAccountName want to use
func (o *AddonOperationWorkflowStep) SetServiceAccountName(v string) *AddonOperationWorkflowStep {
	o.Properties.ServiceAccountName = &v
	return o
}

func (o AddonOperationSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonOperationSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AddonName) {
		toSerialize["addonName"] = o.AddonName
	}
	if !utils.IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !utils.IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !utils.IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !utils.IsNil(o.ServiceAccountName) {
		toSerialize["serviceAccountName"] = o.ServiceAccountName
	}
	return toSerialize, nil
}

type NullableAddonOperationSpec struct {
	value *AddonOperationSpec
	isSet bool
}

func (v NullableAddonOperationSpec) Get() *AddonOperationSpec {
	return v.value
}

func (v *NullableAddonOperationSpec) Set(val *AddonOperationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonOperationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonOperationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonOperationSpec(val *AddonOperationSpec) *NullableAddonOperationSpec {
	return &NullableAddonOperationSpec{value: val, isSet: true}
}

func (v NullableAddonOperationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonOperationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const AddonOperationType = "addon-operation"

func init() {
	sdkcommon.RegisterWorkflowStep(AddonOperationType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(AddonOperationType, FromWorkflowSubStep)
}

type AddonOperationWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties AddonOperationSpec
}

func AddonOperation(name string) *AddonOperationWorkflowStep {
	a := &AddonOperationWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: AddonOperationType,
	}}
	return a
}

func (a *AddonOperationWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range a.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  a.Base.DependsOn,
		If:         a.Base.If,
		Inputs:     a.Base.Inputs,
		Meta:       a.Base.Meta,
		Name:       a.Base.Name,
		Outputs:    a.Base.Outputs,
		Properties: util.Object2RawExtension(a.Properties),
		SubSteps:   subSteps,
		Timeout:    a.Base.Timeout,
		Type:       AddonOperationType,
	}
	return res
}

func (a *AddonOperationWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*AddonOperationWorkflowStep, error) {
	var properties AddonOperationSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := a.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	a.Base.Name = from.Name
	a.Base.DependsOn = from.DependsOn
	a.Base.Inputs = from.Inputs
	a.Base.Outputs = from.Outputs
	a.Base.If = from.If
	a.Base.Timeout = from.Timeout
	a.Base.Meta = from.Meta
	a.Base.Type = AddonOperationType
	a.Properties = properties
	a.Base.SubSteps = subSteps
	return a, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	a := &AddonOperationWorkflowStep{}
	return a.FromWorkflowStep(from)
}

func (a *AddonOperationWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*AddonOperationWorkflowStep, error) {
	var properties AddonOperationSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	a.Base.Name = from.Name
	a.Base.DependsOn = from.DependsOn
	a.Base.Inputs = from.Inputs
	a.Base.Outputs = from.Outputs
	a.Base.If = from.If
	a.Base.Timeout = from.Timeout
	a.Base.Meta = from.Meta
	a.Base.Type = AddonOperationType
	a.Properties = properties
	return a, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	a := &AddonOperationWorkflowStep{}
	return a.FromWorkflowSubStep(from)
}

func (a *AddonOperationWorkflowStep) WorkflowStepName() string {
	return a.Base.Name
}

func (a *AddonOperationWorkflowStep) DefType() string {
	return AddonOperationType
}

func (a *AddonOperationWorkflowStep) If(_if string) *AddonOperationWorkflowStep {
	a.Base.If = _if
	return a
}

func (a *AddonOperationWorkflowStep) Alias(alias string) *AddonOperationWorkflowStep {
	a.Base.Meta.Alias = alias
	return a
}

func (a *AddonOperationWorkflowStep) Timeout(timeout string) *AddonOperationWorkflowStep {
	a.Base.Timeout = timeout
	return a
}

func (a *AddonOperationWorkflowStep) DependsOn(dependsOn []string) *AddonOperationWorkflowStep {
	a.Base.DependsOn = dependsOn
	return a
}

func (a *AddonOperationWorkflowStep) Inputs(input common.StepInputs) *AddonOperationWorkflowStep {
	a.Base.Inputs = input
	return a
}

func (a *AddonOperationWorkflowStep) Outputs(output common.StepOutputs) *AddonOperationWorkflowStep {
	a.Base.Outputs = output
	return a
}
