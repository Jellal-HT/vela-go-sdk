/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package build_push_image

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the BuildPushImageSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &BuildPushImageSpec{}

// BuildPushImageSpec struct for BuildPushImageSpec
type BuildPushImageSpec struct {
	// Specify the build args
	buildArgs   []string     `json:"buildArgs,omitempty"`
	context     *Context     `json:"context,omitempty"`
	credentials *Credentials `json:"credentials,omitempty"`
	// Specify the dockerfile
	dockerfile *string `json:"dockerfile,omitempty"`
	// Specify the image
	image *string `json:"image,omitempty"`
	// Specify the kaniko executor image, default to oamdev/kaniko-executor:v1.9.1
	kanikoExecutor *string `json:"kanikoExecutor,omitempty"`
	// Specify the platform to build
	platform *string `json:"platform,omitempty"`
	// Specify the verbosity level
	verbosity *string `json:"verbosity,omitempty"`
}

// NewBuildPushImageSpecWith instantiates a new BuildPushImageSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildPushImageSpecWith() *BuildPushImageSpec {
	this := BuildPushImageSpec{}
	var dockerfile string = "./Dockerfile"
	this.dockerfile = &dockerfile
	var kanikoExecutor string = "oamdev/kaniko-executor:v1.9.1"
	this.kanikoExecutor = &kanikoExecutor
	var verbosity string = "info"
	this.verbosity = &verbosity
	return &this
}

// NewBuildPushImageSpec instantiates a new BuildPushImageSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildPushImageSpec() *BuildPushImageSpec {
	this := BuildPushImageSpec{}
	var dockerfile string = "./Dockerfile"
	this.dockerfile = &dockerfile
	var kanikoExecutor string = "oamdev/kaniko-executor:v1.9.1"
	this.kanikoExecutor = &kanikoExecutor
	var verbosity string = "info"
	this.verbosity = &verbosity
	return &this
}

// GetBuildArgs returns the BuildArgs field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetBuildArgs() []string {
	if o == nil || utils.IsNil(o.Properties.buildArgs) {
		var ret []string
		return ret
	}
	return o.Properties.buildArgs
}

// GetBuildArgsOk returns a tuple with the BuildArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetBuildArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.buildArgs) {
		return nil, false
	}
	return o.Properties.buildArgs, true
}

// HasBuildArgs returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasBuildArgs() bool {
	if o != nil && !utils.IsNil(o.Properties.buildArgs) {
		return true
	}

	return false
}

// BuildArgs gets a reference to the given []string and assigns it to the buildArgs field.
// buildArgs:  Specify the build args
func (o *BuildPushImageWorkflowStep) BuildArgs(v []string) *BuildPushImageWorkflowStep {
	o.Properties.buildArgs = v
	return o
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetContext() Context {
	if o == nil || utils.IsNil(o.Properties.context) {
		var ret Context
		return ret
	}
	return *o.Properties.context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetContextOk() (*Context, bool) {
	if o == nil || utils.IsNil(o.Properties.context) {
		return nil, false
	}
	return o.Properties.context, true
}

// HasContext returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasContext() bool {
	if o != nil && !utils.IsNil(o.Properties.context) {
		return true
	}

	return false
}

// Context gets a reference to the given Context and assigns it to the context field.
// context:
func (o *BuildPushImageWorkflowStep) Context(v Context) *BuildPushImageWorkflowStep {
	o.Properties.context = &v
	return o
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetCredentials() Credentials {
	if o == nil || utils.IsNil(o.Properties.credentials) {
		var ret Credentials
		return ret
	}
	return *o.Properties.credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetCredentialsOk() (*Credentials, bool) {
	if o == nil || utils.IsNil(o.Properties.credentials) {
		return nil, false
	}
	return o.Properties.credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasCredentials() bool {
	if o != nil && !utils.IsNil(o.Properties.credentials) {
		return true
	}

	return false
}

// Credentials gets a reference to the given Credentials and assigns it to the credentials field.
// credentials:
func (o *BuildPushImageWorkflowStep) Credentials(v Credentials) *BuildPushImageWorkflowStep {
	o.Properties.credentials = &v
	return o
}

// GetDockerfile returns the Dockerfile field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetDockerfile() string {
	if o == nil || utils.IsNil(o.Properties.dockerfile) {
		var ret string
		return ret
	}
	return *o.Properties.dockerfile
}

// GetDockerfileOk returns a tuple with the Dockerfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetDockerfileOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.dockerfile) {
		return nil, false
	}
	return o.Properties.dockerfile, true
}

// HasDockerfile returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasDockerfile() bool {
	if o != nil && !utils.IsNil(o.Properties.dockerfile) {
		return true
	}

	return false
}

// Dockerfile gets a reference to the given string and assigns it to the dockerfile field.
// dockerfile:  Specify the dockerfile
func (o *BuildPushImageWorkflowStep) Dockerfile(v string) *BuildPushImageWorkflowStep {
	o.Properties.dockerfile = &v
	return o
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetImage() string {
	if o == nil || utils.IsNil(o.Properties.image) {
		var ret string
		return ret
	}
	return *o.Properties.image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetImageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.image) {
		return nil, false
	}
	return o.Properties.image, true
}

// HasImage returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasImage() bool {
	if o != nil && !utils.IsNil(o.Properties.image) {
		return true
	}

	return false
}

// Image gets a reference to the given string and assigns it to the image field.
// image:  Specify the image
func (o *BuildPushImageWorkflowStep) Image(v string) *BuildPushImageWorkflowStep {
	o.Properties.image = &v
	return o
}

// GetKanikoExecutor returns the KanikoExecutor field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetKanikoExecutor() string {
	if o == nil || utils.IsNil(o.Properties.kanikoExecutor) {
		var ret string
		return ret
	}
	return *o.Properties.kanikoExecutor
}

// GetKanikoExecutorOk returns a tuple with the KanikoExecutor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetKanikoExecutorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.kanikoExecutor) {
		return nil, false
	}
	return o.Properties.kanikoExecutor, true
}

// HasKanikoExecutor returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasKanikoExecutor() bool {
	if o != nil && !utils.IsNil(o.Properties.kanikoExecutor) {
		return true
	}

	return false
}

// KanikoExecutor gets a reference to the given string and assigns it to the kanikoExecutor field.
// kanikoExecutor:  Specify the kaniko executor image, default to oamdev/kaniko-executor:v1.9.1
func (o *BuildPushImageWorkflowStep) KanikoExecutor(v string) *BuildPushImageWorkflowStep {
	o.Properties.kanikoExecutor = &v
	return o
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetPlatform() string {
	if o == nil || utils.IsNil(o.Properties.platform) {
		var ret string
		return ret
	}
	return *o.Properties.platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetPlatformOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.platform) {
		return nil, false
	}
	return o.Properties.platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasPlatform() bool {
	if o != nil && !utils.IsNil(o.Properties.platform) {
		return true
	}

	return false
}

// Platform gets a reference to the given string and assigns it to the platform field.
// platform:  Specify the platform to build
func (o *BuildPushImageWorkflowStep) Platform(v string) *BuildPushImageWorkflowStep {
	o.Properties.platform = &v
	return o
}

// GetVerbosity returns the Verbosity field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetVerbosity() string {
	if o == nil || utils.IsNil(o.Properties.verbosity) {
		var ret string
		return ret
	}
	return *o.Properties.verbosity
}

// GetVerbosityOk returns a tuple with the Verbosity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetVerbosityOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.verbosity) {
		return nil, false
	}
	return o.Properties.verbosity, true
}

// HasVerbosity returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasVerbosity() bool {
	if o != nil && !utils.IsNil(o.Properties.verbosity) {
		return true
	}

	return false
}

// Verbosity gets a reference to the given string and assigns it to the verbosity field.
// verbosity:  Specify the verbosity level
func (o *BuildPushImageWorkflowStep) Verbosity(v string) *BuildPushImageWorkflowStep {
	o.Properties.verbosity = &v
	return o
}

func (o BuildPushImageSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildPushImageSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.buildArgs) {
		toSerialize["buildArgs"] = o.buildArgs
	}
	if !utils.IsNil(o.context) {
		toSerialize["context"] = o.context
	}
	if !utils.IsNil(o.credentials) {
		toSerialize["credentials"] = o.credentials
	}
	if !utils.IsNil(o.dockerfile) {
		toSerialize["dockerfile"] = o.dockerfile
	}
	if !utils.IsNil(o.image) {
		toSerialize["image"] = o.image
	}
	if !utils.IsNil(o.kanikoExecutor) {
		toSerialize["kanikoExecutor"] = o.kanikoExecutor
	}
	if !utils.IsNil(o.platform) {
		toSerialize["platform"] = o.platform
	}
	if !utils.IsNil(o.verbosity) {
		toSerialize["verbosity"] = o.verbosity
	}
	return toSerialize, nil
}

type NullableBuildPushImageSpec struct {
	value *BuildPushImageSpec
	isSet bool
}

func (v NullableBuildPushImageSpec) Get() *BuildPushImageSpec {
	return v.value
}

func (v *NullableBuildPushImageSpec) Set(val *BuildPushImageSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildPushImageSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildPushImageSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildPushImageSpec(val *BuildPushImageSpec) *NullableBuildPushImageSpec {
	return &NullableBuildPushImageSpec{value: val, isSet: true}
}

func (v NullableBuildPushImageSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildPushImageSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const BuildPushImageType = "build-push-image"

func init() {
	sdkcommon.RegisterWorkflowStep(BuildPushImageType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(BuildPushImageType, FromWorkflowSubStep)
}

type BuildPushImageWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties BuildPushImageSpec
}

func BuildPushImage(name string) *BuildPushImageWorkflowStep {
	b := &BuildPushImageWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: BuildPushImageType,
	}}
	return b
}

func (b *BuildPushImageWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range b.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  b.Base.DependsOn,
		If:         b.Base.If,
		Inputs:     b.Base.Inputs,
		Meta:       b.Base.Meta,
		Name:       b.Base.Name,
		Outputs:    b.Base.Outputs,
		Properties: util.Object2RawExtension(b.Properties),
		SubSteps:   subSteps,
		Timeout:    b.Base.Timeout,
		Type:       BuildPushImageType,
	}
	return res
}

func (b *BuildPushImageWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*BuildPushImageWorkflowStep, error) {
	var properties BuildPushImageSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := b.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	b.Base.Name = from.Name
	b.Base.DependsOn = from.DependsOn
	b.Base.Inputs = from.Inputs
	b.Base.Outputs = from.Outputs
	b.Base.If = from.If
	b.Base.Timeout = from.Timeout
	b.Base.Meta = from.Meta
	b.Properties = properties
	b.Base.SubSteps = subSteps
	return b, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	b := &BuildPushImageWorkflowStep{}
	return b.FromWorkflowStep(from)
}

func (b *BuildPushImageWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*BuildPushImageWorkflowStep, error) {
	var properties BuildPushImageSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	b.Base.Name = from.Name
	b.Base.DependsOn = from.DependsOn
	b.Base.Inputs = from.Inputs
	b.Base.Outputs = from.Outputs
	b.Base.If = from.If
	b.Base.Timeout = from.Timeout
	b.Base.Meta = from.Meta
	b.Properties = properties
	return b, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	b := &BuildPushImageWorkflowStep{}
	return b.FromWorkflowSubStep(from)
}

func (b *BuildPushImageWorkflowStep) If(_if string) *BuildPushImageWorkflowStep {
	b.Base.If = _if
	return b
}

func (b *BuildPushImageWorkflowStep) Alias(alias string) *BuildPushImageWorkflowStep {
	b.Base.Meta.Alias = alias
	return b
}

func (b *BuildPushImageWorkflowStep) Timeout(timeout string) *BuildPushImageWorkflowStep {
	b.Base.Timeout = timeout
	return b
}

func (b *BuildPushImageWorkflowStep) DependsOn(dependsOn []string) *BuildPushImageWorkflowStep {
	b.Base.DependsOn = dependsOn
	return b
}

func (b *BuildPushImageWorkflowStep) Inputs(input common.StepInputs) *BuildPushImageWorkflowStep {
	b.Base.Inputs = input
	return b
}

func (b *BuildPushImageWorkflowStep) Outputs(output common.StepOutputs) *BuildPushImageWorkflowStep {
	b.Base.Outputs = output
	return b
}

func (b *BuildPushImageWorkflowStep) DefName() string {
	return b.Base.Name
}

func (b *BuildPushImageWorkflowStep) DefType() string {
	return BuildPushImageType
}
