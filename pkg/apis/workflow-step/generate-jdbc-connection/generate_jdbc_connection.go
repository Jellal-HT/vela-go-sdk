/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generate_jdbc_connection

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the GenerateJdbcConnectionSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GenerateJdbcConnectionSpec{}

// GenerateJdbcConnectionSpec struct for GenerateJdbcConnectionSpec
type GenerateJdbcConnectionSpec struct {
	// Specify the name of the secret generated by database component
	name string `json:"name"`
	// Specify the namespace of the secret generated by database component
	namespace *string `json:"namespace,omitempty"`
}

// NewGenerateJdbcConnectionSpecWith instantiates a new GenerateJdbcConnectionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateJdbcConnectionSpecWith(name string) *GenerateJdbcConnectionSpec {
	this := GenerateJdbcConnectionSpec{}
	this.name = name
	return &this
}

// NewGenerateJdbcConnectionSpec instantiates a new GenerateJdbcConnectionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateJdbcConnectionSpec() *GenerateJdbcConnectionSpec {
	this := GenerateJdbcConnectionSpec{}
	return &this
}

// GetName returns the Name field value
func (o *GenerateJdbcConnectionWorkflowStep) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GenerateJdbcConnectionWorkflowStep) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.name, true
}

// Name sets field value
func (o *GenerateJdbcConnectionWorkflowStep) Name(v string) *GenerateJdbcConnectionWorkflowStep {
	o.Properties.name = v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *GenerateJdbcConnectionWorkflowStep) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		var ret string
		return ret
	}
	return *o.Properties.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateJdbcConnectionWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		return nil, false
	}
	return o.Properties.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *GenerateJdbcConnectionWorkflowStep) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.namespace) {
		return true
	}

	return false
}

// Namespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the namespace of the secret generated by database component
func (o *GenerateJdbcConnectionWorkflowStep) Namespace(v string) *GenerateJdbcConnectionWorkflowStep {
	o.Properties.namespace = &v
	return o
}

func (o GenerateJdbcConnectionSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateJdbcConnectionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.name
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	return toSerialize, nil
}

type NullableGenerateJdbcConnectionSpec struct {
	value *GenerateJdbcConnectionSpec
	isSet bool
}

func (v NullableGenerateJdbcConnectionSpec) Get() *GenerateJdbcConnectionSpec {
	return v.value
}

func (v *NullableGenerateJdbcConnectionSpec) Set(val *GenerateJdbcConnectionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateJdbcConnectionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateJdbcConnectionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateJdbcConnectionSpec(val *GenerateJdbcConnectionSpec) *NullableGenerateJdbcConnectionSpec {
	return &NullableGenerateJdbcConnectionSpec{value: val, isSet: true}
}

func (v NullableGenerateJdbcConnectionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateJdbcConnectionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const GenerateJdbcConnectionType = "generate-jdbc-connection"

func init() {
	sdkcommon.RegisterWorkflowStep(GenerateJdbcConnectionType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(GenerateJdbcConnectionType, FromWorkflowSubStep)
}

type GenerateJdbcConnectionWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties GenerateJdbcConnectionSpec
}

func GenerateJdbcConnection(name string) *GenerateJdbcConnectionWorkflowStep {
	g := &GenerateJdbcConnectionWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
	}}
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range g.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  g.Base.DependsOn,
		If:         g.Base.If,
		Inputs:     g.Base.Inputs,
		Meta:       g.Base.Meta,
		Name:       g.Base.Name,
		Outputs:    g.Base.Outputs,
		Properties: util.Object2RawExtension(g.Properties),
		SubSteps:   subSteps,
		Timeout:    g.Base.Timeout,
		Type:       GenerateJdbcConnectionType,
	}
	return res
}

func (g *GenerateJdbcConnectionWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*GenerateJdbcConnectionWorkflowStep, error) {
	var properties GenerateJdbcConnectionSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := g.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	g.Base.Name = from.Name
	g.Base.DependsOn = from.DependsOn
	g.Base.Inputs = from.Inputs
	g.Base.Outputs = from.Outputs
	g.Base.If = from.If
	g.Base.Timeout = from.Timeout
	g.Base.Meta = from.Meta
	g.Properties = properties
	g.Base.SubSteps = subSteps
	return g, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	g := &GenerateJdbcConnectionWorkflowStep{}
	return g.FromWorkflowStep(from)
}

func (g *GenerateJdbcConnectionWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*GenerateJdbcConnectionWorkflowStep, error) {
	var properties GenerateJdbcConnectionSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	g.Base.Name = from.Name
	g.Base.DependsOn = from.DependsOn
	g.Base.Inputs = from.Inputs
	g.Base.Outputs = from.Outputs
	g.Base.If = from.If
	g.Base.Timeout = from.Timeout
	g.Base.Meta = from.Meta
	g.Properties = properties
	return g, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	g := &GenerateJdbcConnectionWorkflowStep{}
	return g.FromWorkflowSubStep(from)
}

func (g *GenerateJdbcConnectionWorkflowStep) If(_if string) *GenerateJdbcConnectionWorkflowStep {
	g.Base.If = _if
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) Alias(alias string) *GenerateJdbcConnectionWorkflowStep {
	g.Base.Meta.Alias = alias
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) Timeout(timeout string) *GenerateJdbcConnectionWorkflowStep {
	g.Base.Timeout = timeout
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) DependsOn(dependsOn []string) *GenerateJdbcConnectionWorkflowStep {
	g.Base.DependsOn = dependsOn
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) Inputs(input common.StepInputs) *GenerateJdbcConnectionWorkflowStep {
	g.Base.Inputs = input
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) Outputs(output common.StepOutputs) *GenerateJdbcConnectionWorkflowStep {
	g.Base.Outputs = output
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) DefName() string {
	return g.Base.Name
}

func (g *GenerateJdbcConnectionWorkflowStep) DefType() string {
	return GenerateJdbcConnectionType
}
