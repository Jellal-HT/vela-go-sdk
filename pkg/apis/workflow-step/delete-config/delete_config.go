/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delete_config

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/chivalryq/vela-go-sdk/pkg/apis/common"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the DeleteConfigSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DeleteConfigSpec{}

// DeleteConfigSpec struct for DeleteConfigSpec
type DeleteConfigSpec struct {
	// Specify the name of the config.
	name *string `json:"name,omitempty"`
	// Specify the namespace of the config.
	namespace *string `json:"namespace,omitempty"`
}

// NewDeleteConfigSpecWith instantiates a new DeleteConfigSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteConfigSpecWith() *DeleteConfigSpec {
	this := DeleteConfigSpec{}
	return &this
}

// NewDeleteConfigSpec instantiates a new DeleteConfigSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteConfigSpec() *DeleteConfigSpec {
	this := DeleteConfigSpec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeleteConfigWorkflowStep) GetName() string {
	if o == nil || utils.IsNil(o.Properties.name) {
		var ret string
		return ret
	}
	return *o.Properties.name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteConfigWorkflowStep) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.name) {
		return nil, false
	}
	return o.Properties.name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeleteConfigWorkflowStep) HasName() bool {
	if o != nil && !utils.IsNil(o.Properties.name) {
		return true
	}

	return false
}

// Name gets a reference to the given string and assigns it to the name field.
// name:  Specify the name of the config.
func (o *DeleteConfigWorkflowStep) Name(v string) *DeleteConfigWorkflowStep {
	o.Properties.name = &v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *DeleteConfigWorkflowStep) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		var ret string
		return ret
	}
	return *o.Properties.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteConfigWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		return nil, false
	}
	return o.Properties.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *DeleteConfigWorkflowStep) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.namespace) {
		return true
	}

	return false
}

// Namespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the namespace of the config.
func (o *DeleteConfigWorkflowStep) Namespace(v string) *DeleteConfigWorkflowStep {
	o.Properties.namespace = &v
	return o
}

func (o DeleteConfigSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteConfigSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	return toSerialize, nil
}

type NullableDeleteConfigSpec struct {
	value *DeleteConfigSpec
	isSet bool
}

func (v NullableDeleteConfigSpec) Get() *DeleteConfigSpec {
	return v.value
}

func (v *NullableDeleteConfigSpec) Set(val *DeleteConfigSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteConfigSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteConfigSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteConfigSpec(val *DeleteConfigSpec) *NullableDeleteConfigSpec {
	return &NullableDeleteConfigSpec{value: val, isSet: true}
}

func (v NullableDeleteConfigSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteConfigSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const DeleteConfigType = "delete-config"

func init() {
	sdkcommon.RegisterWorkflowStep(DeleteConfigType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(DeleteConfigType, FromWorkflowSubStep)
}

type DeleteConfigWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties DeleteConfigSpec
}

func DeleteConfig(name string) *DeleteConfigWorkflowStep {
	d := &DeleteConfigWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: DeleteConfigType,
	}}
	return d
}

func (d *DeleteConfigWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range d.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  d.Base.DependsOn,
		If:         d.Base.If,
		Inputs:     d.Base.Inputs,
		Meta:       d.Base.Meta,
		Name:       d.Base.Name,
		Outputs:    d.Base.Outputs,
		Properties: util.Object2RawExtension(d.Properties),
		SubSteps:   subSteps,
		Timeout:    d.Base.Timeout,
		Type:       DeleteConfigType,
	}
	return res
}

func (d *DeleteConfigWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*DeleteConfigWorkflowStep, error) {
	var properties DeleteConfigSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := d.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	d.Base.Name = from.Name
	d.Base.DependsOn = from.DependsOn
	d.Base.Inputs = from.Inputs
	d.Base.Outputs = from.Outputs
	d.Base.If = from.If
	d.Base.Timeout = from.Timeout
	d.Base.Meta = from.Meta
	d.Properties = properties
	d.Base.SubSteps = subSteps
	return d, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	d := &DeleteConfigWorkflowStep{}
	return d.FromWorkflowStep(from)
}

func (d *DeleteConfigWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*DeleteConfigWorkflowStep, error) {
	var properties DeleteConfigSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	d.Base.Name = from.Name
	d.Base.DependsOn = from.DependsOn
	d.Base.Inputs = from.Inputs
	d.Base.Outputs = from.Outputs
	d.Base.If = from.If
	d.Base.Timeout = from.Timeout
	d.Base.Meta = from.Meta
	d.Properties = properties
	return d, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	d := &DeleteConfigWorkflowStep{}
	return d.FromWorkflowSubStep(from)
}

func (d *DeleteConfigWorkflowStep) If(_if string) *DeleteConfigWorkflowStep {
	d.Base.If = _if
	return d
}

func (d *DeleteConfigWorkflowStep) Alias(alias string) *DeleteConfigWorkflowStep {
	d.Base.Meta.Alias = alias
	return d
}

func (d *DeleteConfigWorkflowStep) Timeout(timeout string) *DeleteConfigWorkflowStep {
	d.Base.Timeout = timeout
	return d
}

func (d *DeleteConfigWorkflowStep) DependsOn(dependsOn []string) *DeleteConfigWorkflowStep {
	d.Base.DependsOn = dependsOn
	return d
}

func (d *DeleteConfigWorkflowStep) Inputs(input common.StepInputs) *DeleteConfigWorkflowStep {
	d.Base.Inputs = input
	return d
}

func (d *DeleteConfigWorkflowStep) Outputs(output common.StepOutputs) *DeleteConfigWorkflowStep {
	d.Base.Outputs = output
	return d
}

func (d *DeleteConfigWorkflowStep) DefName() string {
	return d.Base.Name
}

func (d *DeleteConfigWorkflowStep) DefType() string {
	return DeleteConfigType
}
