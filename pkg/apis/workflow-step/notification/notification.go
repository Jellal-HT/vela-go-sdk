/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the NotificationSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NotificationSpec{}

// NotificationSpec struct for NotificationSpec
type NotificationSpec struct {
	dingding *Dingding `json:"dingding,omitempty"`
	email    *Email    `json:"email,omitempty"`
	lark     *Lark     `json:"lark,omitempty"`
	slack    *Slack    `json:"slack,omitempty"`
}

// NewNotificationSpecWith instantiates a new NotificationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSpecWith() *NotificationSpec {
	this := NotificationSpec{}
	return &this
}

// NewNotificationSpec instantiates a new NotificationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSpec() *NotificationSpec {
	this := NotificationSpec{}
	return &this
}

// GetDingding returns the Dingding field value if set, zero value otherwise.
func (o *NotificationWorkflowStep) GetDingding() Dingding {
	if o == nil || utils.IsNil(o.Properties.dingding) {
		var ret Dingding
		return ret
	}
	return *o.Properties.dingding
}

// GetDingdingOk returns a tuple with the Dingding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationWorkflowStep) GetDingdingOk() (*Dingding, bool) {
	if o == nil || utils.IsNil(o.Properties.dingding) {
		return nil, false
	}
	return o.Properties.dingding, true
}

// HasDingding returns a boolean if a field has been set.
func (o *NotificationWorkflowStep) HasDingding() bool {
	if o != nil && !utils.IsNil(o.Properties.dingding) {
		return true
	}

	return false
}

// Dingding gets a reference to the given Dingding and assigns it to the dingding field.
// dingding:
func (o *NotificationWorkflowStep) Dingding(v Dingding) *NotificationWorkflowStep {
	o.Properties.dingding = &v
	return o
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *NotificationWorkflowStep) GetEmail() Email {
	if o == nil || utils.IsNil(o.Properties.email) {
		var ret Email
		return ret
	}
	return *o.Properties.email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationWorkflowStep) GetEmailOk() (*Email, bool) {
	if o == nil || utils.IsNil(o.Properties.email) {
		return nil, false
	}
	return o.Properties.email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *NotificationWorkflowStep) HasEmail() bool {
	if o != nil && !utils.IsNil(o.Properties.email) {
		return true
	}

	return false
}

// Email gets a reference to the given Email and assigns it to the email field.
// email:
func (o *NotificationWorkflowStep) Email(v Email) *NotificationWorkflowStep {
	o.Properties.email = &v
	return o
}

// GetLark returns the Lark field value if set, zero value otherwise.
func (o *NotificationWorkflowStep) GetLark() Lark {
	if o == nil || utils.IsNil(o.Properties.lark) {
		var ret Lark
		return ret
	}
	return *o.Properties.lark
}

// GetLarkOk returns a tuple with the Lark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationWorkflowStep) GetLarkOk() (*Lark, bool) {
	if o == nil || utils.IsNil(o.Properties.lark) {
		return nil, false
	}
	return o.Properties.lark, true
}

// HasLark returns a boolean if a field has been set.
func (o *NotificationWorkflowStep) HasLark() bool {
	if o != nil && !utils.IsNil(o.Properties.lark) {
		return true
	}

	return false
}

// Lark gets a reference to the given Lark and assigns it to the lark field.
// lark:
func (o *NotificationWorkflowStep) Lark(v Lark) *NotificationWorkflowStep {
	o.Properties.lark = &v
	return o
}

// GetSlack returns the Slack field value if set, zero value otherwise.
func (o *NotificationWorkflowStep) GetSlack() Slack {
	if o == nil || utils.IsNil(o.Properties.slack) {
		var ret Slack
		return ret
	}
	return *o.Properties.slack
}

// GetSlackOk returns a tuple with the Slack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationWorkflowStep) GetSlackOk() (*Slack, bool) {
	if o == nil || utils.IsNil(o.Properties.slack) {
		return nil, false
	}
	return o.Properties.slack, true
}

// HasSlack returns a boolean if a field has been set.
func (o *NotificationWorkflowStep) HasSlack() bool {
	if o != nil && !utils.IsNil(o.Properties.slack) {
		return true
	}

	return false
}

// Slack gets a reference to the given Slack and assigns it to the slack field.
// slack:
func (o *NotificationWorkflowStep) Slack(v Slack) *NotificationWorkflowStep {
	o.Properties.slack = &v
	return o
}

func (o NotificationSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.dingding) {
		toSerialize["dingding"] = o.dingding
	}
	if !utils.IsNil(o.email) {
		toSerialize["email"] = o.email
	}
	if !utils.IsNil(o.lark) {
		toSerialize["lark"] = o.lark
	}
	if !utils.IsNil(o.slack) {
		toSerialize["slack"] = o.slack
	}
	return toSerialize, nil
}

type NullableNotificationSpec struct {
	value *NotificationSpec
	isSet bool
}

func (v NullableNotificationSpec) Get() *NotificationSpec {
	return v.value
}

func (v *NullableNotificationSpec) Set(val *NotificationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSpec(val *NotificationSpec) *NullableNotificationSpec {
	return &NullableNotificationSpec{value: val, isSet: true}
}

func (v NullableNotificationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const NotificationType = "notification"

type NotificationWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties NotificationSpec
}

func Notification(name string) *NotificationWorkflowStep {
	n := &NotificationWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
	}}
	return n
}

func (n *NotificationWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range n.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  n.Base.DependsOn,
		If:         n.Base.If,
		Inputs:     n.Base.Inputs,
		Meta:       n.Base.Meta,
		Name:       n.Base.Name,
		Outputs:    n.Base.Outputs,
		Properties: util.Object2RawExtension(n.Properties),
		SubSteps:   subSteps,
		Timeout:    n.Base.Timeout,
		Type:       NotificationType,
	}
	return res
}

func (n *NotificationWorkflowStep) If(_if string) *NotificationWorkflowStep {
	n.Base.If = _if
	return n
}

func (n *NotificationWorkflowStep) Alias(alias string) *NotificationWorkflowStep {
	n.Base.Meta.Alias = alias
	return n
}

func (n *NotificationWorkflowStep) Timeout(timeout string) *NotificationWorkflowStep {
	n.Base.Timeout = timeout
	return n
}

func (n *NotificationWorkflowStep) DependsOn(dependsOn []string) *NotificationWorkflowStep {
	n.Base.DependsOn = dependsOn
	return n
}

func (n *NotificationWorkflowStep) Inputs(input common.StepInputs) *NotificationWorkflowStep {
	n.Base.Inputs = input
	return n
}

func (n *NotificationWorkflowStep) Outputs(output common.StepOutputs) *NotificationWorkflowStep {
	n.Base.Outputs = output
	return n
}

func (n *NotificationWorkflowStep) Name() string {
	return n.Base.Name
}

func (n *NotificationWorkflowStep) Type() string {
	return NotificationType
}
