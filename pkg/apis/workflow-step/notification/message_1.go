/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the Message1 type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Message1{}

// Message1 Specify the message that you want to sent, refer to [Lark messaging](https://open.feishu.cn/document/ukTMukTMukTM/ucTM5YjL3ETO24yNxkjN#8b0f2a1b).
type Message1 struct {
	// content should be json encode string
	content *string `json:"content,omitempty"`
	// msg_type can be text, post, image, interactive, share_chat, share_user, audio, media, file, sticker
	msgType *string `json:"msg_type,omitempty"`
}

// NewMessage1With instantiates a new Message1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessage1With() *Message1 {
	this := Message1{}
	return &this
}

// NewMessage1 instantiates a new Message1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessage1() *Message1 {
	this := Message1{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Message1) GetContent() string {
	if o == nil || utils.IsNil(o.content) {
		var ret string
		return ret
	}
	return *o.content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message1) GetContentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.content) {
		return nil, false
	}
	return o.content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Message1) HasContent() bool {
	if o != nil && !utils.IsNil(o.content) {
		return true
	}

	return false
}

// Content gets a reference to the given string and assigns it to the content field.
// content:  content should be json encode string
func (o *Message1) Content(v string) *Message1 {
	o.content = &v
	return o
}

// GetMsgType returns the MsgType field value if set, zero value otherwise.
func (o *Message1) GetMsgType() string {
	if o == nil || utils.IsNil(o.msgType) {
		var ret string
		return ret
	}
	return *o.msgType
}

// GetMsgTypeOk returns a tuple with the MsgType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message1) GetMsgTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.msgType) {
		return nil, false
	}
	return o.msgType, true
}

// HasMsgType returns a boolean if a field has been set.
func (o *Message1) HasMsgType() bool {
	if o != nil && !utils.IsNil(o.msgType) {
		return true
	}

	return false
}

// MsgType gets a reference to the given string and assigns it to the msgType field.
// msgType:  msg_type can be text, post, image, interactive, share_chat, share_user, audio, media, file, sticker
func (o *Message1) MsgType(v string) *Message1 {
	o.msgType = &v
	return o
}

func (o Message1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Message1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.content) {
		toSerialize["content"] = o.content
	}
	if !utils.IsNil(o.msgType) {
		toSerialize["msg_type"] = o.msgType
	}
	return toSerialize, nil
}

type NullableMessage1 struct {
	value *Message1
	isSet bool
}

func (v NullableMessage1) Get() *Message1 {
	return v.value
}

func (v *NullableMessage1) Set(val *Message1) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage1) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage1(val *Message1) *NullableMessage1 {
	return &NullableMessage1{value: val, isSet: true}
}

func (v NullableMessage1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
