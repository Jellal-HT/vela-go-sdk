/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the From type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &From{}

// From Specify the email info that you want to send from
type From struct {
	// Specify the email address that you want to send from
	address string `json:"address"`
	// The alias is the email alias to show after sending the email
	alias *string `json:"alias,omitempty"`
	// Specify the host of your email
	host     string   `json:"host"`
	password Password `json:"password"`
	// Specify the port of the email host, default to 587
	port int32 `json:"port"`
}

// NewFromWith instantiates a new From object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFromWith(address string, host string, password Password, port int32) *From {
	this := From{}
	this.address = address
	this.host = host
	this.password = password
	this.port = port
	return &this
}

// NewFrom instantiates a new From object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrom() *From {
	this := From{}
	var port int32 = 587
	this.port = port
	return &this
}

// GetAddress returns the Address field value
func (o *From) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *From) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.address, true
}

// Address sets field value
func (o *From) Address(v string) *From {
	o.address = v
	return o
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *From) GetAlias() string {
	if o == nil || utils.IsNil(o.alias) {
		var ret string
		return ret
	}
	return *o.alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *From) GetAliasOk() (*string, bool) {
	if o == nil || utils.IsNil(o.alias) {
		return nil, false
	}
	return o.alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *From) HasAlias() bool {
	if o != nil && !utils.IsNil(o.alias) {
		return true
	}

	return false
}

// Alias gets a reference to the given string and assigns it to the alias field.
// alias:  The alias is the email alias to show after sending the email
func (o *From) Alias(v string) *From {
	o.alias = &v
	return o
}

// GetHost returns the Host field value
func (o *From) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *From) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.host, true
}

// Host sets field value
func (o *From) Host(v string) *From {
	o.host = v
	return o
}

// GetPassword returns the Password field value
func (o *From) GetPassword() Password {
	if o == nil {
		var ret Password
		return ret
	}

	return o.password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *From) GetPasswordOk() (*Password, bool) {
	if o == nil {
		return nil, false
	}
	return &o.password, true
}

// Password sets field value
func (o *From) Password(v Password) *From {
	o.password = v
	return o
}

// GetPort returns the Port field value
func (o *From) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *From) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.port, true
}

// Port sets field value
func (o *From) Port(v int32) *From {
	o.port = v
	return o
}

func (o From) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o From) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.address
	if !utils.IsNil(o.alias) {
		toSerialize["alias"] = o.alias
	}
	toSerialize["host"] = o.host
	toSerialize["password"] = o.password
	toSerialize["port"] = o.port
	return toSerialize, nil
}

type NullableFrom struct {
	value *From
	isSet bool
}

func (v NullableFrom) Get() *From {
	return v.value
}

func (v *NullableFrom) Set(val *From) {
	v.value = val
	v.isSet = true
}

func (v NullableFrom) IsSet() bool {
	return v.isSet
}

func (v *NullableFrom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrom(val *From) *NullableFrom {
	return &NullableFrom{value: val, isSet: true}
}

func (v NullableFrom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
