/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the Lark type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Lark{}

// Lark Please fulfill its url and message if you want to send Lark messages
type Lark struct {
	message *Message1 `json:"message,omitempty"`
	url     *Url1     `json:"url,omitempty"`
}

// NewLarkWith instantiates a new Lark object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLarkWith() *Lark {
	this := Lark{}
	return &this
}

// NewLark instantiates a new Lark object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLark() *Lark {
	this := Lark{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Lark) GetMessage() Message1 {
	if o == nil || utils.IsNil(o.message) {
		var ret Message1
		return ret
	}
	return *o.message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lark) GetMessageOk() (*Message1, bool) {
	if o == nil || utils.IsNil(o.message) {
		return nil, false
	}
	return o.message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Lark) HasMessage() bool {
	if o != nil && !utils.IsNil(o.message) {
		return true
	}

	return false
}

// Message gets a reference to the given Message1 and assigns it to the message field.
// message:
func (o *Lark) Message(v Message1) *Lark {
	o.message = &v
	return o
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Lark) GetUrl() Url1 {
	if o == nil || utils.IsNil(o.url) {
		var ret Url1
		return ret
	}
	return *o.url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lark) GetUrlOk() (*Url1, bool) {
	if o == nil || utils.IsNil(o.url) {
		return nil, false
	}
	return o.url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Lark) HasUrl() bool {
	if o != nil && !utils.IsNil(o.url) {
		return true
	}

	return false
}

// Url gets a reference to the given Url1 and assigns it to the url field.
// url:
func (o *Lark) Url(v Url1) *Lark {
	o.url = &v
	return o
}

func (o Lark) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Lark) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.message) {
		toSerialize["message"] = o.message
	}
	if !utils.IsNil(o.url) {
		toSerialize["url"] = o.url
	}
	return toSerialize, nil
}

type NullableLark struct {
	value *Lark
	isSet bool
}

func (v NullableLark) Get() *Lark {
	return v.value
}

func (v *NullableLark) Set(val *Lark) {
	v.value = val
	v.isSet = true
}

func (v NullableLark) IsSet() bool {
	return v.isSet
}

func (v *NullableLark) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLark(val *Lark) *NullableLark {
	return &NullableLark{value: val, isSet: true}
}

func (v NullableLark) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLark) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
