/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the Message2 type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Message2{}

// Message2 Specify the message that you want to sent, refer to [slack messaging](https://api.slack.com/reference/messaging/payload)
type Message2 struct {
	Attachments NullableAttachments  `json:"attachments,omitempty"`
	Blocks      utils.NullableString `json:"blocks,omitempty"`
	// Specify the message text format in markdown for slack notification
	Mrkdwn *bool `json:"mrkdwn,omitempty"`
	// Specify the message text for slack notification
	Text     *string `json:"text,omitempty"`
	ThreadTs *string `json:"thread_ts,omitempty"`
}

// NewMessage2With instantiates a new Message2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessage2With() *Message2 {
	this := Message2{}
	var mrkdwn bool = true
	this.Mrkdwn = &mrkdwn
	return &this
}

// NewMessage2 instantiates a new Message2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessage2() *Message2 {
	this := Message2{}
	var mrkdwn bool = true
	this.Mrkdwn = &mrkdwn
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Message2) GetAttachments() Attachments {
	if o == nil || utils.IsNil(o.Attachments.Get()) {
		var ret Attachments
		return ret
	}
	return *o.Attachments.Get()
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Message2) GetAttachmentsOk() (*Attachments, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attachments.Get(), o.Attachments.IsSet()
}

// HasAttachments returns a boolean if a field has been set.
func (o *Message2) HasAttachments() bool {
	if o != nil && o.Attachments.IsSet() {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given NullableAttachments and assigns it to the attachments field.
// Attachments:
func (o *Message2) SetAttachments(v Attachments) *Message2 {
	o.Attachments.Set(&v)
	return o
}

// SetAttachmentsNil sets the value for Attachments to be an explicit nil
func (o *Message2) SetAttachmentsNil() {
	o.Attachments.Set(nil)
}

// UnsetAttachments ensures that no value is present for Attachments, not even an explicit nil
func (o *Message2) UnsetAttachments() {
	o.Attachments.Unset()
}

// GetBlocks returns the Blocks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Message2) GetBlocks() string {
	if o == nil || utils.IsNil(o.Blocks.Get()) {
		var ret string
		return ret
	}
	return *o.Blocks.Get()
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Message2) GetBlocksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Blocks.Get(), o.Blocks.IsSet()
}

// HasBlocks returns a boolean if a field has been set.
func (o *Message2) HasBlocks() bool {
	if o != nil && o.Blocks.IsSet() {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given utils.NullableString and assigns it to the blocks field.
// Blocks:
func (o *Message2) SetBlocks(v string) *Message2 {
	o.Blocks.Set(&v)
	return o
}

// SetBlocksNil sets the value for Blocks to be an explicit nil
func (o *Message2) SetBlocksNil() {
	o.Blocks.Set(nil)
}

// UnsetBlocks ensures that no value is present for Blocks, not even an explicit nil
func (o *Message2) UnsetBlocks() {
	o.Blocks.Unset()
}

// GetMrkdwn returns the Mrkdwn field value if set, zero value otherwise.
func (o *Message2) GetMrkdwn() bool {
	if o == nil || utils.IsNil(o.Mrkdwn) {
		var ret bool
		return ret
	}
	return *o.Mrkdwn
}

// GetMrkdwnOk returns a tuple with the Mrkdwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message2) GetMrkdwnOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Mrkdwn) {
		return nil, false
	}
	return o.Mrkdwn, true
}

// HasMrkdwn returns a boolean if a field has been set.
func (o *Message2) HasMrkdwn() bool {
	if o != nil && !utils.IsNil(o.Mrkdwn) {
		return true
	}

	return false
}

// SetMrkdwn gets a reference to the given bool and assigns it to the mrkdwn field.
// Mrkdwn:  Specify the message text format in markdown for slack notification
func (o *Message2) SetMrkdwn(v bool) *Message2 {
	o.Mrkdwn = &v
	return o
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Message2) GetText() string {
	if o == nil || utils.IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message2) GetTextOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Message2) HasText() bool {
	if o != nil && !utils.IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the text field.
// Text:  Specify the message text for slack notification
func (o *Message2) SetText(v string) *Message2 {
	o.Text = &v
	return o
}

// GetThreadTs returns the ThreadTs field value if set, zero value otherwise.
func (o *Message2) GetThreadTs() string {
	if o == nil || utils.IsNil(o.ThreadTs) {
		var ret string
		return ret
	}
	return *o.ThreadTs
}

// GetThreadTsOk returns a tuple with the ThreadTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message2) GetThreadTsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ThreadTs) {
		return nil, false
	}
	return o.ThreadTs, true
}

// HasThreadTs returns a boolean if a field has been set.
func (o *Message2) HasThreadTs() bool {
	if o != nil && !utils.IsNil(o.ThreadTs) {
		return true
	}

	return false
}

// SetThreadTs gets a reference to the given string and assigns it to the threadTs field.
// ThreadTs:
func (o *Message2) SetThreadTs(v string) *Message2 {
	o.ThreadTs = &v
	return o
}

func (o Message2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Message2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Attachments.IsSet() {
		toSerialize["attachments"] = o.Attachments.Get()
	}
	if o.Blocks.IsSet() {
		toSerialize["blocks"] = o.Blocks.Get()
	}
	if !utils.IsNil(o.Mrkdwn) {
		toSerialize["mrkdwn"] = o.Mrkdwn
	}
	if !utils.IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !utils.IsNil(o.ThreadTs) {
		toSerialize["thread_ts"] = o.ThreadTs
	}
	return toSerialize, nil
}

type NullableMessage2 struct {
	value *Message2
	isSet bool
}

func (v NullableMessage2) Get() *Message2 {
	return v.value
}

func (v *NullableMessage2) Set(val *Message2) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage2) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage2(val *Message2) *NullableMessage2 {
	return &NullableMessage2{value: val, isSet: true}
}

func (v NullableMessage2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
