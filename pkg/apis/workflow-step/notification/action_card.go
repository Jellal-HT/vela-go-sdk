/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the ActionCard type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ActionCard{}

// ActionCard struct for ActionCard
type ActionCard struct {
	btnOrientation *string              `json:"btnOrientation,omitempty"`
	btns           utils.NullableString `json:"btns,omitempty"`
	hideAvatar     *string              `json:"hideAvatar,omitempty"`
	singleTitle    *string              `json:"singleTitle,omitempty"`
	singleURL      *string              `json:"singleURL,omitempty"`
	text           *string              `json:"text,omitempty"`
	title          *string              `json:"title,omitempty"`
}

// NewActionCardWith instantiates a new ActionCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionCardWith() *ActionCard {
	this := ActionCard{}
	return &this
}

// NewActionCard instantiates a new ActionCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionCard() *ActionCard {
	this := ActionCard{}
	return &this
}

// GetBtnOrientation returns the BtnOrientation field value if set, zero value otherwise.
func (o *ActionCard) GetBtnOrientation() string {
	if o == nil || utils.IsNil(o.btnOrientation) {
		var ret string
		return ret
	}
	return *o.btnOrientation
}

// GetBtnOrientationOk returns a tuple with the BtnOrientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionCard) GetBtnOrientationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.btnOrientation) {
		return nil, false
	}
	return o.btnOrientation, true
}

// HasBtnOrientation returns a boolean if a field has been set.
func (o *ActionCard) HasBtnOrientation() bool {
	if o != nil && !utils.IsNil(o.btnOrientation) {
		return true
	}

	return false
}

// BtnOrientation gets a reference to the given string and assigns it to the btnOrientation field.
// btnOrientation:
func (o *ActionCard) BtnOrientation(v string) *ActionCard {
	o.btnOrientation = &v
	return o
}

// GetBtns returns the Btns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionCard) GetBtns() string {
	if o == nil || utils.IsNil(o.btns.Get()) {
		var ret string
		return ret
	}
	return *o.btns.Get()
}

// GetBtnsOk returns a tuple with the Btns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionCard) GetBtnsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.btns.Get(), o.btns.IsSet()
}

// HasBtns returns a boolean if a field has been set.
func (o *ActionCard) HasBtns() bool {
	if o != nil && o.btns.IsSet() {
		return true
	}

	return false
}

// Btns gets a reference to the given utils.NullableString and assigns it to the btns field.
// btns:
func (o *ActionCard) Btns(v string) *ActionCard {
	o.btns.Set(&v)
	return o
}

// SetBtnsNil sets the value for Btns to be an explicit nil
func (o *ActionCard) SetBtnsNil() {
	o.btns.Set(nil)
}

// UnsetBtns ensures that no value is present for Btns, not even an explicit nil
func (o *ActionCard) UnsetBtns() {
	o.btns.Unset()
}

// GetHideAvatar returns the HideAvatar field value if set, zero value otherwise.
func (o *ActionCard) GetHideAvatar() string {
	if o == nil || utils.IsNil(o.hideAvatar) {
		var ret string
		return ret
	}
	return *o.hideAvatar
}

// GetHideAvatarOk returns a tuple with the HideAvatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionCard) GetHideAvatarOk() (*string, bool) {
	if o == nil || utils.IsNil(o.hideAvatar) {
		return nil, false
	}
	return o.hideAvatar, true
}

// HasHideAvatar returns a boolean if a field has been set.
func (o *ActionCard) HasHideAvatar() bool {
	if o != nil && !utils.IsNil(o.hideAvatar) {
		return true
	}

	return false
}

// HideAvatar gets a reference to the given string and assigns it to the hideAvatar field.
// hideAvatar:
func (o *ActionCard) HideAvatar(v string) *ActionCard {
	o.hideAvatar = &v
	return o
}

// GetSingleTitle returns the SingleTitle field value if set, zero value otherwise.
func (o *ActionCard) GetSingleTitle() string {
	if o == nil || utils.IsNil(o.singleTitle) {
		var ret string
		return ret
	}
	return *o.singleTitle
}

// GetSingleTitleOk returns a tuple with the SingleTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionCard) GetSingleTitleOk() (*string, bool) {
	if o == nil || utils.IsNil(o.singleTitle) {
		return nil, false
	}
	return o.singleTitle, true
}

// HasSingleTitle returns a boolean if a field has been set.
func (o *ActionCard) HasSingleTitle() bool {
	if o != nil && !utils.IsNil(o.singleTitle) {
		return true
	}

	return false
}

// SingleTitle gets a reference to the given string and assigns it to the singleTitle field.
// singleTitle:
func (o *ActionCard) SingleTitle(v string) *ActionCard {
	o.singleTitle = &v
	return o
}

// GetSingleURL returns the SingleURL field value if set, zero value otherwise.
func (o *ActionCard) GetSingleURL() string {
	if o == nil || utils.IsNil(o.singleURL) {
		var ret string
		return ret
	}
	return *o.singleURL
}

// GetSingleURLOk returns a tuple with the SingleURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionCard) GetSingleURLOk() (*string, bool) {
	if o == nil || utils.IsNil(o.singleURL) {
		return nil, false
	}
	return o.singleURL, true
}

// HasSingleURL returns a boolean if a field has been set.
func (o *ActionCard) HasSingleURL() bool {
	if o != nil && !utils.IsNil(o.singleURL) {
		return true
	}

	return false
}

// SingleURL gets a reference to the given string and assigns it to the singleURL field.
// singleURL:
func (o *ActionCard) SingleURL(v string) *ActionCard {
	o.singleURL = &v
	return o
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ActionCard) GetText() string {
	if o == nil || utils.IsNil(o.text) {
		var ret string
		return ret
	}
	return *o.text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionCard) GetTextOk() (*string, bool) {
	if o == nil || utils.IsNil(o.text) {
		return nil, false
	}
	return o.text, true
}

// HasText returns a boolean if a field has been set.
func (o *ActionCard) HasText() bool {
	if o != nil && !utils.IsNil(o.text) {
		return true
	}

	return false
}

// Text gets a reference to the given string and assigns it to the text field.
// text:
func (o *ActionCard) Text(v string) *ActionCard {
	o.text = &v
	return o
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ActionCard) GetTitle() string {
	if o == nil || utils.IsNil(o.title) {
		var ret string
		return ret
	}
	return *o.title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionCard) GetTitleOk() (*string, bool) {
	if o == nil || utils.IsNil(o.title) {
		return nil, false
	}
	return o.title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ActionCard) HasTitle() bool {
	if o != nil && !utils.IsNil(o.title) {
		return true
	}

	return false
}

// Title gets a reference to the given string and assigns it to the title field.
// title:
func (o *ActionCard) Title(v string) *ActionCard {
	o.title = &v
	return o
}

func (o ActionCard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.btnOrientation) {
		toSerialize["btnOrientation"] = o.btnOrientation
	}
	if o.btns.IsSet() {
		toSerialize["btns"] = o.btns.Get()
	}
	if !utils.IsNil(o.hideAvatar) {
		toSerialize["hideAvatar"] = o.hideAvatar
	}
	if !utils.IsNil(o.singleTitle) {
		toSerialize["singleTitle"] = o.singleTitle
	}
	if !utils.IsNil(o.singleURL) {
		toSerialize["singleURL"] = o.singleURL
	}
	if !utils.IsNil(o.text) {
		toSerialize["text"] = o.text
	}
	if !utils.IsNil(o.title) {
		toSerialize["title"] = o.title
	}
	return toSerialize, nil
}

type NullableActionCard struct {
	value *ActionCard
	isSet bool
}

func (v NullableActionCard) Get() *ActionCard {
	return v.value
}

func (v *NullableActionCard) Set(val *ActionCard) {
	v.value = val
	v.isSet = true
}

func (v NullableActionCard) IsSet() bool {
	return v.isSet
}

func (v *NullableActionCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionCard(val *ActionCard) *NullableActionCard {
	return &NullableActionCard{value: val, isSet: true}
}

func (v NullableActionCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
