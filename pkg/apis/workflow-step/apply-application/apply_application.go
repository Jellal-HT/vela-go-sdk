/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_application

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/chivalryq/vela-go-sdk/pkg/apis"
	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the ApplyApplicationSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApplyApplicationSpec{}

// ApplyApplicationSpec struct for ApplyApplicationSpec
type ApplyApplicationSpec struct {
}

// NewApplyApplicationSpecWith instantiates a new ApplyApplicationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyApplicationSpecWith() *ApplyApplicationSpec {
	this := ApplyApplicationSpec{}
	return &this
}

// NewApplyApplicationSpec instantiates a new ApplyApplicationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyApplicationSpec() *ApplyApplicationSpec {
	this := ApplyApplicationSpec{}
	return &this
}

func (o ApplyApplicationSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyApplicationSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableApplyApplicationSpec struct {
	value *ApplyApplicationSpec
	isSet bool
}

func (v NullableApplyApplicationSpec) Get() *ApplyApplicationSpec {
	return v.value
}

func (v *NullableApplyApplicationSpec) Set(val *ApplyApplicationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyApplicationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyApplicationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyApplicationSpec(val *ApplyApplicationSpec) *NullableApplyApplicationSpec {
	return &NullableApplyApplicationSpec{value: val, isSet: true}
}

func (v NullableApplyApplicationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyApplicationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const ApplyApplicationType = "apply-application"

type ApplyApplicationWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties ApplyApplicationSpec
}

func ApplyApplication(name string) *ApplyApplicationWorkflowStep {
	a := &ApplyApplicationWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
	}}
	return a
}

func (a *ApplyApplicationWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range a.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  a.Base.DependsOn,
		If:         a.Base.If,
		Inputs:     a.Base.Inputs,
		Meta:       a.Base.Meta,
		Name:       a.Base.Name,
		Outputs:    a.Base.Outputs,
		Properties: util.Object2RawExtension(a.Properties),
		SubSteps:   subSteps,
		Timeout:    a.Base.Timeout,
		Type:       ApplyApplicationType,
	}
	return res
}

func (a *ApplyApplicationWorkflowStep) If(_if string) *ApplyApplicationWorkflowStep {
	a.Base.If = _if
	return a
}

func (a *ApplyApplicationWorkflowStep) Alias(alias string) *ApplyApplicationWorkflowStep {
	a.Base.Meta.Alias = alias
	return a
}

func (a *ApplyApplicationWorkflowStep) Timeout(timeout string) *ApplyApplicationWorkflowStep {
	a.Base.Timeout = timeout
	return a
}

func (a *ApplyApplicationWorkflowStep) DependsOn(dependsOn []string) *ApplyApplicationWorkflowStep {
	a.Base.DependsOn = dependsOn
	return a
}

func (a *ApplyApplicationWorkflowStep) Inputs(input common.StepInputs) *ApplyApplicationWorkflowStep {
	a.Base.Inputs = input
	return a
}

func (a *ApplyApplicationWorkflowStep) Outputs(output common.StepOutputs) *ApplyApplicationWorkflowStep {
	a.Base.Outputs = output
	return a
}

func (a *ApplyApplicationWorkflowStep) Name() string {
	return a.Base.Name
}

func (a *ApplyApplicationWorkflowStep) Type() string {
	return ApplyApplicationType
}
