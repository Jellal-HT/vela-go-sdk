/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export_data

import (
	"encoding/json"
	"vela-go-sdk/pkg/apis"
	"vela-go-sdk/pkg/apis/utils"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"
)

// checks if the ExportDataSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ExportDataSpec{}

// ExportDataSpec struct for ExportDataSpec
type ExportDataSpec struct {
	// Specify the data to export
	data map[string]interface{} `json:"data"`
	// Specify the kind of the export destination
	kind string `json:"kind"`
	// Specify the name of the export destination
	name *string `json:"name,omitempty"`
	// Specify the namespace of the export destination
	namespace *string `json:"namespace,omitempty"`
	// Specify the topology to export
	topology *string `json:"topology,omitempty"`
}

// NewExportDataSpecWith instantiates a new ExportDataSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportDataSpecWith(data map[string]interface{}, kind string) *ExportDataSpec {
	this := ExportDataSpec{}
	this.data = data
	this.kind = kind
	return &this
}

// NewExportDataSpec instantiates a new ExportDataSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportDataSpec() *ExportDataSpec {
	this := ExportDataSpec{}
	var kind string = "ConfigMap"
	this.kind = kind
	return &this
}

// GetData returns the Data field value
func (o *ExportDataWorkflowStep) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties.data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ExportDataWorkflowStep) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Properties.data, true
}

// Data sets field value
func (o *ExportDataWorkflowStep) Data(v map[string]interface{}) *ExportDataWorkflowStep {
	o.Properties.data = v
	return o
}

// GetKind returns the Kind field value
func (o *ExportDataWorkflowStep) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties.kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ExportDataWorkflowStep) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties.kind, true
}

// Kind sets field value
func (o *ExportDataWorkflowStep) Kind(v string) *ExportDataWorkflowStep {
	o.Properties.kind = v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExportDataWorkflowStep) GetName() string {
	if o == nil || utils.IsNil(o.Properties.name) {
		var ret string
		return ret
	}
	return *o.Properties.name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataWorkflowStep) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.name) {
		return nil, false
	}
	return o.Properties.name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExportDataWorkflowStep) HasName() bool {
	if o != nil && !utils.IsNil(o.Properties.name) {
		return true
	}

	return false
}

// Name gets a reference to the given string and assigns it to the name field.
// name:  Specify the name of the export destination
func (o *ExportDataWorkflowStep) Name(v string) *ExportDataWorkflowStep {
	o.Properties.name = &v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ExportDataWorkflowStep) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		var ret string
		return ret
	}
	return *o.Properties.namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.namespace) {
		return nil, false
	}
	return o.Properties.namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ExportDataWorkflowStep) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.namespace) {
		return true
	}

	return false
}

// Namespace gets a reference to the given string and assigns it to the namespace field.
// namespace:  Specify the namespace of the export destination
func (o *ExportDataWorkflowStep) Namespace(v string) *ExportDataWorkflowStep {
	o.Properties.namespace = &v
	return o
}

// GetTopology returns the Topology field value if set, zero value otherwise.
func (o *ExportDataWorkflowStep) GetTopology() string {
	if o == nil || utils.IsNil(o.Properties.topology) {
		var ret string
		return ret
	}
	return *o.Properties.topology
}

// GetTopologyOk returns a tuple with the Topology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataWorkflowStep) GetTopologyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.topology) {
		return nil, false
	}
	return o.Properties.topology, true
}

// HasTopology returns a boolean if a field has been set.
func (o *ExportDataWorkflowStep) HasTopology() bool {
	if o != nil && !utils.IsNil(o.Properties.topology) {
		return true
	}

	return false
}

// Topology gets a reference to the given string and assigns it to the topology field.
// topology:  Specify the topology to export
func (o *ExportDataWorkflowStep) Topology(v string) *ExportDataWorkflowStep {
	o.Properties.topology = &v
	return o
}

func (o ExportDataSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportDataSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.data
	toSerialize["kind"] = o.kind
	if !utils.IsNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !utils.IsNil(o.namespace) {
		toSerialize["namespace"] = o.namespace
	}
	if !utils.IsNil(o.topology) {
		toSerialize["topology"] = o.topology
	}
	return toSerialize, nil
}

type NullableExportDataSpec struct {
	value *ExportDataSpec
	isSet bool
}

func (v NullableExportDataSpec) Get() *ExportDataSpec {
	return v.value
}

func (v *NullableExportDataSpec) Set(val *ExportDataSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableExportDataSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableExportDataSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportDataSpec(val *ExportDataSpec) *NullableExportDataSpec {
	return &NullableExportDataSpec{value: val, isSet: true}
}

func (v NullableExportDataSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportDataSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const ExportDataType = "export-data"

type ExportDataWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties ExportDataSpec
}

func ExportData(name string) *ExportDataWorkflowStep {
	e := &ExportDataWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
	}}
	return e
}

func (e *ExportDataWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range e.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  e.Base.DependsOn,
		If:         e.Base.If,
		Inputs:     e.Base.Inputs,
		Meta:       e.Base.Meta,
		Name:       e.Base.Name,
		Outputs:    e.Base.Outputs,
		Properties: util.Object2RawExtension(e.Properties),
		SubSteps:   subSteps,
		Timeout:    e.Base.Timeout,
		Type:       ExportDataType,
	}
	return res
}

func (e *ExportDataWorkflowStep) If(_if string) *ExportDataWorkflowStep {
	e.Base.If = _if
	return e
}

func (e *ExportDataWorkflowStep) Alias(alias string) *ExportDataWorkflowStep {
	e.Base.Meta.Alias = alias
	return e
}

func (e *ExportDataWorkflowStep) Timeout(timeout string) *ExportDataWorkflowStep {
	e.Base.Timeout = timeout
	return e
}

func (e *ExportDataWorkflowStep) DependsOn(dependsOn []string) *ExportDataWorkflowStep {
	e.Base.DependsOn = dependsOn
	return e
}

func (e *ExportDataWorkflowStep) Inputs(input common.StepInputs) *ExportDataWorkflowStep {
	e.Base.Inputs = input
	return e
}

func (e *ExportDataWorkflowStep) Outputs(output common.StepOutputs) *ExportDataWorkflowStep {
	e.Base.Outputs = output
	return e
}
